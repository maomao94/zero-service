// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ossFieldNames          = builder.RawFieldNames(&Oss{})
	ossRows                = strings.Join(ossFieldNames, ",")
	ossRowsExpectAutoSet   = strings.Join(stringx.Remove(ossFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	ossRowsWithPlaceHolder = strings.Join(stringx.Remove(ossFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	ossModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Oss) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Oss, error)
		FindOneByTenantIdOssCode(ctx context.Context, tenantId string, ossCode string) (*Oss, error)
		Update(ctx context.Context, session sqlx.Session, data *Oss) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Oss) error
		Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error
		ExecCtx(ctx context.Context, session sqlx.Session, query string, args ...any) (sql.Result, error)
		SelectWithBuilder(ctx context.Context, builder squirrel.SelectBuilder) ([]*Oss, error)
		InsertWithBuilder(ctx context.Context, session sqlx.Session, builder squirrel.InsertBuilder) (sql.Result, error)
		UpdateWithBuilder(ctx context.Context, session sqlx.Session, builder squirrel.UpdateBuilder) (sql.Result, error)
		DeleteWithBuilder(ctx context.Context, session sqlx.Session, builder squirrel.DeleteBuilder) (sql.Result, error)
		SelectBuilder() squirrel.SelectBuilder
		InsertBuilder() squirrel.InsertBuilder
		UpdateBuilder() squirrel.UpdateBuilder
		DeleteBuilder() squirrel.DeleteBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, id int64) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy ...string) ([]*Oss, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*Oss, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*Oss, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Oss, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Oss, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultOssModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Oss struct {
		Id         int64     `db:"id"`
		CreateTime time.Time `db:"create_time"`
		UpdateTime time.Time `db:"update_time"`
		DeleteTime time.Time `db:"delete_time"`
		DelState   int64     `db:"del_state"`
		Version    int64     `db:"version"`     // 版本号
		TenantId   string    `db:"tenant_id"`   // 租户ID
		Category   int64     `db:"category"`    // 分类 1-minio 2-qiniu 3-ali 4-tecent
		OssCode    string    `db:"oss_code"`    // 资源编号
		Endpoint   string    `db:"endpoint"`    // 资源地址
		AccessKey  string    `db:"access_key"`  // accessKey
		SecretKey  string    `db:"secret_key"`  // secretKey
		BucketName string    `db:"bucket_name"` // 空间名
		AppId      string    `db:"app_id"`      // 应用ID
		Region     string    `db:"region"`      // 地域简称
		Remark     string    `db:"remark"`      // 备注
		Status     int64     `db:"status"`      // 状态 1-开启 2-关闭
	}
)

func newOssModel(conn sqlx.SqlConn) *defaultOssModel {
	return &defaultOssModel{
		conn:  conn,
		table: "`oss`",
	}
}

func (m *defaultOssModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultOssModel) FindOne(ctx context.Context, id int64) (*Oss, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", ossRows, m.table)
	var resp Oss
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, 0)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOssModel) FindOneByTenantIdOssCode(ctx context.Context, tenantId string, ossCode string) (*Oss, error) {
	var resp Oss
	query := fmt.Sprintf("select %s from %s where `tenant_id` = ? and `oss_code` = ?  and del_state = ? limit 1", ossRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, tenantId, ossCode, 0)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultOssModel) Insert(ctx context.Context, session sqlx.Session, data *Oss) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	data.DelState = 0

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ossRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.TenantId, data.Category, data.OssCode, data.Endpoint, data.AccessKey, data.SecretKey, data.BucketName, data.AppId, data.Region, data.Remark, data.Status)
	}
	return m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.TenantId, data.Category, data.OssCode, data.Endpoint, data.AccessKey, data.SecretKey, data.BucketName, data.AppId, data.Region, data.Remark, data.Status)
}

func (m *defaultOssModel) Update(ctx context.Context, session sqlx.Session, newData *Oss) (sql.Result, error) {
	newData.DeleteTime = time.Unix(0, 0)
	newData.DelState = 0
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ossRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.TenantId, newData.Category, newData.OssCode, newData.Endpoint, newData.AccessKey, newData.SecretKey, newData.BucketName, newData.AppId, newData.Region, newData.Remark, newData.Status, newData.Id)
	}
	return m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.TenantId, newData.Category, newData.OssCode, newData.Endpoint, newData.AccessKey, newData.SecretKey, newData.BucketName, newData.AppId, newData.Region, newData.Remark, newData.Status, newData.Id)
}

func (m *defaultOssModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *Oss) error {

	oldVersion := newData.Version
	newData.Version += 1

	var sqlResult sql.Result
	var err error

	query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, ossRowsWithPlaceHolder)
	if session != nil {
		sqlResult, err = session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.TenantId, newData.Category, newData.OssCode, newData.Endpoint, newData.AccessKey, newData.SecretKey, newData.BucketName, newData.AppId, newData.Region, newData.Remark, newData.Status, newData.Id, oldVersion)
	} else {
		sqlResult, err = m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.TenantId, newData.Category, newData.OssCode, newData.Endpoint, newData.AccessKey, newData.SecretKey, newData.BucketName, newData.AppId, newData.Region, newData.Remark, newData.Status, newData.Id, oldVersion)
	}

	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultOssModel) DeleteSoft(ctx context.Context, session sqlx.Session, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}
	data.DelState = 1
	data.DeleteTime = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "OssModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultOssModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultOssModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultOssModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy ...string) ([]*Oss, error) {

	builder = builder.Columns(ossRows)

	if len(orderBy) == 0 {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy...)
	}

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Oss

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultOssModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*Oss, error) {

	builder = builder.Columns(ossRows)

	if len(orderBy) == 0 {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy...)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", 0).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Oss

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultOssModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*Oss, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(ossRows)

	if len(orderBy) == 0 {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy...)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", 0).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*Oss

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultOssModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Oss, error) {

	builder = builder.Columns(ossRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", 0).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Oss

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultOssModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Oss, error) {

	builder = builder.Columns(ossRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", 0).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Oss

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultOssModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultOssModel) ExecCtx(ctx context.Context, session sqlx.Session, query string, args ...any) (sql.Result, error) {
	if session != nil {
		return session.ExecCtx(ctx, query, args...)
	}
	return m.conn.ExecCtx(ctx, query, args...)
}

func (m *defaultOssModel) SelectWithBuilder(ctx context.Context, builder squirrel.SelectBuilder) ([]*Oss, error) {
	query, args, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Oss

	err = m.conn.QueryRowsCtx(ctx, &resp, query, args...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultOssModel) InsertWithBuilder(ctx context.Context, session sqlx.Session, builder squirrel.InsertBuilder) (sql.Result, error) {
	query, args, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	return m.ExecCtx(ctx, session, query, args...)
}

func (m *defaultOssModel) UpdateWithBuilder(ctx context.Context, session sqlx.Session, builder squirrel.UpdateBuilder) (sql.Result, error) {
	query, args, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	return m.ExecCtx(ctx, session, query, args...)
}

func (m *defaultOssModel) DeleteWithBuilder(ctx context.Context, session sqlx.Session, builder squirrel.DeleteBuilder) (sql.Result, error) {
	query, args, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	return m.ExecCtx(ctx, session, query, args...)
}

func (m *defaultOssModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultOssModel) UpdateBuilder() squirrel.UpdateBuilder {
	return squirrel.Update(m.table)
}

func (m *defaultOssModel) DeleteBuilder() squirrel.DeleteBuilder {
	return squirrel.Delete(m.table)
}

func (m *defaultOssModel) InsertBuilder() squirrel.InsertBuilder {
	return squirrel.Insert(m.table)
}

func (m *defaultOssModel) tableName() string {
	return m.table
}
