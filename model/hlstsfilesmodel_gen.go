// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	hlsTsFilesFieldNames          = builder.RawFieldNames(&HlsTsFiles{})
	hlsTsFilesRows                = strings.Join(hlsTsFilesFieldNames, ",")
	hlsTsFilesRowsExpectAutoSet   = strings.Join(stringx.Remove(hlsTsFilesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	hlsTsFilesRowsWithPlaceHolder = strings.Join(stringx.Remove(hlsTsFilesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	hlsTsFilesModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *HlsTsFiles) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*HlsTsFiles, error)
		FindOneByTsFile(ctx context.Context, tsFile string) (*HlsTsFiles, error)
		Update(ctx context.Context, session sqlx.Session, data *HlsTsFiles) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *HlsTsFiles) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *HlsTsFiles) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy ...string) ([]*HlsTsFiles, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*HlsTsFiles, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*HlsTsFiles, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*HlsTsFiles, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*HlsTsFiles, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultHlsTsFilesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	HlsTsFiles struct {
		Id             int64           `db:"id"`               // 自增主键
		CreateTime     time.Time       `db:"create_time"`      // 插入时间
		UpdateTime     time.Time       `db:"update_time"`      // 更新时间
		DeleteTime     time.Time       `db:"delete_time"`      // 逻辑删除时间
		DelState       int64           `db:"del_state"`        // 逻辑删除标记
		Version        int64           `db:"version"`          // 版本号
		Event          string          `db:"event"`            // "open" 表示 TS 创建，"close" 表示 TS 写入完成
		StreamName     string          `db:"stream_name"`      // 流名称
		Cwd            string          `db:"cwd"`              // 当前工作路径
		TsFile         string          `db:"ts_file"`          // TS 文件磁盘路径
		LiveM3u8File   string          `db:"live_m3u8_file"`   // 直播 m3u8 文件路径
		RecordM3u8File sql.NullString  `db:"record_m3u8_file"` // 录制 m3u8 文件路径（可为空）
		TsId           int64           `db:"ts_id"`            // TS 文件的 ID 编号，线性递增
		TsTimestamp    int64           `db:"ts_timestamp"`     // TS 文件时间戳，方便区间查询
		Duration       sql.NullFloat64 `db:"duration"`         // TS 文件时长，单位秒，event 为 close 时有效
		ServerId       string          `db:"server_id"`        // lalserver 节点 ID
	}
)

func newHlsTsFilesModel(conn sqlx.SqlConn) *defaultHlsTsFilesModel {
	return &defaultHlsTsFilesModel{
		conn:  conn,
		table: "`hls_ts_files`",
	}
}

func (m *defaultHlsTsFilesModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultHlsTsFilesModel) FindOne(ctx context.Context, id int64) (*HlsTsFiles, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", hlsTsFilesRows, m.table)
	var resp HlsTsFiles
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, 0)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHlsTsFilesModel) FindOneByTsFile(ctx context.Context, tsFile string) (*HlsTsFiles, error) {
	var resp HlsTsFiles
	query := fmt.Sprintf("select %s from %s where `ts_file` = ?  and del_state = ? limit 1", hlsTsFilesRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, tsFile, 0)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultHlsTsFilesModel) Insert(ctx context.Context, session sqlx.Session, data *HlsTsFiles) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	data.DelState = 0

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, hlsTsFilesRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Event, data.StreamName, data.Cwd, data.TsFile, data.LiveM3u8File, data.RecordM3u8File, data.TsId, data.TsTimestamp, data.Duration, data.ServerId)
	}
	return m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Event, data.StreamName, data.Cwd, data.TsFile, data.LiveM3u8File, data.RecordM3u8File, data.TsId, data.TsTimestamp, data.Duration, data.ServerId)
}

func (m *defaultHlsTsFilesModel) Update(ctx context.Context, session sqlx.Session, newData *HlsTsFiles) (sql.Result, error) {
	newData.DeleteTime = time.Unix(0, 0)
	newData.DelState = 0
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, hlsTsFilesRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Event, newData.StreamName, newData.Cwd, newData.TsFile, newData.LiveM3u8File, newData.RecordM3u8File, newData.TsId, newData.TsTimestamp, newData.Duration, newData.ServerId, newData.Id)
	}
	return m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Event, newData.StreamName, newData.Cwd, newData.TsFile, newData.LiveM3u8File, newData.RecordM3u8File, newData.TsId, newData.TsTimestamp, newData.Duration, newData.ServerId, newData.Id)
}

func (m *defaultHlsTsFilesModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *HlsTsFiles) error {

	oldVersion := newData.Version
	newData.Version += 1

	var sqlResult sql.Result
	var err error

	query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, hlsTsFilesRowsWithPlaceHolder)
	if session != nil {
		sqlResult, err = session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Event, newData.StreamName, newData.Cwd, newData.TsFile, newData.LiveM3u8File, newData.RecordM3u8File, newData.TsId, newData.TsTimestamp, newData.Duration, newData.ServerId, newData.Id, oldVersion)
	} else {
		sqlResult, err = m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Event, newData.StreamName, newData.Cwd, newData.TsFile, newData.LiveM3u8File, newData.RecordM3u8File, newData.TsId, newData.TsTimestamp, newData.Duration, newData.ServerId, newData.Id, oldVersion)
	}

	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultHlsTsFilesModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *HlsTsFiles) error {
	data.DelState = 1
	data.DeleteTime = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "HlsTsFilesModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultHlsTsFilesModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultHlsTsFilesModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultHlsTsFilesModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy ...string) ([]*HlsTsFiles, error) {

	builder = builder.Columns(hlsTsFilesRows)

	if len(orderBy) == 0 {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy...)
	}

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*HlsTsFiles

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultHlsTsFilesModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*HlsTsFiles, error) {

	builder = builder.Columns(hlsTsFilesRows)

	if len(orderBy) == 0 {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy...)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", 0).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*HlsTsFiles

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultHlsTsFilesModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy ...string) ([]*HlsTsFiles, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(hlsTsFilesRows)

	if len(orderBy) == 0 {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy...)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", 0).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*HlsTsFiles

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultHlsTsFilesModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*HlsTsFiles, error) {

	builder = builder.Columns(hlsTsFilesRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", 0).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*HlsTsFiles

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultHlsTsFilesModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*HlsTsFiles, error) {

	builder = builder.Columns(hlsTsFilesRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", 0).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*HlsTsFiles

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultHlsTsFilesModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultHlsTsFilesModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultHlsTsFilesModel) tableName() string {
	return m.table
}
