// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	regionFieldNames          = builder.RawFieldNames(&Region{})
	regionRows                = strings.Join(regionFieldNames, ",")
	regionRowsExpectAutoSet   = strings.Join(stringx.Remove(regionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	regionRowsWithPlaceHolder = strings.Join(stringx.Remove(regionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	regionModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Region) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Region, error)
		FindOneByCode(ctx context.Context, code string) (*Region, error)
		Update(ctx context.Context, session sqlx.Session, data *Region) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Region) error
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *Region) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*Region, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Region, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Region, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Region, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Region, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultRegionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Region struct {
		Id           int64          `db:"id"`
		CreateTime   time.Time      `db:"create_time"`
		UpdateTime   time.Time      `db:"update_time"`
		DeleteTime   time.Time      `db:"delete_time"`
		DelState     int64          `db:"del_state"`
		Version      int64          `db:"version"`       // 版本号
		Code         string         `db:"code"`          // 区划编号
		ParentCode   sql.NullString `db:"parent_code"`   // 父区划编号
		Ancestors    sql.NullString `db:"ancestors"`     // 祖区划编号
		Name         sql.NullString `db:"name"`          // 区划名称
		ProvinceCode sql.NullString `db:"province_code"` // 省级区划编号
		ProvinceName sql.NullString `db:"province_name"` // 省级名称
		CityCode     sql.NullString `db:"city_code"`     // 市级区划编号
		CityName     sql.NullString `db:"city_name"`     // 市级名称
		DistrictCode sql.NullString `db:"district_code"` // 区级区划编号
		DistrictName sql.NullString `db:"district_name"` // 区级名称
		TownCode     sql.NullString `db:"town_code"`     // 镇级区划编号
		TownName     sql.NullString `db:"town_name"`     // 镇级名称
		VillageCode  sql.NullString `db:"village_code"`  // 村级区划编号
		VillageName  sql.NullString `db:"village_name"`  // 村级名称
		RegionLevel  int64          `db:"region_level"`  // 层级
		Sort         int64          `db:"sort"`          // 排序
		Remark       sql.NullString `db:"remark"`        // 备注
	}
)

func newRegionModel(conn sqlx.SqlConn) *defaultRegionModel {
	return &defaultRegionModel{
		conn:  conn,
		table: "`region`",
	}
}

func (m *defaultRegionModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, id)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}
func (m *defaultRegionModel) FindOne(ctx context.Context, id int64) (*Region, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", regionRows, m.table)
	var resp Region
	err := m.conn.QueryRowCtx(ctx, &resp, query, id, 0)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRegionModel) FindOneByCode(ctx context.Context, code string) (*Region, error) {
	var resp Region
	query := fmt.Sprintf("select %s from %s where `code` = ?  and del_state = ? limit 1", regionRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, code, 0)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRegionModel) Insert(ctx context.Context, session sqlx.Session, data *Region) (sql.Result, error) {
	data.DeleteTime = time.Unix(0, 0)
	data.DelState = 0

	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, regionRowsExpectAutoSet)
	if session != nil {
		return session.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Code, data.ParentCode, data.Ancestors, data.Name, data.ProvinceCode, data.ProvinceName, data.CityCode, data.CityName, data.DistrictCode, data.DistrictName, data.TownCode, data.TownName, data.VillageCode, data.VillageName, data.RegionLevel, data.Sort, data.Remark)
	}
	return m.conn.ExecCtx(ctx, query, data.DeleteTime, data.DelState, data.Version, data.Code, data.ParentCode, data.Ancestors, data.Name, data.ProvinceCode, data.ProvinceName, data.CityCode, data.CityName, data.DistrictCode, data.DistrictName, data.TownCode, data.TownName, data.VillageCode, data.VillageName, data.RegionLevel, data.Sort, data.Remark)
}

func (m *defaultRegionModel) Update(ctx context.Context, session sqlx.Session, newData *Region) (sql.Result, error) {
	newData.DeleteTime = time.Unix(0, 0)
	newData.DelState = 0
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, regionRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Code, newData.ParentCode, newData.Ancestors, newData.Name, newData.ProvinceCode, newData.ProvinceName, newData.CityCode, newData.CityName, newData.DistrictCode, newData.DistrictName, newData.TownCode, newData.TownName, newData.VillageCode, newData.VillageName, newData.RegionLevel, newData.Sort, newData.Remark, newData.Id)
	}
	return m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Code, newData.ParentCode, newData.Ancestors, newData.Name, newData.ProvinceCode, newData.ProvinceName, newData.CityCode, newData.CityName, newData.DistrictCode, newData.DistrictName, newData.TownCode, newData.TownName, newData.VillageCode, newData.VillageName, newData.RegionLevel, newData.Sort, newData.Remark, newData.Id)
}

func (m *defaultRegionModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *Region) error {

	oldVersion := newData.Version
	newData.Version += 1

	var sqlResult sql.Result
	var err error

	query := fmt.Sprintf("update %s set %s where `id` = ? and version = ? ", m.table, regionRowsWithPlaceHolder)
	if session != nil {
		sqlResult, err = session.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Code, newData.ParentCode, newData.Ancestors, newData.Name, newData.ProvinceCode, newData.ProvinceName, newData.CityCode, newData.CityName, newData.DistrictCode, newData.DistrictName, newData.TownCode, newData.TownName, newData.VillageCode, newData.VillageName, newData.RegionLevel, newData.Sort, newData.Remark, newData.Id, oldVersion)
	} else {
		sqlResult, err = m.conn.ExecCtx(ctx, query, newData.DeleteTime, newData.DelState, newData.Version, newData.Code, newData.ParentCode, newData.Ancestors, newData.Name, newData.ProvinceCode, newData.ProvinceName, newData.CityCode, newData.CityName, newData.DistrictCode, newData.DistrictName, newData.TownCode, newData.TownName, newData.VillageCode, newData.VillageName, newData.RegionLevel, newData.Sort, newData.Remark, newData.Id, oldVersion)
	}

	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return ErrNoRowsUpdate
	}

	return nil
}

func (m *defaultRegionModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *Region) error {
	data.DelState = 1
	data.DeleteTime = time.Now()
	if err := m.UpdateWithVersion(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "RegionModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultRegionModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultRegionModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64

	err = m.conn.QueryRowCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultRegionModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*Region, error) {

	builder = builder.Columns(regionRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", 0).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Region

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRegionModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Region, error) {

	builder = builder.Columns(regionRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", 0).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Region

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRegionModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Region, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(regionRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", 0).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*Region

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultRegionModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Region, error) {

	builder = builder.Columns(regionRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", 0).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Region

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRegionModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Region, error) {

	builder = builder.Columns(regionRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", 0).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Region

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRegionModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultRegionModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultRegionModel) tableName() string {
	return m.table
}
