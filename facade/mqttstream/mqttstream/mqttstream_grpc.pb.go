// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mqttstream.proto

package mqttstream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MqttStream_ReceiveMessage_FullMethodName = "/mqttstream.MqttStream/ReceiveMessage"
)

// MqttStreamClient is the client API for MqttStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqttStreamClient interface {
	// 接收消息
	ReceiveMessage(ctx context.Context, in *ReceiveMessageReq, opts ...grpc.CallOption) (*ReceiveMessageRes, error)
}

type mqttStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewMqttStreamClient(cc grpc.ClientConnInterface) MqttStreamClient {
	return &mqttStreamClient{cc}
}

func (c *mqttStreamClient) ReceiveMessage(ctx context.Context, in *ReceiveMessageReq, opts ...grpc.CallOption) (*ReceiveMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveMessageRes)
	err := c.cc.Invoke(ctx, MqttStream_ReceiveMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqttStreamServer is the server API for MqttStream service.
// All implementations must embed UnimplementedMqttStreamServer
// for forward compatibility.
type MqttStreamServer interface {
	// 接收消息
	ReceiveMessage(context.Context, *ReceiveMessageReq) (*ReceiveMessageRes, error)
	mustEmbedUnimplementedMqttStreamServer()
}

// UnimplementedMqttStreamServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMqttStreamServer struct{}

func (UnimplementedMqttStreamServer) ReceiveMessage(context.Context, *ReceiveMessageReq) (*ReceiveMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedMqttStreamServer) mustEmbedUnimplementedMqttStreamServer() {}
func (UnimplementedMqttStreamServer) testEmbeddedByValue()                    {}

// UnsafeMqttStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqttStreamServer will
// result in compilation errors.
type UnsafeMqttStreamServer interface {
	mustEmbedUnimplementedMqttStreamServer()
}

func RegisterMqttStreamServer(s grpc.ServiceRegistrar, srv MqttStreamServer) {
	// If the following call pancis, it indicates UnimplementedMqttStreamServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MqttStream_ServiceDesc, srv)
}

func _MqttStream_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqttStreamServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MqttStream_ReceiveMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqttStreamServer).ReceiveMessage(ctx, req.(*ReceiveMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MqttStream_ServiceDesc is the grpc.ServiceDesc for MqttStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqttStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mqttstream.MqttStream",
	HandlerType: (*MqttStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMessage",
			Handler:    _MqttStream_ReceiveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mqttstream.proto",
}
