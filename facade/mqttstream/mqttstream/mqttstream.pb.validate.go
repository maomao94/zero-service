// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mqttstream.proto

package mqttstream

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReceiveMessageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceiveMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveMessageReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveMessageReqMultiError, or nil if none found.
func (m *ReceiveMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReceiveMessageReqValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReceiveMessageReqValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReceiveMessageReqValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReceiveMessageReqMultiError(errors)
	}

	return nil
}

// ReceiveMessageReqMultiError is an error wrapping multiple validation errors
// returned by ReceiveMessageReq.ValidateAll() if the designated constraints
// aren't met.
type ReceiveMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveMessageReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveMessageReqMultiError) AllErrors() []error { return m }

// ReceiveMessageReqValidationError is the validation error returned by
// ReceiveMessageReq.Validate if the designated constraints aren't met.
type ReceiveMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveMessageReqValidationError) ErrorName() string {
	return "ReceiveMessageReqValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveMessageReqValidationError{}

// Validate checks the field values on ReceiveMessageRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReceiveMessageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReceiveMessageRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReceiveMessageResMultiError, or nil if none found.
func (m *ReceiveMessageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *ReceiveMessageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReceiveMessageResMultiError(errors)
	}

	return nil
}

// ReceiveMessageResMultiError is an error wrapping multiple validation errors
// returned by ReceiveMessageRes.ValidateAll() if the designated constraints
// aren't met.
type ReceiveMessageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReceiveMessageResMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReceiveMessageResMultiError) AllErrors() []error { return m }

// ReceiveMessageResValidationError is the validation error returned by
// ReceiveMessageRes.Validate if the designated constraints aren't met.
type ReceiveMessageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReceiveMessageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReceiveMessageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReceiveMessageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReceiveMessageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReceiveMessageResValidationError) ErrorName() string {
	return "ReceiveMessageResValidationError"
}

// Error satisfies the builtin error interface
func (e ReceiveMessageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReceiveMessageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReceiveMessageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReceiveMessageResValidationError{}

// Validate checks the field values on MqttMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MqttMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MqttMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MqttMessageMultiError, or
// nil if none found.
func (m *MqttMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *MqttMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for MsgId

	// no validation rules for Topic

	// no validation rules for Payload

	// no validation rules for SendTime

	if len(errors) > 0 {
		return MqttMessageMultiError(errors)
	}

	return nil
}

// MqttMessageMultiError is an error wrapping multiple validation errors
// returned by MqttMessage.ValidateAll() if the designated constraints aren't met.
type MqttMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MqttMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MqttMessageMultiError) AllErrors() []error { return m }

// MqttMessageValidationError is the validation error returned by
// MqttMessage.Validate if the designated constraints aren't met.
type MqttMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MqttMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MqttMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MqttMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MqttMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MqttMessageValidationError) ErrorName() string { return "MqttMessageValidationError" }

// Error satisfies the builtin error interface
func (e MqttMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMqttMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MqttMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MqttMessageValidationError{}
