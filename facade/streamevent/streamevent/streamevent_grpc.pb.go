// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: streamevent.proto

package streamevent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamEvent_ReceiveMQTTMessage_FullMethodName = "/streamevent.StreamEvent/ReceiveMQTTMessage"
	StreamEvent_ReceiveWSMessage_FullMethodName   = "/streamevent.StreamEvent/ReceiveWSMessage"
	StreamEvent_PushChunkAsdu_FullMethodName      = "/streamevent.StreamEvent/PushChunkAsdu"
)

// StreamEventClient is the client API for StreamEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamEventClient interface {
	// 接收MQTT消息
	ReceiveMQTTMessage(ctx context.Context, in *ReceiveMQTTMessageReq, opts ...grpc.CallOption) (*ReceiveMQTTMessageRes, error)
	// 接收WS消息
	ReceiveWSMessage(ctx context.Context, in *ReceiveWSMessageReq, opts ...grpc.CallOption) (*ReceiveWSMessageRes, error)
	// 推送 chunk asdu 104协议消息
	PushChunkAsdu(ctx context.Context, in *PushChunkAsduReq, opts ...grpc.CallOption) (*PushChunkAsduRes, error)
}

type streamEventClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamEventClient(cc grpc.ClientConnInterface) StreamEventClient {
	return &streamEventClient{cc}
}

func (c *streamEventClient) ReceiveMQTTMessage(ctx context.Context, in *ReceiveMQTTMessageReq, opts ...grpc.CallOption) (*ReceiveMQTTMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveMQTTMessageRes)
	err := c.cc.Invoke(ctx, StreamEvent_ReceiveMQTTMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamEventClient) ReceiveWSMessage(ctx context.Context, in *ReceiveWSMessageReq, opts ...grpc.CallOption) (*ReceiveWSMessageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveWSMessageRes)
	err := c.cc.Invoke(ctx, StreamEvent_ReceiveWSMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamEventClient) PushChunkAsdu(ctx context.Context, in *PushChunkAsduReq, opts ...grpc.CallOption) (*PushChunkAsduRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushChunkAsduRes)
	err := c.cc.Invoke(ctx, StreamEvent_PushChunkAsdu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamEventServer is the server API for StreamEvent service.
// All implementations must embed UnimplementedStreamEventServer
// for forward compatibility.
type StreamEventServer interface {
	// 接收MQTT消息
	ReceiveMQTTMessage(context.Context, *ReceiveMQTTMessageReq) (*ReceiveMQTTMessageRes, error)
	// 接收WS消息
	ReceiveWSMessage(context.Context, *ReceiveWSMessageReq) (*ReceiveWSMessageRes, error)
	// 推送 chunk asdu 104协议消息
	PushChunkAsdu(context.Context, *PushChunkAsduReq) (*PushChunkAsduRes, error)
	mustEmbedUnimplementedStreamEventServer()
}

// UnimplementedStreamEventServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamEventServer struct{}

func (UnimplementedStreamEventServer) ReceiveMQTTMessage(context.Context, *ReceiveMQTTMessageReq) (*ReceiveMQTTMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMQTTMessage not implemented")
}
func (UnimplementedStreamEventServer) ReceiveWSMessage(context.Context, *ReceiveWSMessageReq) (*ReceiveWSMessageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveWSMessage not implemented")
}
func (UnimplementedStreamEventServer) PushChunkAsdu(context.Context, *PushChunkAsduReq) (*PushChunkAsduRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushChunkAsdu not implemented")
}
func (UnimplementedStreamEventServer) mustEmbedUnimplementedStreamEventServer() {}
func (UnimplementedStreamEventServer) testEmbeddedByValue()                     {}

// UnsafeStreamEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamEventServer will
// result in compilation errors.
type UnsafeStreamEventServer interface {
	mustEmbedUnimplementedStreamEventServer()
}

func RegisterStreamEventServer(s grpc.ServiceRegistrar, srv StreamEventServer) {
	// If the following call pancis, it indicates UnimplementedStreamEventServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamEvent_ServiceDesc, srv)
}

func _StreamEvent_ReceiveMQTTMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveMQTTMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamEventServer).ReceiveMQTTMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamEvent_ReceiveMQTTMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamEventServer).ReceiveMQTTMessage(ctx, req.(*ReceiveMQTTMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamEvent_ReceiveWSMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveWSMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamEventServer).ReceiveWSMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamEvent_ReceiveWSMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamEventServer).ReceiveWSMessage(ctx, req.(*ReceiveWSMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamEvent_PushChunkAsdu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushChunkAsduReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamEventServer).PushChunkAsdu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamEvent_PushChunkAsdu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamEventServer).PushChunkAsdu(ctx, req.(*PushChunkAsduReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamEvent_ServiceDesc is the grpc.ServiceDesc for StreamEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamevent.StreamEvent",
	HandlerType: (*StreamEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMQTTMessage",
			Handler:    _StreamEvent_ReceiveMQTTMessage_Handler,
		},
		{
			MethodName: "ReceiveWSMessage",
			Handler:    _StreamEvent_ReceiveWSMessage_Handler,
		},
		{
			MethodName: "PushChunkAsdu",
			Handler:    _StreamEvent_PushChunkAsdu_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "streamevent.proto",
}
