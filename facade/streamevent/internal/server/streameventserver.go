// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: streamevent.proto

package server

import (
	"context"

	"zero-service/facade/streamevent/internal/logic"
	"zero-service/facade/streamevent/internal/svc"
	"zero-service/facade/streamevent/streamevent"
)

type StreamEventServer struct {
	svcCtx *svc.ServiceContext
	streamevent.UnimplementedStreamEventServer
}

func NewStreamEventServer(svcCtx *svc.ServiceContext) *StreamEventServer {
	return &StreamEventServer{
		svcCtx: svcCtx,
	}
}

// 接收MQTT消息
func (s *StreamEventServer) ReceiveMQTTMessage(ctx context.Context, in *streamevent.ReceiveMQTTMessageReq) (*streamevent.ReceiveMQTTMessageRes, error) {
	l := logic.NewReceiveMQTTMessageLogic(ctx, s.svcCtx)
	return l.ReceiveMQTTMessage(in)
}

// 接收WS消息
func (s *StreamEventServer) ReceiveWSMessage(ctx context.Context, in *streamevent.ReceiveWSMessageReq) (*streamevent.ReceiveWSMessageRes, error) {
	l := logic.NewReceiveWSMessageLogic(ctx, s.svcCtx)
	return l.ReceiveWSMessage(in)
}

// 接收kafka消息
func (s *StreamEventServer) ReceiveKafkaMessage(ctx context.Context, in *streamevent.ReceiveKafkaMessageReq) (*streamevent.ReceiveKafkaMessageRes, error) {
	l := logic.NewReceiveKafkaMessageLogic(ctx, s.svcCtx)
	return l.ReceiveKafkaMessage(in)
}

// 推送 chunk asdu 104协议消息
func (s *StreamEventServer) PushChunkAsdu(ctx context.Context, in *streamevent.PushChunkAsduReq) (*streamevent.PushChunkAsduRes, error) {
	l := logic.NewPushChunkAsduLogic(ctx, s.svcCtx)
	return l.PushChunkAsdu(in)
}
