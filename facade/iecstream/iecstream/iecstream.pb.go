// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: iecstream.proto

package iecstream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          string                 `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Req) Reset() {
	*x = Req{}
	mi := &file_iecstream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Res) Reset() {
	*x = Res{}
	mi := &file_iecstream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type PushChunkAsduReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MsgBody       []*MsgBody             `protobuf:"bytes,1,rep,name=msgBody,proto3" json:"msgBody,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushChunkAsduReq) Reset() {
	*x = PushChunkAsduReq{}
	mi := &file_iecstream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushChunkAsduReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushChunkAsduReq) ProtoMessage() {}

func (x *PushChunkAsduReq) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushChunkAsduReq.ProtoReflect.Descriptor instead.
func (*PushChunkAsduReq) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{2}
}

func (x *PushChunkAsduReq) GetMsgBody() []*MsgBody {
	if x != nil {
		return x.MsgBody
	}
	return nil
}

type PushChunkAsduRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushChunkAsduRes) Reset() {
	*x = PushChunkAsduRes{}
	mi := &file_iecstream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushChunkAsduRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushChunkAsduRes) ProtoMessage() {}

func (x *PushChunkAsduRes) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushChunkAsduRes.ProtoReflect.Descriptor instead.
func (*PushChunkAsduRes) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{3}
}

// 消息体结构
type MsgBody struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 设备唯一标识（如RTU/IP地址）
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// 设备端口号
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// ASDU类型名称
	Asdu string `protobuf:"bytes,3,opt,name=asdu,proto3" json:"asdu,omitempty"`
	// ASDU类型标识符
	TypeId int32 `protobuf:"varint,4,opt,name=typeId,proto3" json:"typeId,omitempty"`
	// 信息体类型标识符
	DataType int32 `protobuf:"varint,5,opt,name=dataType,proto3" json:"dataType,omitempty"`
	// 公共地址（范围：1-65534,全局地址65535保留）
	Coa uint32 `protobuf:"varint,6,opt,name=coa,proto3" json:"coa,omitempty"`
	// 信息体对象（结构随typeId变化）
	BodyRaw string `protobuf:"bytes,7,opt,name=bodyRaw,proto3" json:"bodyRaw,omitempty"`
	// 消息推送时间戳（格式：`YYYY-MM-DD HH:mm:ss.SSSSSS`,UTC+8时区）
	Time string `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	// 应用级元数据（如：应用ID、用户信息、场站信息等）
	MetaDataRaw   string `protobuf:"bytes,9,opt,name=metaDataRaw,proto3" json:"metaDataRaw,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MsgBody) Reset() {
	*x = MsgBody{}
	mi := &file_iecstream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MsgBody) ProtoMessage() {}

func (x *MsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MsgBody.ProtoReflect.Descriptor instead.
func (*MsgBody) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{4}
}

func (x *MsgBody) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *MsgBody) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *MsgBody) GetAsdu() string {
	if x != nil {
		return x.Asdu
	}
	return ""
}

func (x *MsgBody) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *MsgBody) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *MsgBody) GetCoa() uint32 {
	if x != nil {
		return x.Coa
	}
	return 0
}

func (x *MsgBody) GetBodyRaw() string {
	if x != nil {
		return x.BodyRaw
	}
	return ""
}

func (x *MsgBody) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *MsgBody) GetMetaDataRaw() string {
	if x != nil {
		return x.MetaDataRaw
	}
	return ""
}

// 单点遥信
type SinglePointInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// `true`=合/动作,`false`=分/未动作
	Value bool `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SinglePointInfo) Reset() {
	*x = SinglePointInfo{}
	mi := &file_iecstream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SinglePointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinglePointInfo) ProtoMessage() {}

func (x *SinglePointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinglePointInfo.ProtoReflect.Descriptor instead.
func (*SinglePointInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{5}
}

func (x *SinglePointInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *SinglePointInfo) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *SinglePointInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *SinglePointInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *SinglePointInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *SinglePointInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *SinglePointInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *SinglePointInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *SinglePointInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *SinglePointInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 双点遥信
type DoublePointInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// `0`=不确定,`1`=开,`2`=合,`3`=不确定
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DoublePointInfo) Reset() {
	*x = DoublePointInfo{}
	mi := &file_iecstream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoublePointInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoublePointInfo) ProtoMessage() {}

func (x *DoublePointInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoublePointInfo.ProtoReflect.Descriptor instead.
func (*DoublePointInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{6}
}

func (x *DoublePointInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *DoublePointInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DoublePointInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *DoublePointInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *DoublePointInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *DoublePointInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *DoublePointInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *DoublePointInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *DoublePointInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *DoublePointInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 标度化遥测值
type MeasuredValueScaledInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 标度化值
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁`
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeasuredValueScaledInfo) Reset() {
	*x = MeasuredValueScaledInfo{}
	mi := &file_iecstream_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasuredValueScaledInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredValueScaledInfo) ProtoMessage() {}

func (x *MeasuredValueScaledInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasuredValueScaledInfo.ProtoReflect.Descriptor instead.
func (*MeasuredValueScaledInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{7}
}

func (x *MeasuredValueScaledInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *MeasuredValueScaledInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MeasuredValueScaledInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *MeasuredValueScaledInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *MeasuredValueScaledInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *MeasuredValueScaledInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *MeasuredValueScaledInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *MeasuredValueScaledInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *MeasuredValueScaledInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *MeasuredValueScaledInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 无品质描述的规一化遥测值
type MeasuredValueNormalInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 规一化值
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeasuredValueNormalInfo) Reset() {
	*x = MeasuredValueNormalInfo{}
	mi := &file_iecstream_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasuredValueNormalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredValueNormalInfo) ProtoMessage() {}

func (x *MeasuredValueNormalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasuredValueNormalInfo.ProtoReflect.Descriptor instead.
func (*MeasuredValueNormalInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{8}
}

func (x *MeasuredValueNormalInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *MeasuredValueNormalInfo) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MeasuredValueNormalInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *MeasuredValueNormalInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *MeasuredValueNormalInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *MeasuredValueNormalInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *MeasuredValueNormalInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *MeasuredValueNormalInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *MeasuredValueNormalInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *MeasuredValueNormalInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 步位置信息
type StepPositionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 步位置值
	Value *StepPosition `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepPositionInfo) Reset() {
	*x = StepPositionInfo{}
	mi := &file_iecstream_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepPositionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepPositionInfo) ProtoMessage() {}

func (x *StepPositionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepPositionInfo.ProtoReflect.Descriptor instead.
func (*StepPositionInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{9}
}

func (x *StepPositionInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *StepPositionInfo) GetValue() *StepPosition {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *StepPositionInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *StepPositionInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *StepPositionInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *StepPositionInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *StepPositionInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *StepPositionInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *StepPositionInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *StepPositionInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 步位置值
type StepPosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 步位置值
	Val int32 `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
	// `true`=设备处于瞬变状态
	HasTransient  bool `protobuf:"varint,2,opt,name=hasTransient,proto3" json:"hasTransient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepPosition) Reset() {
	*x = StepPosition{}
	mi := &file_iecstream_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepPosition) ProtoMessage() {}

func (x *StepPosition) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepPosition.ProtoReflect.Descriptor instead.
func (*StepPosition) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{10}
}

func (x *StepPosition) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *StepPosition) GetHasTransient() bool {
	if x != nil {
		return x.HasTransient
	}
	return false
}

// 32位比特串
type BitString32Info struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 32 个独立设备状态（如开关、传感器、继电器）,每个比特位对应一个设备
	Value uint32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BitString32Info) Reset() {
	*x = BitString32Info{}
	mi := &file_iecstream_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BitString32Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitString32Info) ProtoMessage() {}

func (x *BitString32Info) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitString32Info.ProtoReflect.Descriptor instead.
func (*BitString32Info) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{11}
}

func (x *BitString32Info) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *BitString32Info) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BitString32Info) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *BitString32Info) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *BitString32Info) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *BitString32Info) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *BitString32Info) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *BitString32Info) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *BitString32Info) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *BitString32Info) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 短浮点数遥测值
type MeasuredValueFloatInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 短浮点数值（直接为工程值,如电压、电流等）
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MeasuredValueFloatInfo) Reset() {
	*x = MeasuredValueFloatInfo{}
	mi := &file_iecstream_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeasuredValueFloatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasuredValueFloatInfo) ProtoMessage() {}

func (x *MeasuredValueFloatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasuredValueFloatInfo.ProtoReflect.Descriptor instead.
func (*MeasuredValueFloatInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{12}
}

func (x *MeasuredValueFloatInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *MeasuredValueFloatInfo) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MeasuredValueFloatInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *MeasuredValueFloatInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *MeasuredValueFloatInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *MeasuredValueFloatInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *MeasuredValueFloatInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *MeasuredValueFloatInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *MeasuredValueFloatInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *MeasuredValueFloatInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 累计量
type BinaryCounterReadingInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 累计量值
	Value         *BinaryCounterReading `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Time          string                `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BinaryCounterReadingInfo) Reset() {
	*x = BinaryCounterReadingInfo{}
	mi := &file_iecstream_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryCounterReadingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryCounterReadingInfo) ProtoMessage() {}

func (x *BinaryCounterReadingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryCounterReadingInfo.ProtoReflect.Descriptor instead.
func (*BinaryCounterReadingInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{13}
}

func (x *BinaryCounterReadingInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *BinaryCounterReadingInfo) GetValue() *BinaryCounterReading {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BinaryCounterReadingInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 累计量值
type BinaryCounterReading struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 计数器读数（32位有符号整数）
	CounterReading int32 `protobuf:"varint,1,opt,name=counterReading,proto3" json:"counterReading,omitempty"`
	// 顺序号（范围：`0`-`31`）
	SeqNumber uint32 `protobuf:"varint,2,opt,name=seqNumber,proto3" json:"seqNumber,omitempty"`
	// `true`=计数器溢出
	HasCarry bool `protobuf:"varint,3,opt,name=hasCarry,proto3" json:"hasCarry,omitempty"`
	// `true`=计数量被人工调整
	IsAdjusted bool `protobuf:"varint,4,opt,name=isAdjusted,proto3" json:"isAdjusted,omitempty"`
	// `true`=数据无效
	IsInvalid     bool `protobuf:"varint,5,opt,name=isInvalid,proto3" json:"isInvalid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BinaryCounterReading) Reset() {
	*x = BinaryCounterReading{}
	mi := &file_iecstream_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryCounterReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryCounterReading) ProtoMessage() {}

func (x *BinaryCounterReading) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryCounterReading.ProtoReflect.Descriptor instead.
func (*BinaryCounterReading) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{14}
}

func (x *BinaryCounterReading) GetCounterReading() int32 {
	if x != nil {
		return x.CounterReading
	}
	return 0
}

func (x *BinaryCounterReading) GetSeqNumber() uint32 {
	if x != nil {
		return x.SeqNumber
	}
	return 0
}

func (x *BinaryCounterReading) GetHasCarry() bool {
	if x != nil {
		return x.HasCarry
	}
	return false
}

func (x *BinaryCounterReading) GetIsAdjusted() bool {
	if x != nil {
		return x.IsAdjusted
	}
	return false
}

func (x *BinaryCounterReading) GetIsInvalid() bool {
	if x != nil {
		return x.IsInvalid
	}
	return false
}

// 继电保护事件
type EventOfProtectionEquipmentInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 事件类型 `0`=不确定或中间状态,`1`=开,`2`=合,`3`=不确定
	Event uint32 `protobuf:"varint,2,opt,name=event,proto3" json:"event,omitempty"`
	// 保护事件品质
	Qdp uint32 `protobuf:"varint,3,opt,name=qdp,proto3" json:"qdp,omitempty"`
	// 保护事件品质描述
	QdpDesc string `protobuf:"bytes,4,opt,name=qdpDesc,proto3" json:"qdpDesc,omitempty"`
	// ElapsedTimeInvalid `true`=动作时间无效,`false`=动作时间有效
	Ei bool `protobuf:"varint,5,opt,name=ei,proto3" json:"ei,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 事件发生的毫秒时间戳（范围：`0`-`59999`）
	Msec uint32 `protobuf:"varint,10,opt,name=msec,proto3" json:"msec,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,11,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventOfProtectionEquipmentInfo) Reset() {
	*x = EventOfProtectionEquipmentInfo{}
	mi := &file_iecstream_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventOfProtectionEquipmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOfProtectionEquipmentInfo) ProtoMessage() {}

func (x *EventOfProtectionEquipmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOfProtectionEquipmentInfo.ProtoReflect.Descriptor instead.
func (*EventOfProtectionEquipmentInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{15}
}

func (x *EventOfProtectionEquipmentInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *EventOfProtectionEquipmentInfo) GetEvent() uint32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *EventOfProtectionEquipmentInfo) GetQdp() uint32 {
	if x != nil {
		return x.Qdp
	}
	return 0
}

func (x *EventOfProtectionEquipmentInfo) GetQdpDesc() string {
	if x != nil {
		return x.QdpDesc
	}
	return ""
}

func (x *EventOfProtectionEquipmentInfo) GetEi() bool {
	if x != nil {
		return x.Ei
	}
	return false
}

func (x *EventOfProtectionEquipmentInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *EventOfProtectionEquipmentInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *EventOfProtectionEquipmentInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *EventOfProtectionEquipmentInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *EventOfProtectionEquipmentInfo) GetMsec() uint32 {
	if x != nil {
		return x.Msec
	}
	return 0
}

func (x *EventOfProtectionEquipmentInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 继电器保护设备成组启动事件
type PackedStartEventsOfProtectionEquipmentInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 事件类型
	Event uint32 `protobuf:"varint,2,opt,name=event,proto3" json:"event,omitempty"`
	// 保护事件品质
	Qdp uint32 `protobuf:"varint,3,opt,name=qdp,proto3" json:"qdp,omitempty"`
	// 保护事件品质描述
	QdpDesc string `protobuf:"bytes,4,opt,name=qdpDesc,proto3" json:"qdpDesc,omitempty"`
	// ElapsedTimeInvalid `true`=动作时间无效,`false`=动作时间有效
	Ei bool `protobuf:"varint,5,opt,name=ei,proto3" json:"ei,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 事件发生的毫秒时间戳（范围：`0`-`59999`）
	Msec uint32 `protobuf:"varint,10,opt,name=msec,proto3" json:"msec,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,11,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) Reset() {
	*x = PackedStartEventsOfProtectionEquipmentInfo{}
	mi := &file_iecstream_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedStartEventsOfProtectionEquipmentInfo) ProtoMessage() {}

func (x *PackedStartEventsOfProtectionEquipmentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedStartEventsOfProtectionEquipmentInfo.ProtoReflect.Descriptor instead.
func (*PackedStartEventsOfProtectionEquipmentInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{16}
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetEvent() uint32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetQdp() uint32 {
	if x != nil {
		return x.Qdp
	}
	return 0
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetQdpDesc() string {
	if x != nil {
		return x.QdpDesc
	}
	return ""
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetEi() bool {
	if x != nil {
		return x.Ei
	}
	return false
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetMsec() uint32 {
	if x != nil {
		return x.Msec
	}
	return 0
}

func (x *PackedStartEventsOfProtectionEquipmentInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 继电器保护设备成组输出电路信息
type PackedOutputCircuitInfoInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 输出电路信息
	Oci uint32 `protobuf:"varint,2,opt,name=oci,proto3" json:"oci,omitempty"`
	// 保护事件品质
	Qdp uint32 `protobuf:"varint,3,opt,name=qdp,proto3" json:"qdp,omitempty"`
	// 保护事件品质描述
	QdpDesc string `protobuf:"bytes,4,opt,name=qdpDesc,proto3" json:"qdpDesc,omitempty"`
	// ElapsedTimeInvalid `true`=动作时间无效,`false`=动作时间有效
	Ei bool `protobuf:"varint,5,opt,name=ei,proto3" json:"ei,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	// 事件发生的毫秒时间戳（范围：`0`-`59999`）
	Msec uint32 `protobuf:"varint,10,opt,name=msec,proto3" json:"msec,omitempty"`
	// 时标（仅带时标的ASDU类型包含此字段）
	Time          string `protobuf:"bytes,11,opt,name=time,proto3" json:"time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackedOutputCircuitInfoInfo) Reset() {
	*x = PackedOutputCircuitInfoInfo{}
	mi := &file_iecstream_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackedOutputCircuitInfoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedOutputCircuitInfoInfo) ProtoMessage() {}

func (x *PackedOutputCircuitInfoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedOutputCircuitInfoInfo.ProtoReflect.Descriptor instead.
func (*PackedOutputCircuitInfoInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{17}
}

func (x *PackedOutputCircuitInfoInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *PackedOutputCircuitInfoInfo) GetOci() uint32 {
	if x != nil {
		return x.Oci
	}
	return 0
}

func (x *PackedOutputCircuitInfoInfo) GetQdp() uint32 {
	if x != nil {
		return x.Qdp
	}
	return 0
}

func (x *PackedOutputCircuitInfoInfo) GetQdpDesc() string {
	if x != nil {
		return x.QdpDesc
	}
	return ""
}

func (x *PackedOutputCircuitInfoInfo) GetEi() bool {
	if x != nil {
		return x.Ei
	}
	return false
}

func (x *PackedOutputCircuitInfoInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *PackedOutputCircuitInfoInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *PackedOutputCircuitInfoInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *PackedOutputCircuitInfoInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

func (x *PackedOutputCircuitInfoInfo) GetMsec() uint32 {
	if x != nil {
		return x.Msec
	}
	return 0
}

func (x *PackedOutputCircuitInfoInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

// 带变位检出的成组单点信息
type PackedSinglePointWithSCDInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 信息对象地址
	Ioa uint32 `protobuf:"varint,1,opt,name=ioa,proto3" json:"ioa,omitempty"`
	// 状态变位检出
	Scd uint32 `protobuf:"varint,2,opt,name=scd,proto3" json:"scd,omitempty"`
	// 品质
	Qds uint32 `protobuf:"varint,3,opt,name=qds,proto3" json:"qds,omitempty"`
	// 品质描述
	QdsDesc string `protobuf:"bytes,4,opt,name=qdsDesc,proto3" json:"qdsDesc,omitempty"`
	// Overflow `true`=溢出,`false`=未溢出
	Ov bool `protobuf:"varint,5,opt,name=ov,proto3" json:"ov,omitempty"`
	// Blocked `true`=闭锁,`false`=未闭锁
	Bl bool `protobuf:"varint,6,opt,name=bl,proto3" json:"bl,omitempty"`
	// Substituted `true`=取代,`false`=未取代
	Sb bool `protobuf:"varint,7,opt,name=sb,proto3" json:"sb,omitempty"`
	// NotTopical `true`=非当前值,`false`=当前值
	Nt bool `protobuf:"varint,8,opt,name=nt,proto3" json:"nt,omitempty"`
	// Invalid `true`=无效,`false`=有效
	Iv            bool `protobuf:"varint,9,opt,name=iv,proto3" json:"iv,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackedSinglePointWithSCDInfo) Reset() {
	*x = PackedSinglePointWithSCDInfo{}
	mi := &file_iecstream_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackedSinglePointWithSCDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedSinglePointWithSCDInfo) ProtoMessage() {}

func (x *PackedSinglePointWithSCDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_iecstream_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedSinglePointWithSCDInfo.ProtoReflect.Descriptor instead.
func (*PackedSinglePointWithSCDInfo) Descriptor() ([]byte, []int) {
	return file_iecstream_proto_rawDescGZIP(), []int{18}
}

func (x *PackedSinglePointWithSCDInfo) GetIoa() uint32 {
	if x != nil {
		return x.Ioa
	}
	return 0
}

func (x *PackedSinglePointWithSCDInfo) GetScd() uint32 {
	if x != nil {
		return x.Scd
	}
	return 0
}

func (x *PackedSinglePointWithSCDInfo) GetQds() uint32 {
	if x != nil {
		return x.Qds
	}
	return 0
}

func (x *PackedSinglePointWithSCDInfo) GetQdsDesc() string {
	if x != nil {
		return x.QdsDesc
	}
	return ""
}

func (x *PackedSinglePointWithSCDInfo) GetOv() bool {
	if x != nil {
		return x.Ov
	}
	return false
}

func (x *PackedSinglePointWithSCDInfo) GetBl() bool {
	if x != nil {
		return x.Bl
	}
	return false
}

func (x *PackedSinglePointWithSCDInfo) GetSb() bool {
	if x != nil {
		return x.Sb
	}
	return false
}

func (x *PackedSinglePointWithSCDInfo) GetNt() bool {
	if x != nil {
		return x.Nt
	}
	return false
}

func (x *PackedSinglePointWithSCDInfo) GetIv() bool {
	if x != nil {
		return x.Iv
	}
	return false
}

var File_iecstream_proto protoreflect.FileDescriptor

const file_iecstream_proto_rawDesc = "" +
	"\n" +
	"\x0fiecstream.proto\x12\tiecstream\"\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04ping\x18\x01 \x01(\tR\x04ping\"\x19\n" +
	"\x03Res\x12\x12\n" +
	"\x04pong\x18\x01 \x01(\tR\x04pong\"@\n" +
	"\x10PushChunkAsduReq\x12,\n" +
	"\amsgBody\x18\x01 \x03(\v2\x12.iecstream.MsgBodyR\amsgBody\"\x12\n" +
	"\x10PushChunkAsduRes\"\xdb\x01\n" +
	"\aMsgBody\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x12\n" +
	"\x04asdu\x18\x03 \x01(\tR\x04asdu\x12\x16\n" +
	"\x06typeId\x18\x04 \x01(\x05R\x06typeId\x12\x1a\n" +
	"\bdataType\x18\x05 \x01(\x05R\bdataType\x12\x10\n" +
	"\x03coa\x18\x06 \x01(\rR\x03coa\x12\x18\n" +
	"\abodyRaw\x18\a \x01(\tR\abodyRaw\x12\x12\n" +
	"\x04time\x18\b \x01(\tR\x04time\x12 \n" +
	"\vmetaDataRaw\x18\t \x01(\tR\vmetaDataRaw\"\xc9\x01\n" +
	"\x0fSinglePointInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"\xc9\x01\n" +
	"\x0fDoublePointInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"\xd1\x01\n" +
	"\x17MeasuredValueScaledInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"\xd1\x01\n" +
	"\x17MeasuredValueNormalInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"\xe3\x01\n" +
	"\x10StepPositionInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.iecstream.StepPositionR\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"D\n" +
	"\fStepPosition\x12\x10\n" +
	"\x03val\x18\x01 \x01(\x05R\x03val\x12\"\n" +
	"\fhasTransient\x18\x02 \x01(\bR\fhasTransient\"\xc9\x01\n" +
	"\x0fBitString32Info\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"\xd0\x01\n" +
	"\x16MeasuredValueFloatInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04time\x18\n" +
	" \x01(\tR\x04time\"w\n" +
	"\x18BinaryCounterReadingInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.iecstream.BinaryCounterReadingR\x05value\x12\x12\n" +
	"\x04time\x18\x03 \x01(\tR\x04time\"\xb6\x01\n" +
	"\x14BinaryCounterReading\x12&\n" +
	"\x0ecounterReading\x18\x01 \x01(\x05R\x0ecounterReading\x12\x1c\n" +
	"\tseqNumber\x18\x02 \x01(\rR\tseqNumber\x12\x1a\n" +
	"\bhasCarry\x18\x03 \x01(\bR\bhasCarry\x12\x1e\n" +
	"\n" +
	"isAdjusted\x18\x04 \x01(\bR\n" +
	"isAdjusted\x12\x1c\n" +
	"\tisInvalid\x18\x05 \x01(\bR\tisInvalid\"\xec\x01\n" +
	"\x1eEventOfProtectionEquipmentInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05event\x18\x02 \x01(\rR\x05event\x12\x10\n" +
	"\x03qdp\x18\x03 \x01(\rR\x03qdp\x12\x18\n" +
	"\aqdpDesc\x18\x04 \x01(\tR\aqdpDesc\x12\x0e\n" +
	"\x02ei\x18\x05 \x01(\bR\x02ei\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04msec\x18\n" +
	" \x01(\rR\x04msec\x12\x12\n" +
	"\x04time\x18\v \x01(\tR\x04time\"\xf8\x01\n" +
	"*PackedStartEventsOfProtectionEquipmentInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x14\n" +
	"\x05event\x18\x02 \x01(\rR\x05event\x12\x10\n" +
	"\x03qdp\x18\x03 \x01(\rR\x03qdp\x12\x18\n" +
	"\aqdpDesc\x18\x04 \x01(\tR\aqdpDesc\x12\x0e\n" +
	"\x02ei\x18\x05 \x01(\bR\x02ei\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04msec\x18\n" +
	" \x01(\rR\x04msec\x12\x12\n" +
	"\x04time\x18\v \x01(\tR\x04time\"\xe5\x01\n" +
	"\x1bPackedOutputCircuitInfoInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x10\n" +
	"\x03oci\x18\x02 \x01(\rR\x03oci\x12\x10\n" +
	"\x03qdp\x18\x03 \x01(\rR\x03qdp\x12\x18\n" +
	"\aqdpDesc\x18\x04 \x01(\tR\aqdpDesc\x12\x0e\n" +
	"\x02ei\x18\x05 \x01(\bR\x02ei\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv\x12\x12\n" +
	"\x04msec\x18\n" +
	" \x01(\rR\x04msec\x12\x12\n" +
	"\x04time\x18\v \x01(\tR\x04time\"\xbe\x01\n" +
	"\x1cPackedSinglePointWithSCDInfo\x12\x10\n" +
	"\x03ioa\x18\x01 \x01(\rR\x03ioa\x12\x10\n" +
	"\x03scd\x18\x02 \x01(\rR\x03scd\x12\x10\n" +
	"\x03qds\x18\x03 \x01(\rR\x03qds\x12\x18\n" +
	"\aqdsDesc\x18\x04 \x01(\tR\aqdsDesc\x12\x0e\n" +
	"\x02ov\x18\x05 \x01(\bR\x02ov\x12\x0e\n" +
	"\x02bl\x18\x06 \x01(\bR\x02bl\x12\x0e\n" +
	"\x02sb\x18\a \x01(\bR\x02sb\x12\x0e\n" +
	"\x02nt\x18\b \x01(\bR\x02nt\x12\x0e\n" +
	"\x02iv\x18\t \x01(\bR\x02iv2\x85\x01\n" +
	"\fIecStreamRpc\x12(\n" +
	"\x04ping\x12\x0e.iecstream.Req\x1a\x0e.iecstream.Res\"\x00\x12K\n" +
	"\rpushChunkAsdu\x12\x1b.iecstream.PushChunkAsduReq\x1a\x1b.iecstream.PushChunkAsduRes\"\x00B;\n" +
	"\x1acom.github.iec.stream.grpcB\x0eIecStreamProtoP\x01Z\v./iecstreamb\x06proto3"

var (
	file_iecstream_proto_rawDescOnce sync.Once
	file_iecstream_proto_rawDescData []byte
)

func file_iecstream_proto_rawDescGZIP() []byte {
	file_iecstream_proto_rawDescOnce.Do(func() {
		file_iecstream_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_iecstream_proto_rawDesc), len(file_iecstream_proto_rawDesc)))
	})
	return file_iecstream_proto_rawDescData
}

var file_iecstream_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_iecstream_proto_goTypes = []any{
	(*Req)(nil),                                        // 0: iecstream.Req
	(*Res)(nil),                                        // 1: iecstream.Res
	(*PushChunkAsduReq)(nil),                           // 2: iecstream.PushChunkAsduReq
	(*PushChunkAsduRes)(nil),                           // 3: iecstream.PushChunkAsduRes
	(*MsgBody)(nil),                                    // 4: iecstream.MsgBody
	(*SinglePointInfo)(nil),                            // 5: iecstream.SinglePointInfo
	(*DoublePointInfo)(nil),                            // 6: iecstream.DoublePointInfo
	(*MeasuredValueScaledInfo)(nil),                    // 7: iecstream.MeasuredValueScaledInfo
	(*MeasuredValueNormalInfo)(nil),                    // 8: iecstream.MeasuredValueNormalInfo
	(*StepPositionInfo)(nil),                           // 9: iecstream.StepPositionInfo
	(*StepPosition)(nil),                               // 10: iecstream.StepPosition
	(*BitString32Info)(nil),                            // 11: iecstream.BitString32Info
	(*MeasuredValueFloatInfo)(nil),                     // 12: iecstream.MeasuredValueFloatInfo
	(*BinaryCounterReadingInfo)(nil),                   // 13: iecstream.BinaryCounterReadingInfo
	(*BinaryCounterReading)(nil),                       // 14: iecstream.BinaryCounterReading
	(*EventOfProtectionEquipmentInfo)(nil),             // 15: iecstream.EventOfProtectionEquipmentInfo
	(*PackedStartEventsOfProtectionEquipmentInfo)(nil), // 16: iecstream.PackedStartEventsOfProtectionEquipmentInfo
	(*PackedOutputCircuitInfoInfo)(nil),                // 17: iecstream.PackedOutputCircuitInfoInfo
	(*PackedSinglePointWithSCDInfo)(nil),               // 18: iecstream.PackedSinglePointWithSCDInfo
}
var file_iecstream_proto_depIdxs = []int32{
	4,  // 0: iecstream.PushChunkAsduReq.msgBody:type_name -> iecstream.MsgBody
	10, // 1: iecstream.StepPositionInfo.value:type_name -> iecstream.StepPosition
	14, // 2: iecstream.BinaryCounterReadingInfo.value:type_name -> iecstream.BinaryCounterReading
	0,  // 3: iecstream.IecStreamRpc.ping:input_type -> iecstream.Req
	2,  // 4: iecstream.IecStreamRpc.pushChunkAsdu:input_type -> iecstream.PushChunkAsduReq
	1,  // 5: iecstream.IecStreamRpc.ping:output_type -> iecstream.Res
	3,  // 6: iecstream.IecStreamRpc.pushChunkAsdu:output_type -> iecstream.PushChunkAsduRes
	5,  // [5:7] is the sub-list for method output_type
	3,  // [3:5] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_iecstream_proto_init() }
func file_iecstream_proto_init() {
	if File_iecstream_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_iecstream_proto_rawDesc), len(file_iecstream_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_iecstream_proto_goTypes,
		DependencyIndexes: file_iecstream_proto_depIdxs,
		MessageInfos:      file_iecstream_proto_msgTypes,
	}.Build()
	File_iecstream_proto = out.File
	file_iecstream_proto_goTypes = nil
	file_iecstream_proto_depIdxs = nil
}
