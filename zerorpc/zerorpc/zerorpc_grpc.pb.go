// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: zerorpc.proto

package zerorpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZerorpcClient is the client API for Zerorpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZerorpcClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 发送延迟任务
	SendDelayTask(ctx context.Context, in *SendDelayTaskReq, opts ...grpc.CallOption) (*SendDelayTaskRes, error)
	// 转发任务
	ForwardTask(ctx context.Context, in *ForwardTaskReq, opts ...grpc.CallOption) (*ForwardTaskRes, error)
	// 发送手机号验证码
	SendSMSVerifyCode(ctx context.Context, in *SendSMSVerifyCodeReq, opts ...grpc.CallOption) (*SendSMSVerifyCodeRes, error)
	// 获取区域列表
	GetRegionList(ctx context.Context, in *GetRegionListReq, opts ...grpc.CallOption) (*GetRegionListRes, error)
	// 生成 token
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenRes, error)
	// 登录
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error)
	// 小程序登录
	MiniProgramLogin(ctx context.Context, in *MiniProgramLoginReq, opts ...grpc.CallOption) (*MiniProgramLoginRes, error)
	// 用户详情
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error)
	// 编辑用户
	EditUserInfo(ctx context.Context, in *EditUserInfoReq, opts ...grpc.CallOption) (*EditUserInfoRes, error)
	// JSAPI支付
	WxPayJsApi(ctx context.Context, in *WxPayJsApiReq, opts ...grpc.CallOption) (*WxPayJsApiRes, error)
}

type zerorpcClient struct {
	cc grpc.ClientConnInterface
}

func NewZerorpcClient(cc grpc.ClientConnInterface) ZerorpcClient {
	return &zerorpcClient{cc}
}

func (c *zerorpcClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) SendDelayTask(ctx context.Context, in *SendDelayTaskReq, opts ...grpc.CallOption) (*SendDelayTaskRes, error) {
	out := new(SendDelayTaskRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/SendDelayTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) ForwardTask(ctx context.Context, in *ForwardTaskReq, opts ...grpc.CallOption) (*ForwardTaskRes, error) {
	out := new(ForwardTaskRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/ForwardTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) SendSMSVerifyCode(ctx context.Context, in *SendSMSVerifyCodeReq, opts ...grpc.CallOption) (*SendSMSVerifyCodeRes, error) {
	out := new(SendSMSVerifyCodeRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/SendSMSVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) GetRegionList(ctx context.Context, in *GetRegionListReq, opts ...grpc.CallOption) (*GetRegionListRes, error) {
	out := new(GetRegionListRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/GetRegionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenRes, error) {
	out := new(GenerateTokenRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/GenerateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRes, error) {
	out := new(LoginRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) MiniProgramLogin(ctx context.Context, in *MiniProgramLoginReq, opts ...grpc.CallOption) (*MiniProgramLoginRes, error) {
	out := new(MiniProgramLoginRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/MiniProgramLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoRes, error) {
	out := new(GetUserInfoRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) EditUserInfo(ctx context.Context, in *EditUserInfoReq, opts ...grpc.CallOption) (*EditUserInfoRes, error) {
	out := new(EditUserInfoRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/EditUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zerorpcClient) WxPayJsApi(ctx context.Context, in *WxPayJsApiReq, opts ...grpc.CallOption) (*WxPayJsApiRes, error) {
	out := new(WxPayJsApiRes)
	err := c.cc.Invoke(ctx, "/zerorpc.Zerorpc/WxPayJsApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZerorpcServer is the server API for Zerorpc service.
// All implementations must embed UnimplementedZerorpcServer
// for forward compatibility
type ZerorpcServer interface {
	Ping(context.Context, *Req) (*Res, error)
	// 发送延迟任务
	SendDelayTask(context.Context, *SendDelayTaskReq) (*SendDelayTaskRes, error)
	// 转发任务
	ForwardTask(context.Context, *ForwardTaskReq) (*ForwardTaskRes, error)
	// 发送手机号验证码
	SendSMSVerifyCode(context.Context, *SendSMSVerifyCodeReq) (*SendSMSVerifyCodeRes, error)
	// 获取区域列表
	GetRegionList(context.Context, *GetRegionListReq) (*GetRegionListRes, error)
	// 生成 token
	GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenRes, error)
	// 登录
	Login(context.Context, *LoginReq) (*LoginRes, error)
	// 小程序登录
	MiniProgramLogin(context.Context, *MiniProgramLoginReq) (*MiniProgramLoginRes, error)
	// 用户详情
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error)
	// 编辑用户
	EditUserInfo(context.Context, *EditUserInfoReq) (*EditUserInfoRes, error)
	// JSAPI支付
	WxPayJsApi(context.Context, *WxPayJsApiReq) (*WxPayJsApiRes, error)
	mustEmbedUnimplementedZerorpcServer()
}

// UnimplementedZerorpcServer must be embedded to have forward compatible implementations.
type UnimplementedZerorpcServer struct {
}

func (UnimplementedZerorpcServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedZerorpcServer) SendDelayTask(context.Context, *SendDelayTaskReq) (*SendDelayTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDelayTask not implemented")
}
func (UnimplementedZerorpcServer) ForwardTask(context.Context, *ForwardTaskReq) (*ForwardTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardTask not implemented")
}
func (UnimplementedZerorpcServer) SendSMSVerifyCode(context.Context, *SendSMSVerifyCodeReq) (*SendSMSVerifyCodeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMSVerifyCode not implemented")
}
func (UnimplementedZerorpcServer) GetRegionList(context.Context, *GetRegionListReq) (*GetRegionListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionList not implemented")
}
func (UnimplementedZerorpcServer) GenerateToken(context.Context, *GenerateTokenReq) (*GenerateTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedZerorpcServer) Login(context.Context, *LoginReq) (*LoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedZerorpcServer) MiniProgramLogin(context.Context, *MiniProgramLoginReq) (*MiniProgramLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiniProgramLogin not implemented")
}
func (UnimplementedZerorpcServer) GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedZerorpcServer) EditUserInfo(context.Context, *EditUserInfoReq) (*EditUserInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserInfo not implemented")
}
func (UnimplementedZerorpcServer) WxPayJsApi(context.Context, *WxPayJsApiReq) (*WxPayJsApiRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxPayJsApi not implemented")
}
func (UnimplementedZerorpcServer) mustEmbedUnimplementedZerorpcServer() {}

// UnsafeZerorpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZerorpcServer will
// result in compilation errors.
type UnsafeZerorpcServer interface {
	mustEmbedUnimplementedZerorpcServer()
}

func RegisterZerorpcServer(s grpc.ServiceRegistrar, srv ZerorpcServer) {
	s.RegisterService(&Zerorpc_ServiceDesc, srv)
}

func _Zerorpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_SendDelayTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDelayTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).SendDelayTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/SendDelayTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).SendDelayTask(ctx, req.(*SendDelayTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_ForwardTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).ForwardTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/ForwardTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).ForwardTask(ctx, req.(*ForwardTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_SendSMSVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).SendSMSVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/SendSMSVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).SendSMSVerifyCode(ctx, req.(*SendSMSVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_GetRegionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).GetRegionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/GetRegionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).GetRegionList(ctx, req.(*GetRegionListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/GenerateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).GenerateToken(ctx, req.(*GenerateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_MiniProgramLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiniProgramLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).MiniProgramLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/MiniProgramLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).MiniProgramLogin(ctx, req.(*MiniProgramLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_EditUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).EditUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/EditUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).EditUserInfo(ctx, req.(*EditUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zerorpc_WxPayJsApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxPayJsApiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZerorpcServer).WxPayJsApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zerorpc.Zerorpc/WxPayJsApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZerorpcServer).WxPayJsApi(ctx, req.(*WxPayJsApiReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Zerorpc_ServiceDesc is the grpc.ServiceDesc for Zerorpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zerorpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zerorpc.Zerorpc",
	HandlerType: (*ZerorpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Zerorpc_Ping_Handler,
		},
		{
			MethodName: "SendDelayTask",
			Handler:    _Zerorpc_SendDelayTask_Handler,
		},
		{
			MethodName: "ForwardTask",
			Handler:    _Zerorpc_ForwardTask_Handler,
		},
		{
			MethodName: "SendSMSVerifyCode",
			Handler:    _Zerorpc_SendSMSVerifyCode_Handler,
		},
		{
			MethodName: "GetRegionList",
			Handler:    _Zerorpc_GetRegionList_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _Zerorpc_GenerateToken_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Zerorpc_Login_Handler,
		},
		{
			MethodName: "MiniProgramLogin",
			Handler:    _Zerorpc_MiniProgramLogin_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Zerorpc_GetUserInfo_Handler,
		},
		{
			MethodName: "EditUserInfo",
			Handler:    _Zerorpc_EditUserInfo_Handler,
		},
		{
			MethodName: "WxPayJsApi",
			Handler:    _Zerorpc_WxPayJsApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zerorpc.proto",
}
