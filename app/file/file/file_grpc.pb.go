// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: file.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileRpc_Ping_FullMethodName               = "/file.FileRpc/Ping"
	FileRpc_OssDetail_FullMethodName          = "/file.FileRpc/OssDetail"
	FileRpc_OssList_FullMethodName            = "/file.FileRpc/OssList"
	FileRpc_CreateOss_FullMethodName          = "/file.FileRpc/CreateOss"
	FileRpc_UpdateOss_FullMethodName          = "/file.FileRpc/UpdateOss"
	FileRpc_DeleteOss_FullMethodName          = "/file.FileRpc/DeleteOss"
	FileRpc_MakeBucket_FullMethodName         = "/file.FileRpc/MakeBucket"
	FileRpc_RemoveBucket_FullMethodName       = "/file.FileRpc/RemoveBucket"
	FileRpc_StatFile_FullMethodName           = "/file.FileRpc/StatFile"
	FileRpc_SignUrl_FullMethodName            = "/file.FileRpc/SignUrl"
	FileRpc_PutFile_FullMethodName            = "/file.FileRpc/PutFile"
	FileRpc_PutChunkFile_FullMethodName       = "/file.FileRpc/PutChunkFile"
	FileRpc_PutStreamFile_FullMethodName      = "/file.FileRpc/PutStreamFile"
	FileRpc_RemoveFile_FullMethodName         = "/file.FileRpc/RemoveFile"
	FileRpc_RemoveFiles_FullMethodName        = "/file.FileRpc/RemoveFiles"
	FileRpc_CaptureVideoStream_FullMethodName = "/file.FileRpc/CaptureVideoStream"
)

// FileRpcClient is the client API for FileRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileRpcClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	OssDetail(ctx context.Context, in *OssDetailReq, opts ...grpc.CallOption) (*OssDetailRes, error)
	OssList(ctx context.Context, in *OssListReq, opts ...grpc.CallOption) (*OssListRes, error)
	CreateOss(ctx context.Context, in *CreateOssReq, opts ...grpc.CallOption) (*CreateOssRes, error)
	UpdateOss(ctx context.Context, in *UpdateOssReq, opts ...grpc.CallOption) (*UpdateOssRes, error)
	DeleteOss(ctx context.Context, in *DeleteOssReq, opts ...grpc.CallOption) (*DeleteOssRes, error)
	MakeBucket(ctx context.Context, in *MakeBucketReq, opts ...grpc.CallOption) (*MakeBucketRes, error)
	RemoveBucket(ctx context.Context, in *RemoveBucketReq, opts ...grpc.CallOption) (*RemoveBucketRes, error)
	StatFile(ctx context.Context, in *StatFileReq, opts ...grpc.CallOption) (*StatFileRes, error)
	SignUrl(ctx context.Context, in *SignUrlReq, opts ...grpc.CallOption) (*SignUrlRes, error)
	PutFile(ctx context.Context, in *PutFileReq, opts ...grpc.CallOption) (*PutFileRes, error)
	PutChunkFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PutChunkFileReq, PutChunkFileRes], error)
	PutStreamFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PutStreamFileReq, PutStreamFileRes], error)
	RemoveFile(ctx context.Context, in *RemoveFileReq, opts ...grpc.CallOption) (*RemoveFileRes, error)
	RemoveFiles(ctx context.Context, in *RemoveFilesReq, opts ...grpc.CallOption) (*RemoveFileRes, error)
	CaptureVideoStream(ctx context.Context, in *CaptureVideoStreamReq, opts ...grpc.CallOption) (*CaptureVideoStreamRes, error)
}

type fileRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewFileRpcClient(cc grpc.ClientConnInterface) FileRpcClient {
	return &fileRpcClient{cc}
}

func (c *fileRpcClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, FileRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) OssDetail(ctx context.Context, in *OssDetailReq, opts ...grpc.CallOption) (*OssDetailRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OssDetailRes)
	err := c.cc.Invoke(ctx, FileRpc_OssDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) OssList(ctx context.Context, in *OssListReq, opts ...grpc.CallOption) (*OssListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OssListRes)
	err := c.cc.Invoke(ctx, FileRpc_OssList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) CreateOss(ctx context.Context, in *CreateOssReq, opts ...grpc.CallOption) (*CreateOssRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOssRes)
	err := c.cc.Invoke(ctx, FileRpc_CreateOss_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) UpdateOss(ctx context.Context, in *UpdateOssReq, opts ...grpc.CallOption) (*UpdateOssRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOssRes)
	err := c.cc.Invoke(ctx, FileRpc_UpdateOss_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) DeleteOss(ctx context.Context, in *DeleteOssReq, opts ...grpc.CallOption) (*DeleteOssRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOssRes)
	err := c.cc.Invoke(ctx, FileRpc_DeleteOss_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) MakeBucket(ctx context.Context, in *MakeBucketReq, opts ...grpc.CallOption) (*MakeBucketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeBucketRes)
	err := c.cc.Invoke(ctx, FileRpc_MakeBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) RemoveBucket(ctx context.Context, in *RemoveBucketReq, opts ...grpc.CallOption) (*RemoveBucketRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveBucketRes)
	err := c.cc.Invoke(ctx, FileRpc_RemoveBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) StatFile(ctx context.Context, in *StatFileReq, opts ...grpc.CallOption) (*StatFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatFileRes)
	err := c.cc.Invoke(ctx, FileRpc_StatFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) SignUrl(ctx context.Context, in *SignUrlReq, opts ...grpc.CallOption) (*SignUrlRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUrlRes)
	err := c.cc.Invoke(ctx, FileRpc_SignUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) PutFile(ctx context.Context, in *PutFileReq, opts ...grpc.CallOption) (*PutFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutFileRes)
	err := c.cc.Invoke(ctx, FileRpc_PutFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) PutChunkFile(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PutChunkFileReq, PutChunkFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileRpc_ServiceDesc.Streams[0], FileRpc_PutChunkFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PutChunkFileReq, PutChunkFileRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileRpc_PutChunkFileClient = grpc.BidiStreamingClient[PutChunkFileReq, PutChunkFileRes]

func (c *fileRpcClient) PutStreamFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PutStreamFileReq, PutStreamFileRes], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FileRpc_ServiceDesc.Streams[1], FileRpc_PutStreamFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PutStreamFileReq, PutStreamFileRes]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileRpc_PutStreamFileClient = grpc.ClientStreamingClient[PutStreamFileReq, PutStreamFileRes]

func (c *fileRpcClient) RemoveFile(ctx context.Context, in *RemoveFileReq, opts ...grpc.CallOption) (*RemoveFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFileRes)
	err := c.cc.Invoke(ctx, FileRpc_RemoveFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) RemoveFiles(ctx context.Context, in *RemoveFilesReq, opts ...grpc.CallOption) (*RemoveFileRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveFileRes)
	err := c.cc.Invoke(ctx, FileRpc_RemoveFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileRpcClient) CaptureVideoStream(ctx context.Context, in *CaptureVideoStreamReq, opts ...grpc.CallOption) (*CaptureVideoStreamRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CaptureVideoStreamRes)
	err := c.cc.Invoke(ctx, FileRpc_CaptureVideoStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileRpcServer is the server API for FileRpc service.
// All implementations must embed UnimplementedFileRpcServer
// for forward compatibility.
type FileRpcServer interface {
	Ping(context.Context, *Req) (*Res, error)
	OssDetail(context.Context, *OssDetailReq) (*OssDetailRes, error)
	OssList(context.Context, *OssListReq) (*OssListRes, error)
	CreateOss(context.Context, *CreateOssReq) (*CreateOssRes, error)
	UpdateOss(context.Context, *UpdateOssReq) (*UpdateOssRes, error)
	DeleteOss(context.Context, *DeleteOssReq) (*DeleteOssRes, error)
	MakeBucket(context.Context, *MakeBucketReq) (*MakeBucketRes, error)
	RemoveBucket(context.Context, *RemoveBucketReq) (*RemoveBucketRes, error)
	StatFile(context.Context, *StatFileReq) (*StatFileRes, error)
	SignUrl(context.Context, *SignUrlReq) (*SignUrlRes, error)
	PutFile(context.Context, *PutFileReq) (*PutFileRes, error)
	PutChunkFile(grpc.BidiStreamingServer[PutChunkFileReq, PutChunkFileRes]) error
	PutStreamFile(grpc.ClientStreamingServer[PutStreamFileReq, PutStreamFileRes]) error
	RemoveFile(context.Context, *RemoveFileReq) (*RemoveFileRes, error)
	RemoveFiles(context.Context, *RemoveFilesReq) (*RemoveFileRes, error)
	CaptureVideoStream(context.Context, *CaptureVideoStreamReq) (*CaptureVideoStreamRes, error)
	mustEmbedUnimplementedFileRpcServer()
}

// UnimplementedFileRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileRpcServer struct{}

func (UnimplementedFileRpcServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedFileRpcServer) OssDetail(context.Context, *OssDetailReq) (*OssDetailRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssDetail not implemented")
}
func (UnimplementedFileRpcServer) OssList(context.Context, *OssListReq) (*OssListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssList not implemented")
}
func (UnimplementedFileRpcServer) CreateOss(context.Context, *CreateOssReq) (*CreateOssRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOss not implemented")
}
func (UnimplementedFileRpcServer) UpdateOss(context.Context, *UpdateOssReq) (*UpdateOssRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOss not implemented")
}
func (UnimplementedFileRpcServer) DeleteOss(context.Context, *DeleteOssReq) (*DeleteOssRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOss not implemented")
}
func (UnimplementedFileRpcServer) MakeBucket(context.Context, *MakeBucketReq) (*MakeBucketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBucket not implemented")
}
func (UnimplementedFileRpcServer) RemoveBucket(context.Context, *RemoveBucketReq) (*RemoveBucketRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBucket not implemented")
}
func (UnimplementedFileRpcServer) StatFile(context.Context, *StatFileReq) (*StatFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatFile not implemented")
}
func (UnimplementedFileRpcServer) SignUrl(context.Context, *SignUrlReq) (*SignUrlRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUrl not implemented")
}
func (UnimplementedFileRpcServer) PutFile(context.Context, *PutFileReq) (*PutFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedFileRpcServer) PutChunkFile(grpc.BidiStreamingServer[PutChunkFileReq, PutChunkFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method PutChunkFile not implemented")
}
func (UnimplementedFileRpcServer) PutStreamFile(grpc.ClientStreamingServer[PutStreamFileReq, PutStreamFileRes]) error {
	return status.Errorf(codes.Unimplemented, "method PutStreamFile not implemented")
}
func (UnimplementedFileRpcServer) RemoveFile(context.Context, *RemoveFileReq) (*RemoveFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFile not implemented")
}
func (UnimplementedFileRpcServer) RemoveFiles(context.Context, *RemoveFilesReq) (*RemoveFileRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFiles not implemented")
}
func (UnimplementedFileRpcServer) CaptureVideoStream(context.Context, *CaptureVideoStreamReq) (*CaptureVideoStreamRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CaptureVideoStream not implemented")
}
func (UnimplementedFileRpcServer) mustEmbedUnimplementedFileRpcServer() {}
func (UnimplementedFileRpcServer) testEmbeddedByValue()                 {}

// UnsafeFileRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileRpcServer will
// result in compilation errors.
type UnsafeFileRpcServer interface {
	mustEmbedUnimplementedFileRpcServer()
}

func RegisterFileRpcServer(s grpc.ServiceRegistrar, srv FileRpcServer) {
	// If the following call pancis, it indicates UnimplementedFileRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileRpc_ServiceDesc, srv)
}

func _FileRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_OssDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).OssDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_OssDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).OssDetail(ctx, req.(*OssDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_OssList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OssListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).OssList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_OssList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).OssList(ctx, req.(*OssListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_CreateOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOssReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).CreateOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_CreateOss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).CreateOss(ctx, req.(*CreateOssReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_UpdateOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOssReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).UpdateOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_UpdateOss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).UpdateOss(ctx, req.(*UpdateOssReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_DeleteOss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOssReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).DeleteOss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_DeleteOss_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).DeleteOss(ctx, req.(*DeleteOssReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_MakeBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).MakeBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_MakeBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).MakeBucket(ctx, req.(*MakeBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_RemoveBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBucketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).RemoveBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_RemoveBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).RemoveBucket(ctx, req.(*RemoveBucketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_StatFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).StatFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_StatFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).StatFile(ctx, req.(*StatFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_SignUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).SignUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_SignUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).SignUrl(ctx, req.(*SignUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_PutFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).PutFile(ctx, req.(*PutFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_PutChunkFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileRpcServer).PutChunkFile(&grpc.GenericServerStream[PutChunkFileReq, PutChunkFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileRpc_PutChunkFileServer = grpc.BidiStreamingServer[PutChunkFileReq, PutChunkFileRes]

func _FileRpc_PutStreamFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileRpcServer).PutStreamFile(&grpc.GenericServerStream[PutStreamFileReq, PutStreamFileRes]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FileRpc_PutStreamFileServer = grpc.ClientStreamingServer[PutStreamFileReq, PutStreamFileRes]

func _FileRpc_RemoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).RemoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_RemoveFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).RemoveFile(ctx, req.(*RemoveFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_RemoveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).RemoveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_RemoveFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).RemoveFiles(ctx, req.(*RemoveFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileRpc_CaptureVideoStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptureVideoStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileRpcServer).CaptureVideoStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileRpc_CaptureVideoStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileRpcServer).CaptureVideoStream(ctx, req.(*CaptureVideoStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileRpc_ServiceDesc is the grpc.ServiceDesc for FileRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.FileRpc",
	HandlerType: (*FileRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _FileRpc_Ping_Handler,
		},
		{
			MethodName: "OssDetail",
			Handler:    _FileRpc_OssDetail_Handler,
		},
		{
			MethodName: "OssList",
			Handler:    _FileRpc_OssList_Handler,
		},
		{
			MethodName: "CreateOss",
			Handler:    _FileRpc_CreateOss_Handler,
		},
		{
			MethodName: "UpdateOss",
			Handler:    _FileRpc_UpdateOss_Handler,
		},
		{
			MethodName: "DeleteOss",
			Handler:    _FileRpc_DeleteOss_Handler,
		},
		{
			MethodName: "MakeBucket",
			Handler:    _FileRpc_MakeBucket_Handler,
		},
		{
			MethodName: "RemoveBucket",
			Handler:    _FileRpc_RemoveBucket_Handler,
		},
		{
			MethodName: "StatFile",
			Handler:    _FileRpc_StatFile_Handler,
		},
		{
			MethodName: "SignUrl",
			Handler:    _FileRpc_SignUrl_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _FileRpc_PutFile_Handler,
		},
		{
			MethodName: "RemoveFile",
			Handler:    _FileRpc_RemoveFile_Handler,
		},
		{
			MethodName: "RemoveFiles",
			Handler:    _FileRpc_RemoveFiles_Handler,
		},
		{
			MethodName: "CaptureVideoStream",
			Handler:    _FileRpc_CaptureVideoStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutChunkFile",
			Handler:       _FileRpc_PutChunkFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PutStreamFile",
			Handler:       _FileRpc_PutStreamFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "file.proto",
}
