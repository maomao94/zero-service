// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: bridgemodbus.proto

package server

import (
	"context"

	"zero-service/app/bridgemodbus/bridgemodbus"
	"zero-service/app/bridgemodbus/internal/logic"
	"zero-service/app/bridgemodbus/internal/svc"
)

type BridgeModbusServer struct {
	svcCtx *svc.ServiceContext
	bridgemodbus.UnimplementedBridgeModbusServer
}

func NewBridgeModbusServer(svcCtx *svc.ServiceContext) *BridgeModbusServer {
	return &BridgeModbusServer{
		svcCtx: svcCtx,
	}
}

func (s *BridgeModbusServer) Ping(ctx context.Context, in *bridgemodbus.Req) (*bridgemodbus.Res, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

// 读取线圈状态 (Function Code 0x01)
func (s *BridgeModbusServer) ReadCoils(ctx context.Context, in *bridgemodbus.ReadCoilsReq) (*bridgemodbus.ReadCoilsRes, error) {
	l := logic.NewReadCoilsLogic(ctx, s.svcCtx)
	return l.ReadCoils(in)
}

// 读取离散输入状态 (Function Code 0x02)
func (s *BridgeModbusServer) ReadDiscreteInputs(ctx context.Context, in *bridgemodbus.ReadDiscreteInputsReq) (*bridgemodbus.ReadDiscreteInputsRes, error) {
	l := logic.NewReadDiscreteInputsLogic(ctx, s.svcCtx)
	return l.ReadDiscreteInputs(in)
}

// 写单个线圈 (Function Code 0x05)
func (s *BridgeModbusServer) WriteSingleCoil(ctx context.Context, in *bridgemodbus.WriteSingleCoilReq) (*bridgemodbus.WriteSingleCoilRes, error) {
	l := logic.NewWriteSingleCoilLogic(ctx, s.svcCtx)
	return l.WriteSingleCoil(in)
}

// 写多个线圈 (Function Code 0x0F)
func (s *BridgeModbusServer) WriteMultipleCoils(ctx context.Context, in *bridgemodbus.WriteMultipleCoilsReq) (*bridgemodbus.WriteMultipleCoilsRes, error) {
	l := logic.NewWriteMultipleCoilsLogic(ctx, s.svcCtx)
	return l.WriteMultipleCoils(in)
}

// 读取输入寄存器 (Function Code 0x04)
func (s *BridgeModbusServer) ReadInputRegisters(ctx context.Context, in *bridgemodbus.ReadInputRegistersReq) (*bridgemodbus.ReadInputRegistersRes, error) {
	l := logic.NewReadInputRegistersLogic(ctx, s.svcCtx)
	return l.ReadInputRegisters(in)
}

// 读取保持寄存器 (Function Code 0x03)
func (s *BridgeModbusServer) ReadHoldingRegisters(ctx context.Context, in *bridgemodbus.ReadHoldingRegistersReq) (*bridgemodbus.ReadHoldingRegistersRes, error) {
	l := logic.NewReadHoldingRegistersLogic(ctx, s.svcCtx)
	return l.ReadHoldingRegisters(in)
}

// 写单个保持寄存器 (Function Code 0x06)
func (s *BridgeModbusServer) WriteSingleRegister(ctx context.Context, in *bridgemodbus.WriteSingleRegisterReq) (*bridgemodbus.WriteSingleRegisterRes, error) {
	l := logic.NewWriteSingleRegisterLogic(ctx, s.svcCtx)
	return l.WriteSingleRegister(in)
}

// 写多个保持寄存器 (Function Code 0x10)
func (s *BridgeModbusServer) WriteMultipleRegisters(ctx context.Context, in *bridgemodbus.WriteMultipleRegistersReq) (*bridgemodbus.WriteMultipleRegistersRes, error) {
	l := logic.NewWriteMultipleRegistersLogic(ctx, s.svcCtx)
	return l.WriteMultipleRegisters(in)
}

// 读写多个保持寄存器 (Function Code 0x17)
func (s *BridgeModbusServer) ReadWriteMultipleRegisters(ctx context.Context, in *bridgemodbus.ReadWriteMultipleRegistersReq) (*bridgemodbus.ReadWriteMultipleRegistersRes, error) {
	l := logic.NewReadWriteMultipleRegistersLogic(ctx, s.svcCtx)
	return l.ReadWriteMultipleRegisters(in)
}

// 屏蔽写保持寄存器 (Function Code 0x16)
func (s *BridgeModbusServer) MaskWriteRegister(ctx context.Context, in *bridgemodbus.MaskWriteRegisterReq) (*bridgemodbus.MaskWriteRegisterRes, error) {
	l := logic.NewMaskWriteRegisterLogic(ctx, s.svcCtx)
	return l.MaskWriteRegister(in)
}

// 读取 FIFO 队列 (Function Code 0x18)
func (s *BridgeModbusServer) ReadFIFOQueue(ctx context.Context, in *bridgemodbus.ReadFIFOQueueReq) (*bridgemodbus.ReadFIFOQueueRes, error) {
	l := logic.NewReadFIFOQueueLogic(ctx, s.svcCtx)
	return l.ReadFIFOQueue(in)
}

// 读取设备标识 (Function Code 0x2B / 0x0E)
func (s *BridgeModbusServer) ReadDeviceIdentification(ctx context.Context, in *bridgemodbus.ReadDeviceIdentificationReq) (*bridgemodbus.ReadDeviceIdentificationRes, error) {
	l := logic.NewReadDeviceIdentificationLogic(ctx, s.svcCtx)
	return l.ReadDeviceIdentification(in)
}
