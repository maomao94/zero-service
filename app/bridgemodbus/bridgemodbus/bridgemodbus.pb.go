// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: bridgemodbus.proto

package bridgemodbus

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          string                 `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"` // 健康检查请求内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Req) Reset() {
	*x = Req{}
	mi := &file_bridgemodbus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"` // 健康检查返回内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Res) Reset() {
	*x = Res{}
	mi := &file_bridgemodbus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// Modbus 从站配置结构
type PbModbusConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 主键ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时间
	CreateTime string `protobuf:"bytes,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 更新时间
	UpdateTime string `protobuf:"bytes,3,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// Modbus链路编号
	ModbusCode string `protobuf:"bytes,4,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"`
	// 从站通信地址（如TCP地址或串口）
	SlaveAddress string `protobuf:"bytes,5,opt,name=slaveAddress,proto3" json:"slaveAddress,omitempty"`
	// 从站地址（Slave ID）
	Slave uint32 `protobuf:"varint,6,opt,name=slave,proto3" json:"slave,omitempty"`
	// 通信超时时间（毫秒）
	Timeout uint32 `protobuf:"varint,7,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// 空闲超时时间（毫秒）
	IdleTimeout uint32 `protobuf:"varint,8,opt,name=idleTimeout,proto3" json:"idleTimeout,omitempty"`
	// 链路重连超时时间（毫秒）
	LinkRecoveryTimeout uint32 `protobuf:"varint,9,opt,name=linkRecoveryTimeout,proto3" json:"linkRecoveryTimeout,omitempty"`
	// 协议恢复超时时间（毫秒）
	ProtocolRecoveryTimeout uint32 `protobuf:"varint,10,opt,name=protocolRecoveryTimeout,proto3" json:"protocolRecoveryTimeout,omitempty"`
	// 建链延迟时间（毫秒）
	ConnectDelay uint32 `protobuf:"varint,11,opt,name=connectDelay,proto3" json:"connectDelay,omitempty"`
	// 是否启用TLS加密
	EnableTls uint32 `protobuf:"varint,12,opt,name=enableTls,proto3" json:"enableTls,omitempty"`
	// TLS证书文件路径
	TlsCertFile string `protobuf:"bytes,13,opt,name=tlsCertFile,proto3" json:"tlsCertFile,omitempty"`
	// TLS私钥文件路径
	TlsKeyFile string `protobuf:"bytes,14,opt,name=tlsKeyFile,proto3" json:"tlsKeyFile,omitempty"`
	// TLS CA证书文件路径
	TlsCaFile string `protobuf:"bytes,15,opt,name=tlsCaFile,proto3" json:"tlsCaFile,omitempty"`
	// 当前状态（0=禁用，1=启用）
	Status uint32 `protobuf:"varint,16,opt,name=status,proto3" json:"status,omitempty"`
	// 备注信息
	Remark        string `protobuf:"bytes,17,opt,name=remark,proto3" json:"remark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PbModbusConfig) Reset() {
	*x = PbModbusConfig{}
	mi := &file_bridgemodbus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PbModbusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbModbusConfig) ProtoMessage() {}

func (x *PbModbusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbModbusConfig.ProtoReflect.Descriptor instead.
func (*PbModbusConfig) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{2}
}

func (x *PbModbusConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PbModbusConfig) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *PbModbusConfig) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *PbModbusConfig) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *PbModbusConfig) GetSlaveAddress() string {
	if x != nil {
		return x.SlaveAddress
	}
	return ""
}

func (x *PbModbusConfig) GetSlave() uint32 {
	if x != nil {
		return x.Slave
	}
	return 0
}

func (x *PbModbusConfig) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PbModbusConfig) GetIdleTimeout() uint32 {
	if x != nil {
		return x.IdleTimeout
	}
	return 0
}

func (x *PbModbusConfig) GetLinkRecoveryTimeout() uint32 {
	if x != nil {
		return x.LinkRecoveryTimeout
	}
	return 0
}

func (x *PbModbusConfig) GetProtocolRecoveryTimeout() uint32 {
	if x != nil {
		return x.ProtocolRecoveryTimeout
	}
	return 0
}

func (x *PbModbusConfig) GetConnectDelay() uint32 {
	if x != nil {
		return x.ConnectDelay
	}
	return 0
}

func (x *PbModbusConfig) GetEnableTls() uint32 {
	if x != nil {
		return x.EnableTls
	}
	return 0
}

func (x *PbModbusConfig) GetTlsCertFile() string {
	if x != nil {
		return x.TlsCertFile
	}
	return ""
}

func (x *PbModbusConfig) GetTlsKeyFile() string {
	if x != nil {
		return x.TlsKeyFile
	}
	return ""
}

func (x *PbModbusConfig) GetTlsCaFile() string {
	if x != nil {
		return x.TlsCaFile
	}
	return ""
}

func (x *PbModbusConfig) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PbModbusConfig) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type SaveConfigReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Modbus链路编号
	ModbusCode string `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"`
	// 从站通信地址（如TCP地址或串口）
	SlaveAddress string `protobuf:"bytes,2,opt,name=slaveAddress,proto3" json:"slaveAddress,omitempty"`
	// 从站地址（Slave ID）
	Slave         uint32 `protobuf:"varint,3,opt,name=slave,proto3" json:"slave,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveConfigReq) Reset() {
	*x = SaveConfigReq{}
	mi := &file_bridgemodbus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConfigReq) ProtoMessage() {}

func (x *SaveConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConfigReq.ProtoReflect.Descriptor instead.
func (*SaveConfigReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{3}
}

func (x *SaveConfigReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *SaveConfigReq) GetSlaveAddress() string {
	if x != nil {
		return x.SlaveAddress
	}
	return ""
}

func (x *SaveConfigReq) GetSlave() uint32 {
	if x != nil {
		return x.Slave
	}
	return 0
}

type SaveConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveConfigRes) Reset() {
	*x = SaveConfigRes{}
	mi := &file_bridgemodbus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConfigRes) ProtoMessage() {}

func (x *SaveConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConfigRes.ProtoReflect.Descriptor instead.
func (*SaveConfigRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{4}
}

func (x *SaveConfigRes) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []int64                `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConfigReq) Reset() {
	*x = DeleteConfigReq{}
	mi := &file_bridgemodbus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigReq) ProtoMessage() {}

func (x *DeleteConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigReq.ProtoReflect.Descriptor instead.
func (*DeleteConfigReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteConfigReq) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConfigRes) Reset() {
	*x = DeleteConfigRes{}
	mi := &file_bridgemodbus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConfigRes) ProtoMessage() {}

func (x *DeleteConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConfigRes.ProtoReflect.Descriptor instead.
func (*DeleteConfigRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{6}
}

type PageListConfigReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`         // 页码
	PageSize      int64                  `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"` // 每页大小
	Keyword       string                 `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword,omitempty"`    // 模糊匹配 modbusCode
	Status        uint32                 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`     // 可选过滤状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageListConfigReq) Reset() {
	*x = PageListConfigReq{}
	mi := &file_bridgemodbus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListConfigReq) ProtoMessage() {}

func (x *PageListConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListConfigReq.ProtoReflect.Descriptor instead.
func (*PageListConfigReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{7}
}

func (x *PageListConfigReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageListConfigReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PageListConfigReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *PageListConfigReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type PageListConfigRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Cfg           []*PbModbusConfig      `protobuf:"bytes,2,rep,name=cfg,proto3" json:"cfg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageListConfigRes) Reset() {
	*x = PageListConfigRes{}
	mi := &file_bridgemodbus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageListConfigRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageListConfigRes) ProtoMessage() {}

func (x *PageListConfigRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageListConfigRes.ProtoReflect.Descriptor instead.
func (*PageListConfigRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{8}
}

func (x *PageListConfigRes) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PageListConfigRes) GetCfg() []*PbModbusConfig {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type GetConfigByCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigByCodeReq) Reset() {
	*x = GetConfigByCodeReq{}
	mi := &file_bridgemodbus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigByCodeReq) ProtoMessage() {}

func (x *GetConfigByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigByCodeReq.ProtoReflect.Descriptor instead.
func (*GetConfigByCodeReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigByCodeReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

type GetConfigByCodeRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cfg           *PbModbusConfig        `protobuf:"bytes,1,opt,name=cfg,proto3" json:"cfg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigByCodeRes) Reset() {
	*x = GetConfigByCodeRes{}
	mi := &file_bridgemodbus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigByCodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigByCodeRes) ProtoMessage() {}

func (x *GetConfigByCodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigByCodeRes.ProtoReflect.Descriptor instead.
func (*GetConfigByCodeRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{10}
}

func (x *GetConfigByCodeRes) GetCfg() *PbModbusConfig {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type BatchGetConfigByCodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    []string               `protobuf:"bytes,1,rep,name=modbusCode,proto3" json:"modbusCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetConfigByCodeReq) Reset() {
	*x = BatchGetConfigByCodeReq{}
	mi := &file_bridgemodbus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetConfigByCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetConfigByCodeReq) ProtoMessage() {}

func (x *BatchGetConfigByCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetConfigByCodeReq.ProtoReflect.Descriptor instead.
func (*BatchGetConfigByCodeReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{11}
}

func (x *BatchGetConfigByCodeReq) GetModbusCode() []string {
	if x != nil {
		return x.ModbusCode
	}
	return nil
}

type BatchGetConfigByCodeRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cfg           []*PbModbusConfig      `protobuf:"bytes,1,rep,name=cfg,proto3" json:"cfg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetConfigByCodeRes) Reset() {
	*x = BatchGetConfigByCodeRes{}
	mi := &file_bridgemodbus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetConfigByCodeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetConfigByCodeRes) ProtoMessage() {}

func (x *BatchGetConfigByCodeRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetConfigByCodeRes.ProtoReflect.Descriptor instead.
func (*BatchGetConfigByCodeRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{12}
}

func (x *BatchGetConfigByCodeRes) GetCfg() []*PbModbusConfig {
	if x != nil {
		return x.Cfg
	}
	return nil
}

type ReadCoilsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 起始线圈地址
	Quantity      uint32                 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`    // 读取数量（1–2000）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadCoilsReq) Reset() {
	*x = ReadCoilsReq{}
	mi := &file_bridgemodbus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCoilsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCoilsReq) ProtoMessage() {}

func (x *ReadCoilsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCoilsReq.ProtoReflect.Descriptor instead.
func (*ReadCoilsReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{13}
}

func (x *ReadCoilsReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadCoilsReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ReadCoilsReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ReadCoilsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`       // 按位表示的线圈状态（bit0 对应起始地址）
	Values        []bool                 `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"` // 每个元素对应一个线圈状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadCoilsRes) Reset() {
	*x = ReadCoilsRes{}
	mi := &file_bridgemodbus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadCoilsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCoilsRes) ProtoMessage() {}

func (x *ReadCoilsRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCoilsRes.ProtoReflect.Descriptor instead.
func (*ReadCoilsRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{14}
}

func (x *ReadCoilsRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReadCoilsRes) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type ReadDiscreteInputsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 起始离散输入地址
	Quantity      uint32                 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`    // 读取数量（1–2000）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDiscreteInputsReq) Reset() {
	*x = ReadDiscreteInputsReq{}
	mi := &file_bridgemodbus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDiscreteInputsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDiscreteInputsReq) ProtoMessage() {}

func (x *ReadDiscreteInputsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDiscreteInputsReq.ProtoReflect.Descriptor instead.
func (*ReadDiscreteInputsReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{15}
}

func (x *ReadDiscreteInputsReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadDiscreteInputsReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ReadDiscreteInputsReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ReadDiscreteInputsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"`       // 按位表示的离散输入状态
	Values        []bool                 `protobuf:"varint,2,rep,packed,name=values,proto3" json:"values,omitempty"` // 每个元素对应一个离散输入
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDiscreteInputsRes) Reset() {
	*x = ReadDiscreteInputsRes{}
	mi := &file_bridgemodbus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDiscreteInputsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDiscreteInputsRes) ProtoMessage() {}

func (x *ReadDiscreteInputsRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDiscreteInputsRes.ProtoReflect.Descriptor instead.
func (*ReadDiscreteInputsRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{16}
}

func (x *ReadDiscreteInputsRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReadDiscreteInputsRes) GetValues() []bool {
	if x != nil {
		return x.Values
	}
	return nil
}

type WriteSingleCoilReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 线圈地址
	Value         uint32                 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`          // 写入值：0x0000=OFF, 0xFF00=ON
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteSingleCoilReq) Reset() {
	*x = WriteSingleCoilReq{}
	mi := &file_bridgemodbus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteSingleCoilReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSingleCoilReq) ProtoMessage() {}

func (x *WriteSingleCoilReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSingleCoilReq.ProtoReflect.Descriptor instead.
func (*WriteSingleCoilReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{17}
}

func (x *WriteSingleCoilReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *WriteSingleCoilReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *WriteSingleCoilReq) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WriteSingleCoilRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 回显写入后的线圈值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteSingleCoilRes) Reset() {
	*x = WriteSingleCoilRes{}
	mi := &file_bridgemodbus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteSingleCoilRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSingleCoilRes) ProtoMessage() {}

func (x *WriteSingleCoilRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSingleCoilRes.ProtoReflect.Descriptor instead.
func (*WriteSingleCoilRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{18}
}

func (x *WriteSingleCoilRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type WriteMultipleCoilsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 起始线圈地址
	Quantity      uint32                 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`    // 写入数量
	Values        []byte                 `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`         // 每 bit 对应一个线圈状态，0=OFF，1=ON
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMultipleCoilsReq) Reset() {
	*x = WriteMultipleCoilsReq{}
	mi := &file_bridgemodbus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMultipleCoilsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMultipleCoilsReq) ProtoMessage() {}

func (x *WriteMultipleCoilsReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMultipleCoilsReq.ProtoReflect.Descriptor instead.
func (*WriteMultipleCoilsReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{19}
}

func (x *WriteMultipleCoilsReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *WriteMultipleCoilsReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *WriteMultipleCoilsReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *WriteMultipleCoilsReq) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type WriteMultipleCoilsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 回显写入的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMultipleCoilsRes) Reset() {
	*x = WriteMultipleCoilsRes{}
	mi := &file_bridgemodbus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMultipleCoilsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMultipleCoilsRes) ProtoMessage() {}

func (x *WriteMultipleCoilsRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMultipleCoilsRes.ProtoReflect.Descriptor instead.
func (*WriteMultipleCoilsRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{20}
}

func (x *WriteMultipleCoilsRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type ReadInputRegistersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 起始寄存器地址
	Quantity      uint32                 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`    // 读取数量（1–125）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadInputRegistersReq) Reset() {
	*x = ReadInputRegistersReq{}
	mi := &file_bridgemodbus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadInputRegistersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInputRegistersReq) ProtoMessage() {}

func (x *ReadInputRegistersReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInputRegistersReq.ProtoReflect.Descriptor instead.
func (*ReadInputRegistersReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{21}
}

func (x *ReadInputRegistersReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadInputRegistersReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ReadInputRegistersReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ReadInputRegistersRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 输入寄存器数据，每寄存器 2 字节，高字节在前
	Values        []string               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`   // 每个寄存器值按 16 进制字符串返回，例如 "0xFF01"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadInputRegistersRes) Reset() {
	*x = ReadInputRegistersRes{}
	mi := &file_bridgemodbus_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadInputRegistersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadInputRegistersRes) ProtoMessage() {}

func (x *ReadInputRegistersRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadInputRegistersRes.ProtoReflect.Descriptor instead.
func (*ReadInputRegistersRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{22}
}

func (x *ReadInputRegistersRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReadInputRegistersRes) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ReadHoldingRegistersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 起始寄存器地址
	Quantity      uint32                 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`    // 读取数量（1–125）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadHoldingRegistersReq) Reset() {
	*x = ReadHoldingRegistersReq{}
	mi := &file_bridgemodbus_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadHoldingRegistersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHoldingRegistersReq) ProtoMessage() {}

func (x *ReadHoldingRegistersReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHoldingRegistersReq.ProtoReflect.Descriptor instead.
func (*ReadHoldingRegistersReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{23}
}

func (x *ReadHoldingRegistersReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadHoldingRegistersReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *ReadHoldingRegistersReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ReadHoldingRegistersRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 保持寄存器数据，每寄存器 2 字节
	Values        []string               `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`   // 每个寄存器值按 16 进制字符串返回，例如 "0xFF01"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadHoldingRegistersRes) Reset() {
	*x = ReadHoldingRegistersRes{}
	mi := &file_bridgemodbus_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadHoldingRegistersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHoldingRegistersRes) ProtoMessage() {}

func (x *ReadHoldingRegistersRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHoldingRegistersRes.ProtoReflect.Descriptor instead.
func (*ReadHoldingRegistersRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{24}
}

func (x *ReadHoldingRegistersRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReadHoldingRegistersRes) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type WriteSingleRegisterReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 寄存器地址
	Value         uint32                 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`          // 写入的 16-bit 值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteSingleRegisterReq) Reset() {
	*x = WriteSingleRegisterReq{}
	mi := &file_bridgemodbus_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteSingleRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSingleRegisterReq) ProtoMessage() {}

func (x *WriteSingleRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSingleRegisterReq.ProtoReflect.Descriptor instead.
func (*WriteSingleRegisterReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{25}
}

func (x *WriteSingleRegisterReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *WriteSingleRegisterReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *WriteSingleRegisterReq) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type WriteSingleRegisterRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 回显写入后的寄存器值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteSingleRegisterRes) Reset() {
	*x = WriteSingleRegisterRes{}
	mi := &file_bridgemodbus_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteSingleRegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteSingleRegisterRes) ProtoMessage() {}

func (x *WriteSingleRegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteSingleRegisterRes.ProtoReflect.Descriptor instead.
func (*WriteSingleRegisterRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{26}
}

func (x *WriteSingleRegisterRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type WriteMultipleRegistersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 起始寄存器地址
	Quantity      uint32                 `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`    // 写入数量
	Values        []byte                 `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`         // 按寄存器顺序的字节数组，每寄存器 2 字节
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMultipleRegistersReq) Reset() {
	*x = WriteMultipleRegistersReq{}
	mi := &file_bridgemodbus_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMultipleRegistersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMultipleRegistersReq) ProtoMessage() {}

func (x *WriteMultipleRegistersReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMultipleRegistersReq.ProtoReflect.Descriptor instead.
func (*WriteMultipleRegistersReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{27}
}

func (x *WriteMultipleRegistersReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *WriteMultipleRegistersReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *WriteMultipleRegistersReq) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *WriteMultipleRegistersReq) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type WriteMultipleRegistersRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 回显写入的数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteMultipleRegistersRes) Reset() {
	*x = WriteMultipleRegistersRes{}
	mi := &file_bridgemodbus_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteMultipleRegistersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMultipleRegistersRes) ProtoMessage() {}

func (x *WriteMultipleRegistersRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMultipleRegistersRes.ProtoReflect.Descriptor instead.
func (*WriteMultipleRegistersRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{28}
}

func (x *WriteMultipleRegistersRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type ReadWriteMultipleRegistersReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"`        // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	ReadAddress   uint32                 `protobuf:"varint,2,opt,name=readAddress,proto3" json:"readAddress,omitempty"`     // 读取起始寄存器地址
	ReadQuantity  uint32                 `protobuf:"varint,3,opt,name=readQuantity,proto3" json:"readQuantity,omitempty"`   // 读取数量
	WriteAddress  uint32                 `protobuf:"varint,4,opt,name=writeAddress,proto3" json:"writeAddress,omitempty"`   // 写入起始寄存器地址
	WriteQuantity uint32                 `protobuf:"varint,5,opt,name=writeQuantity,proto3" json:"writeQuantity,omitempty"` // 写入数量
	Values        []byte                 `protobuf:"bytes,6,opt,name=values,proto3" json:"values,omitempty"`                // 写入数据，每寄存器 2 字节
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadWriteMultipleRegistersReq) Reset() {
	*x = ReadWriteMultipleRegistersReq{}
	mi := &file_bridgemodbus_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadWriteMultipleRegistersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWriteMultipleRegistersReq) ProtoMessage() {}

func (x *ReadWriteMultipleRegistersReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWriteMultipleRegistersReq.ProtoReflect.Descriptor instead.
func (*ReadWriteMultipleRegistersReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{29}
}

func (x *ReadWriteMultipleRegistersReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadWriteMultipleRegistersReq) GetReadAddress() uint32 {
	if x != nil {
		return x.ReadAddress
	}
	return 0
}

func (x *ReadWriteMultipleRegistersReq) GetReadQuantity() uint32 {
	if x != nil {
		return x.ReadQuantity
	}
	return 0
}

func (x *ReadWriteMultipleRegistersReq) GetWriteAddress() uint32 {
	if x != nil {
		return x.WriteAddress
	}
	return 0
}

func (x *ReadWriteMultipleRegistersReq) GetWriteQuantity() uint32 {
	if x != nil {
		return x.WriteQuantity
	}
	return 0
}

func (x *ReadWriteMultipleRegistersReq) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

type ReadWriteMultipleRegistersRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 读取到的寄存器数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadWriteMultipleRegistersRes) Reset() {
	*x = ReadWriteMultipleRegistersRes{}
	mi := &file_bridgemodbus_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadWriteMultipleRegistersRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadWriteMultipleRegistersRes) ProtoMessage() {}

func (x *ReadWriteMultipleRegistersRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadWriteMultipleRegistersRes.ProtoReflect.Descriptor instead.
func (*ReadWriteMultipleRegistersRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{30}
}

func (x *ReadWriteMultipleRegistersRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type MaskWriteRegisterReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // 寄存器地址
	AndMask       uint32                 `protobuf:"varint,3,opt,name=andMask,proto3" json:"andMask,omitempty"`      // AND 掩码
	OrMask        uint32                 `protobuf:"varint,4,opt,name=orMask,proto3" json:"orMask,omitempty"`        // OR 掩码
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskWriteRegisterReq) Reset() {
	*x = MaskWriteRegisterReq{}
	mi := &file_bridgemodbus_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskWriteRegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskWriteRegisterReq) ProtoMessage() {}

func (x *MaskWriteRegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskWriteRegisterReq.ProtoReflect.Descriptor instead.
func (*MaskWriteRegisterReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{31}
}

func (x *MaskWriteRegisterReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *MaskWriteRegisterReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *MaskWriteRegisterReq) GetAndMask() uint32 {
	if x != nil {
		return x.AndMask
	}
	return 0
}

func (x *MaskWriteRegisterReq) GetOrMask() uint32 {
	if x != nil {
		return x.OrMask
	}
	return 0
}

type MaskWriteRegisterRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // 回显写入后的寄存器值
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskWriteRegisterRes) Reset() {
	*x = MaskWriteRegisterRes{}
	mi := &file_bridgemodbus_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskWriteRegisterRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskWriteRegisterRes) ProtoMessage() {}

func (x *MaskWriteRegisterRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskWriteRegisterRes.ProtoReflect.Descriptor instead.
func (*MaskWriteRegisterRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{32}
}

func (x *MaskWriteRegisterRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type ReadFIFOQueueReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode    string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	Address       uint32                 `protobuf:"varint,2,opt,name=address,proto3" json:"address,omitempty"`      // FIFO 队列寄存器地址
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFIFOQueueReq) Reset() {
	*x = ReadFIFOQueueReq{}
	mi := &file_bridgemodbus_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFIFOQueueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFIFOQueueReq) ProtoMessage() {}

func (x *ReadFIFOQueueReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFIFOQueueReq.ProtoReflect.Descriptor instead.
func (*ReadFIFOQueueReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{33}
}

func (x *ReadFIFOQueueReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadFIFOQueueReq) GetAddress() uint32 {
	if x != nil {
		return x.Address
	}
	return 0
}

type ReadFIFOQueueRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []byte                 `protobuf:"bytes,1,opt,name=results,proto3" json:"results,omitempty"` // FIFO 队列内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFIFOQueueRes) Reset() {
	*x = ReadFIFOQueueRes{}
	mi := &file_bridgemodbus_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFIFOQueueRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFIFOQueueRes) ProtoMessage() {}

func (x *ReadFIFOQueueRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFIFOQueueRes.ProtoReflect.Descriptor instead.
func (*ReadFIFOQueueRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{34}
}

func (x *ReadFIFOQueueRes) GetResults() []byte {
	if x != nil {
		return x.Results
	}
	return nil
}

type ReadDeviceIdentificationReq struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode       string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"`              // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
	ReadDeviceIdCode uint32                 `protobuf:"varint,2,opt,name=readDeviceIdCode,proto3" json:"readDeviceIdCode,omitempty"` // 读取类型：0x01=基本, 0x02=常规, 0x03=扩展
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReadDeviceIdentificationReq) Reset() {
	*x = ReadDeviceIdentificationReq{}
	mi := &file_bridgemodbus_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeviceIdentificationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeviceIdentificationReq) ProtoMessage() {}

func (x *ReadDeviceIdentificationReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeviceIdentificationReq.ProtoReflect.Descriptor instead.
func (*ReadDeviceIdentificationReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{35}
}

func (x *ReadDeviceIdentificationReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadDeviceIdentificationReq) GetReadDeviceIdCode() uint32 {
	if x != nil {
		return x.ReadDeviceIdCode
	}
	return 0
}

type ReadDeviceIdentificationRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 原始对象 ID 映射 (十进制)，方便协议调试/直接对应 Modbus 规范
	Results map[uint32]string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 对象 ID 用十六进制字符串表示，例如 "0x00", "0x01"
	HexResults map[string]string `protobuf:"bytes,2,rep,name=hexResults,proto3" json:"hexResults,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 语义化映射 (如果对象 ID 有标准含义，就用名字；否则 fallback 成 Object_0xXX)
	SemanticResults map[string]string `protobuf:"bytes,3,rep,name=semanticResults,proto3" json:"semanticResults,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReadDeviceIdentificationRes) Reset() {
	*x = ReadDeviceIdentificationRes{}
	mi := &file_bridgemodbus_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeviceIdentificationRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeviceIdentificationRes) ProtoMessage() {}

func (x *ReadDeviceIdentificationRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeviceIdentificationRes.ProtoReflect.Descriptor instead.
func (*ReadDeviceIdentificationRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{36}
}

func (x *ReadDeviceIdentificationRes) GetResults() map[uint32]string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReadDeviceIdentificationRes) GetHexResults() map[string]string {
	if x != nil {
		return x.HexResults
	}
	return nil
}

func (x *ReadDeviceIdentificationRes) GetSemanticResults() map[string]string {
	if x != nil {
		return x.SemanticResults
	}
	return nil
}

type ReadDeviceIdentificationSpecificObjectReq struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ModbusCode string                 `protobuf:"bytes,1,opt,name=modbusCode,proto3" json:"modbusCode,omitempty"` // Modbus配置唯一编码 空=默认配置
	// 常见对象 ID 对照表：
	//
	//	0x00 = 厂商名称 (VendorName)
	//	0x01 = 产品代码 (ProductCode)
	//	0x02 = 版本号 (MajorMinorRevision)
	//	0x03 = 厂商网址 (VendorURL)
	//	0x04 = 产品名称 (ProductName)
	//	0x05 = 型号名称 (ModelName)
	//	0x06 = 用户应用名称 (UserApplicationName)
	ObjectId      uint32 `protobuf:"varint,2,opt,name=objectId,proto3" json:"objectId,omitempty"` // 要读取的对象 ID (例如 0x00~0xFF)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDeviceIdentificationSpecificObjectReq) Reset() {
	*x = ReadDeviceIdentificationSpecificObjectReq{}
	mi := &file_bridgemodbus_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeviceIdentificationSpecificObjectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeviceIdentificationSpecificObjectReq) ProtoMessage() {}

func (x *ReadDeviceIdentificationSpecificObjectReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeviceIdentificationSpecificObjectReq.ProtoReflect.Descriptor instead.
func (*ReadDeviceIdentificationSpecificObjectReq) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{37}
}

func (x *ReadDeviceIdentificationSpecificObjectReq) GetModbusCode() string {
	if x != nil {
		return x.ModbusCode
	}
	return ""
}

func (x *ReadDeviceIdentificationSpecificObjectReq) GetObjectId() uint32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

type ReadDeviceIdentificationSpecificObjectRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 原始对象 ID 映射 (十进制)，方便协议调试/直接对应 Modbus 规范
	Results map[uint32]string `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 对象 ID 用十六进制字符串表示，例如 "0x00", "0x01"
	HexResults map[string]string `protobuf:"bytes,2,rep,name=hexResults,proto3" json:"hexResults,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 语义化映射 (如果对象 ID 有标准含义，就用名字；否则 fallback 成 Object_0xXX)
	SemanticResults map[string]string `protobuf:"bytes,3,rep,name=semanticResults,proto3" json:"semanticResults,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReadDeviceIdentificationSpecificObjectRes) Reset() {
	*x = ReadDeviceIdentificationSpecificObjectRes{}
	mi := &file_bridgemodbus_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeviceIdentificationSpecificObjectRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeviceIdentificationSpecificObjectRes) ProtoMessage() {}

func (x *ReadDeviceIdentificationSpecificObjectRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemodbus_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeviceIdentificationSpecificObjectRes.ProtoReflect.Descriptor instead.
func (*ReadDeviceIdentificationSpecificObjectRes) Descriptor() ([]byte, []int) {
	return file_bridgemodbus_proto_rawDescGZIP(), []int{38}
}

func (x *ReadDeviceIdentificationSpecificObjectRes) GetResults() map[uint32]string {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *ReadDeviceIdentificationSpecificObjectRes) GetHexResults() map[string]string {
	if x != nil {
		return x.HexResults
	}
	return nil
}

func (x *ReadDeviceIdentificationSpecificObjectRes) GetSemanticResults() map[string]string {
	if x != nil {
		return x.SemanticResults
	}
	return nil
}

var File_bridgemodbus_proto protoreflect.FileDescriptor

const file_bridgemodbus_proto_rawDesc = "" +
	"\n" +
	"\x12bridgemodbus.proto\x12\fbridgemodbus\"\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04ping\x18\x01 \x01(\tR\x04ping\"\x19\n" +
	"\x03Res\x12\x12\n" +
	"\x04pong\x18\x01 \x01(\tR\x04pong\"\xb4\x04\n" +
	"\x0ePbModbusConfig\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1e\n" +
	"\n" +
	"createTime\x18\x02 \x01(\tR\n" +
	"createTime\x12\x1e\n" +
	"\n" +
	"updateTime\x18\x03 \x01(\tR\n" +
	"updateTime\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x04 \x01(\tR\n" +
	"modbusCode\x12\"\n" +
	"\fslaveAddress\x18\x05 \x01(\tR\fslaveAddress\x12\x14\n" +
	"\x05slave\x18\x06 \x01(\rR\x05slave\x12\x18\n" +
	"\atimeout\x18\a \x01(\rR\atimeout\x12 \n" +
	"\vidleTimeout\x18\b \x01(\rR\vidleTimeout\x120\n" +
	"\x13linkRecoveryTimeout\x18\t \x01(\rR\x13linkRecoveryTimeout\x128\n" +
	"\x17protocolRecoveryTimeout\x18\n" +
	" \x01(\rR\x17protocolRecoveryTimeout\x12\"\n" +
	"\fconnectDelay\x18\v \x01(\rR\fconnectDelay\x12\x1c\n" +
	"\tenableTls\x18\f \x01(\rR\tenableTls\x12 \n" +
	"\vtlsCertFile\x18\r \x01(\tR\vtlsCertFile\x12\x1e\n" +
	"\n" +
	"tlsKeyFile\x18\x0e \x01(\tR\n" +
	"tlsKeyFile\x12\x1c\n" +
	"\ttlsCaFile\x18\x0f \x01(\tR\ttlsCaFile\x12\x16\n" +
	"\x06status\x18\x10 \x01(\rR\x06status\x12\x16\n" +
	"\x06remark\x18\x11 \x01(\tR\x06remark\"i\n" +
	"\rSaveConfigReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\"\n" +
	"\fslaveAddress\x18\x02 \x01(\tR\fslaveAddress\x12\x14\n" +
	"\x05slave\x18\x03 \x01(\rR\x05slave\"\x1f\n" +
	"\rSaveConfigRes\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"#\n" +
	"\x0fDeleteConfigReq\x12\x10\n" +
	"\x03ids\x18\x01 \x03(\x03R\x03ids\"\x11\n" +
	"\x0fDeleteConfigRes\"u\n" +
	"\x11PageListConfigReq\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x03R\x04page\x12\x1a\n" +
	"\bpageSize\x18\x02 \x01(\x03R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x03 \x01(\tR\akeyword\x12\x16\n" +
	"\x06status\x18\x04 \x01(\rR\x06status\"Y\n" +
	"\x11PageListConfigRes\x12\x14\n" +
	"\x05total\x18\x01 \x01(\rR\x05total\x12.\n" +
	"\x03cfg\x18\x02 \x03(\v2\x1c.bridgemodbus.PbModbusConfigR\x03cfg\"4\n" +
	"\x12GetConfigByCodeReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\"D\n" +
	"\x12GetConfigByCodeRes\x12.\n" +
	"\x03cfg\x18\x01 \x01(\v2\x1c.bridgemodbus.PbModbusConfigR\x03cfg\"9\n" +
	"\x17BatchGetConfigByCodeReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x03(\tR\n" +
	"modbusCode\"I\n" +
	"\x17BatchGetConfigByCodeRes\x12.\n" +
	"\x03cfg\x18\x01 \x03(\v2\x1c.bridgemodbus.PbModbusConfigR\x03cfg\"d\n" +
	"\fReadCoilsReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\rR\bquantity\"@\n" +
	"\fReadCoilsRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\x12\x16\n" +
	"\x06values\x18\x02 \x03(\bR\x06values\"m\n" +
	"\x15ReadDiscreteInputsReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\rR\bquantity\"I\n" +
	"\x15ReadDiscreteInputsRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\x12\x16\n" +
	"\x06values\x18\x02 \x03(\bR\x06values\"d\n" +
	"\x12WriteSingleCoilReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x14\n" +
	"\x05value\x18\x03 \x01(\rR\x05value\".\n" +
	"\x12WriteSingleCoilRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"\x85\x01\n" +
	"\x15WriteMultipleCoilsReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\rR\bquantity\x12\x16\n" +
	"\x06values\x18\x04 \x01(\fR\x06values\"1\n" +
	"\x15WriteMultipleCoilsRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"m\n" +
	"\x15ReadInputRegistersReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\rR\bquantity\"I\n" +
	"\x15ReadInputRegistersRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values\"o\n" +
	"\x17ReadHoldingRegistersReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\rR\bquantity\"K\n" +
	"\x17ReadHoldingRegistersRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values\"h\n" +
	"\x16WriteSingleRegisterReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x14\n" +
	"\x05value\x18\x03 \x01(\rR\x05value\"2\n" +
	"\x16WriteSingleRegisterRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"\x89\x01\n" +
	"\x19WriteMultipleRegistersReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x1a\n" +
	"\bquantity\x18\x03 \x01(\rR\bquantity\x12\x16\n" +
	"\x06values\x18\x04 \x01(\fR\x06values\"5\n" +
	"\x19WriteMultipleRegistersRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"\xe7\x01\n" +
	"\x1dReadWriteMultipleRegistersReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12 \n" +
	"\vreadAddress\x18\x02 \x01(\rR\vreadAddress\x12\"\n" +
	"\freadQuantity\x18\x03 \x01(\rR\freadQuantity\x12\"\n" +
	"\fwriteAddress\x18\x04 \x01(\rR\fwriteAddress\x12$\n" +
	"\rwriteQuantity\x18\x05 \x01(\rR\rwriteQuantity\x12\x16\n" +
	"\x06values\x18\x06 \x01(\fR\x06values\"9\n" +
	"\x1dReadWriteMultipleRegistersRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"\x82\x01\n" +
	"\x14MaskWriteRegisterReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\x12\x18\n" +
	"\aandMask\x18\x03 \x01(\rR\aandMask\x12\x16\n" +
	"\x06orMask\x18\x04 \x01(\rR\x06orMask\"0\n" +
	"\x14MaskWriteRegisterRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"L\n" +
	"\x10ReadFIFOQueueReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\rR\aaddress\",\n" +
	"\x10ReadFIFOQueueRes\x12\x18\n" +
	"\aresults\x18\x01 \x01(\fR\aresults\"i\n" +
	"\x1bReadDeviceIdentificationReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12*\n" +
	"\x10readDeviceIdCode\x18\x02 \x01(\rR\x10readDeviceIdCode\"\xf3\x03\n" +
	"\x1bReadDeviceIdentificationRes\x12P\n" +
	"\aresults\x18\x01 \x03(\v26.bridgemodbus.ReadDeviceIdentificationRes.ResultsEntryR\aresults\x12Y\n" +
	"\n" +
	"hexResults\x18\x02 \x03(\v29.bridgemodbus.ReadDeviceIdentificationRes.HexResultsEntryR\n" +
	"hexResults\x12h\n" +
	"\x0fsemanticResults\x18\x03 \x03(\v2>.bridgemodbus.ReadDeviceIdentificationRes.SemanticResultsEntryR\x0fsemanticResults\x1a:\n" +
	"\fResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fHexResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aB\n" +
	"\x14SemanticResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"g\n" +
	")ReadDeviceIdentificationSpecificObjectReq\x12\x1e\n" +
	"\n" +
	"modbusCode\x18\x01 \x01(\tR\n" +
	"modbusCode\x12\x1a\n" +
	"\bobjectId\x18\x02 \x01(\rR\bobjectId\"\xab\x04\n" +
	")ReadDeviceIdentificationSpecificObjectRes\x12^\n" +
	"\aresults\x18\x01 \x03(\v2D.bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.ResultsEntryR\aresults\x12g\n" +
	"\n" +
	"hexResults\x18\x02 \x03(\v2G.bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.HexResultsEntryR\n" +
	"hexResults\x12v\n" +
	"\x0fsemanticResults\x18\x03 \x03(\v2L.bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.SemanticResultsEntryR\x0fsemanticResults\x1a:\n" +
	"\fResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fHexResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aB\n" +
	"\x14SemanticResultsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\x89\x0e\n" +
	"\fBridgeModbus\x12,\n" +
	"\x04Ping\x12\x11.bridgemodbus.Req\x1a\x11.bridgemodbus.Res\x12F\n" +
	"\n" +
	"SaveConfig\x12\x1b.bridgemodbus.SaveConfigReq\x1a\x1b.bridgemodbus.SaveConfigRes\x12L\n" +
	"\fDeleteConfig\x12\x1d.bridgemodbus.DeleteConfigReq\x1a\x1d.bridgemodbus.DeleteConfigRes\x12R\n" +
	"\x0ePageListConfig\x12\x1f.bridgemodbus.PageListConfigReq\x1a\x1f.bridgemodbus.PageListConfigRes\x12U\n" +
	"\x0fGetConfigByCode\x12 .bridgemodbus.GetConfigByCodeReq\x1a .bridgemodbus.GetConfigByCodeRes\x12d\n" +
	"\x14BatchGetConfigByCode\x12%.bridgemodbus.BatchGetConfigByCodeReq\x1a%.bridgemodbus.BatchGetConfigByCodeRes\x12C\n" +
	"\tReadCoils\x12\x1a.bridgemodbus.ReadCoilsReq\x1a\x1a.bridgemodbus.ReadCoilsRes\x12^\n" +
	"\x12ReadDiscreteInputs\x12#.bridgemodbus.ReadDiscreteInputsReq\x1a#.bridgemodbus.ReadDiscreteInputsRes\x12U\n" +
	"\x0fWriteSingleCoil\x12 .bridgemodbus.WriteSingleCoilReq\x1a .bridgemodbus.WriteSingleCoilRes\x12^\n" +
	"\x12WriteMultipleCoils\x12#.bridgemodbus.WriteMultipleCoilsReq\x1a#.bridgemodbus.WriteMultipleCoilsRes\x12^\n" +
	"\x12ReadInputRegisters\x12#.bridgemodbus.ReadInputRegistersReq\x1a#.bridgemodbus.ReadInputRegistersRes\x12d\n" +
	"\x14ReadHoldingRegisters\x12%.bridgemodbus.ReadHoldingRegistersReq\x1a%.bridgemodbus.ReadHoldingRegistersRes\x12a\n" +
	"\x13WriteSingleRegister\x12$.bridgemodbus.WriteSingleRegisterReq\x1a$.bridgemodbus.WriteSingleRegisterRes\x12j\n" +
	"\x16WriteMultipleRegisters\x12'.bridgemodbus.WriteMultipleRegistersReq\x1a'.bridgemodbus.WriteMultipleRegistersRes\x12v\n" +
	"\x1aReadWriteMultipleRegisters\x12+.bridgemodbus.ReadWriteMultipleRegistersReq\x1a+.bridgemodbus.ReadWriteMultipleRegistersRes\x12[\n" +
	"\x11MaskWriteRegister\x12\".bridgemodbus.MaskWriteRegisterReq\x1a\".bridgemodbus.MaskWriteRegisterRes\x12O\n" +
	"\rReadFIFOQueue\x12\x1e.bridgemodbus.ReadFIFOQueueReq\x1a\x1e.bridgemodbus.ReadFIFOQueueRes\x12p\n" +
	"\x18ReadDeviceIdentification\x12).bridgemodbus.ReadDeviceIdentificationReq\x1a).bridgemodbus.ReadDeviceIdentificationRes\x12\x9a\x01\n" +
	"&ReadDeviceIdentificationSpecificObject\x127.bridgemodbus.ReadDeviceIdentificationSpecificObjectReq\x1a7.bridgemodbus.ReadDeviceIdentificationSpecificObjectResBC\n" +
	"\x1ccom.github.bridgemodbus.grpcB\x11BridgeModbusProtoP\x01Z\x0e./bridgemodbusb\x06proto3"

var (
	file_bridgemodbus_proto_rawDescOnce sync.Once
	file_bridgemodbus_proto_rawDescData []byte
)

func file_bridgemodbus_proto_rawDescGZIP() []byte {
	file_bridgemodbus_proto_rawDescOnce.Do(func() {
		file_bridgemodbus_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bridgemodbus_proto_rawDesc), len(file_bridgemodbus_proto_rawDesc)))
	})
	return file_bridgemodbus_proto_rawDescData
}

var file_bridgemodbus_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_bridgemodbus_proto_goTypes = []any{
	(*Req)(nil),                                       // 0: bridgemodbus.Req
	(*Res)(nil),                                       // 1: bridgemodbus.Res
	(*PbModbusConfig)(nil),                            // 2: bridgemodbus.PbModbusConfig
	(*SaveConfigReq)(nil),                             // 3: bridgemodbus.SaveConfigReq
	(*SaveConfigRes)(nil),                             // 4: bridgemodbus.SaveConfigRes
	(*DeleteConfigReq)(nil),                           // 5: bridgemodbus.DeleteConfigReq
	(*DeleteConfigRes)(nil),                           // 6: bridgemodbus.DeleteConfigRes
	(*PageListConfigReq)(nil),                         // 7: bridgemodbus.PageListConfigReq
	(*PageListConfigRes)(nil),                         // 8: bridgemodbus.PageListConfigRes
	(*GetConfigByCodeReq)(nil),                        // 9: bridgemodbus.GetConfigByCodeReq
	(*GetConfigByCodeRes)(nil),                        // 10: bridgemodbus.GetConfigByCodeRes
	(*BatchGetConfigByCodeReq)(nil),                   // 11: bridgemodbus.BatchGetConfigByCodeReq
	(*BatchGetConfigByCodeRes)(nil),                   // 12: bridgemodbus.BatchGetConfigByCodeRes
	(*ReadCoilsReq)(nil),                              // 13: bridgemodbus.ReadCoilsReq
	(*ReadCoilsRes)(nil),                              // 14: bridgemodbus.ReadCoilsRes
	(*ReadDiscreteInputsReq)(nil),                     // 15: bridgemodbus.ReadDiscreteInputsReq
	(*ReadDiscreteInputsRes)(nil),                     // 16: bridgemodbus.ReadDiscreteInputsRes
	(*WriteSingleCoilReq)(nil),                        // 17: bridgemodbus.WriteSingleCoilReq
	(*WriteSingleCoilRes)(nil),                        // 18: bridgemodbus.WriteSingleCoilRes
	(*WriteMultipleCoilsReq)(nil),                     // 19: bridgemodbus.WriteMultipleCoilsReq
	(*WriteMultipleCoilsRes)(nil),                     // 20: bridgemodbus.WriteMultipleCoilsRes
	(*ReadInputRegistersReq)(nil),                     // 21: bridgemodbus.ReadInputRegistersReq
	(*ReadInputRegistersRes)(nil),                     // 22: bridgemodbus.ReadInputRegistersRes
	(*ReadHoldingRegistersReq)(nil),                   // 23: bridgemodbus.ReadHoldingRegistersReq
	(*ReadHoldingRegistersRes)(nil),                   // 24: bridgemodbus.ReadHoldingRegistersRes
	(*WriteSingleRegisterReq)(nil),                    // 25: bridgemodbus.WriteSingleRegisterReq
	(*WriteSingleRegisterRes)(nil),                    // 26: bridgemodbus.WriteSingleRegisterRes
	(*WriteMultipleRegistersReq)(nil),                 // 27: bridgemodbus.WriteMultipleRegistersReq
	(*WriteMultipleRegistersRes)(nil),                 // 28: bridgemodbus.WriteMultipleRegistersRes
	(*ReadWriteMultipleRegistersReq)(nil),             // 29: bridgemodbus.ReadWriteMultipleRegistersReq
	(*ReadWriteMultipleRegistersRes)(nil),             // 30: bridgemodbus.ReadWriteMultipleRegistersRes
	(*MaskWriteRegisterReq)(nil),                      // 31: bridgemodbus.MaskWriteRegisterReq
	(*MaskWriteRegisterRes)(nil),                      // 32: bridgemodbus.MaskWriteRegisterRes
	(*ReadFIFOQueueReq)(nil),                          // 33: bridgemodbus.ReadFIFOQueueReq
	(*ReadFIFOQueueRes)(nil),                          // 34: bridgemodbus.ReadFIFOQueueRes
	(*ReadDeviceIdentificationReq)(nil),               // 35: bridgemodbus.ReadDeviceIdentificationReq
	(*ReadDeviceIdentificationRes)(nil),               // 36: bridgemodbus.ReadDeviceIdentificationRes
	(*ReadDeviceIdentificationSpecificObjectReq)(nil), // 37: bridgemodbus.ReadDeviceIdentificationSpecificObjectReq
	(*ReadDeviceIdentificationSpecificObjectRes)(nil), // 38: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes
	nil, // 39: bridgemodbus.ReadDeviceIdentificationRes.ResultsEntry
	nil, // 40: bridgemodbus.ReadDeviceIdentificationRes.HexResultsEntry
	nil, // 41: bridgemodbus.ReadDeviceIdentificationRes.SemanticResultsEntry
	nil, // 42: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.ResultsEntry
	nil, // 43: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.HexResultsEntry
	nil, // 44: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.SemanticResultsEntry
}
var file_bridgemodbus_proto_depIdxs = []int32{
	2,  // 0: bridgemodbus.PageListConfigRes.cfg:type_name -> bridgemodbus.PbModbusConfig
	2,  // 1: bridgemodbus.GetConfigByCodeRes.cfg:type_name -> bridgemodbus.PbModbusConfig
	2,  // 2: bridgemodbus.BatchGetConfigByCodeRes.cfg:type_name -> bridgemodbus.PbModbusConfig
	39, // 3: bridgemodbus.ReadDeviceIdentificationRes.results:type_name -> bridgemodbus.ReadDeviceIdentificationRes.ResultsEntry
	40, // 4: bridgemodbus.ReadDeviceIdentificationRes.hexResults:type_name -> bridgemodbus.ReadDeviceIdentificationRes.HexResultsEntry
	41, // 5: bridgemodbus.ReadDeviceIdentificationRes.semanticResults:type_name -> bridgemodbus.ReadDeviceIdentificationRes.SemanticResultsEntry
	42, // 6: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.results:type_name -> bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.ResultsEntry
	43, // 7: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.hexResults:type_name -> bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.HexResultsEntry
	44, // 8: bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.semanticResults:type_name -> bridgemodbus.ReadDeviceIdentificationSpecificObjectRes.SemanticResultsEntry
	0,  // 9: bridgemodbus.BridgeModbus.Ping:input_type -> bridgemodbus.Req
	3,  // 10: bridgemodbus.BridgeModbus.SaveConfig:input_type -> bridgemodbus.SaveConfigReq
	5,  // 11: bridgemodbus.BridgeModbus.DeleteConfig:input_type -> bridgemodbus.DeleteConfigReq
	7,  // 12: bridgemodbus.BridgeModbus.PageListConfig:input_type -> bridgemodbus.PageListConfigReq
	9,  // 13: bridgemodbus.BridgeModbus.GetConfigByCode:input_type -> bridgemodbus.GetConfigByCodeReq
	11, // 14: bridgemodbus.BridgeModbus.BatchGetConfigByCode:input_type -> bridgemodbus.BatchGetConfigByCodeReq
	13, // 15: bridgemodbus.BridgeModbus.ReadCoils:input_type -> bridgemodbus.ReadCoilsReq
	15, // 16: bridgemodbus.BridgeModbus.ReadDiscreteInputs:input_type -> bridgemodbus.ReadDiscreteInputsReq
	17, // 17: bridgemodbus.BridgeModbus.WriteSingleCoil:input_type -> bridgemodbus.WriteSingleCoilReq
	19, // 18: bridgemodbus.BridgeModbus.WriteMultipleCoils:input_type -> bridgemodbus.WriteMultipleCoilsReq
	21, // 19: bridgemodbus.BridgeModbus.ReadInputRegisters:input_type -> bridgemodbus.ReadInputRegistersReq
	23, // 20: bridgemodbus.BridgeModbus.ReadHoldingRegisters:input_type -> bridgemodbus.ReadHoldingRegistersReq
	25, // 21: bridgemodbus.BridgeModbus.WriteSingleRegister:input_type -> bridgemodbus.WriteSingleRegisterReq
	27, // 22: bridgemodbus.BridgeModbus.WriteMultipleRegisters:input_type -> bridgemodbus.WriteMultipleRegistersReq
	29, // 23: bridgemodbus.BridgeModbus.ReadWriteMultipleRegisters:input_type -> bridgemodbus.ReadWriteMultipleRegistersReq
	31, // 24: bridgemodbus.BridgeModbus.MaskWriteRegister:input_type -> bridgemodbus.MaskWriteRegisterReq
	33, // 25: bridgemodbus.BridgeModbus.ReadFIFOQueue:input_type -> bridgemodbus.ReadFIFOQueueReq
	35, // 26: bridgemodbus.BridgeModbus.ReadDeviceIdentification:input_type -> bridgemodbus.ReadDeviceIdentificationReq
	37, // 27: bridgemodbus.BridgeModbus.ReadDeviceIdentificationSpecificObject:input_type -> bridgemodbus.ReadDeviceIdentificationSpecificObjectReq
	1,  // 28: bridgemodbus.BridgeModbus.Ping:output_type -> bridgemodbus.Res
	4,  // 29: bridgemodbus.BridgeModbus.SaveConfig:output_type -> bridgemodbus.SaveConfigRes
	6,  // 30: bridgemodbus.BridgeModbus.DeleteConfig:output_type -> bridgemodbus.DeleteConfigRes
	8,  // 31: bridgemodbus.BridgeModbus.PageListConfig:output_type -> bridgemodbus.PageListConfigRes
	10, // 32: bridgemodbus.BridgeModbus.GetConfigByCode:output_type -> bridgemodbus.GetConfigByCodeRes
	12, // 33: bridgemodbus.BridgeModbus.BatchGetConfigByCode:output_type -> bridgemodbus.BatchGetConfigByCodeRes
	14, // 34: bridgemodbus.BridgeModbus.ReadCoils:output_type -> bridgemodbus.ReadCoilsRes
	16, // 35: bridgemodbus.BridgeModbus.ReadDiscreteInputs:output_type -> bridgemodbus.ReadDiscreteInputsRes
	18, // 36: bridgemodbus.BridgeModbus.WriteSingleCoil:output_type -> bridgemodbus.WriteSingleCoilRes
	20, // 37: bridgemodbus.BridgeModbus.WriteMultipleCoils:output_type -> bridgemodbus.WriteMultipleCoilsRes
	22, // 38: bridgemodbus.BridgeModbus.ReadInputRegisters:output_type -> bridgemodbus.ReadInputRegistersRes
	24, // 39: bridgemodbus.BridgeModbus.ReadHoldingRegisters:output_type -> bridgemodbus.ReadHoldingRegistersRes
	26, // 40: bridgemodbus.BridgeModbus.WriteSingleRegister:output_type -> bridgemodbus.WriteSingleRegisterRes
	28, // 41: bridgemodbus.BridgeModbus.WriteMultipleRegisters:output_type -> bridgemodbus.WriteMultipleRegistersRes
	30, // 42: bridgemodbus.BridgeModbus.ReadWriteMultipleRegisters:output_type -> bridgemodbus.ReadWriteMultipleRegistersRes
	32, // 43: bridgemodbus.BridgeModbus.MaskWriteRegister:output_type -> bridgemodbus.MaskWriteRegisterRes
	34, // 44: bridgemodbus.BridgeModbus.ReadFIFOQueue:output_type -> bridgemodbus.ReadFIFOQueueRes
	36, // 45: bridgemodbus.BridgeModbus.ReadDeviceIdentification:output_type -> bridgemodbus.ReadDeviceIdentificationRes
	38, // 46: bridgemodbus.BridgeModbus.ReadDeviceIdentificationSpecificObject:output_type -> bridgemodbus.ReadDeviceIdentificationSpecificObjectRes
	28, // [28:47] is the sub-list for method output_type
	9,  // [9:28] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_bridgemodbus_proto_init() }
func file_bridgemodbus_proto_init() {
	if File_bridgemodbus_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bridgemodbus_proto_rawDesc), len(file_bridgemodbus_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bridgemodbus_proto_goTypes,
		DependencyIndexes: file_bridgemodbus_proto_depIdxs,
		MessageInfos:      file_bridgemodbus_proto_msgTypes,
	}.Build()
	File_bridgemodbus_proto = out.File
	file_bridgemodbus_proto_goTypes = nil
	file_bridgemodbus_proto_depIdxs = nil
}
