syntax = "proto3";

package bridgemodbus;
option go_package = "./bridgemodbus";
option java_multiple_files = true;
option java_package = "com.github.bridgemodbus.grpc";
option java_outer_classname = "BridgeModbusProto";

// Modbus 协议桥接服务
service BridgeModbus {
  rpc Ping(Req) returns (Res);

  // -------------------- Bit Access --------------------

  // 读取线圈状态 (Function Code 0x01)
  rpc ReadCoils(ReadCoilsReq) returns (ReadCoilsRes);

  // 读取离散输入状态 (Function Code 0x02)
  rpc ReadDiscreteInputs(ReadDiscreteInputsReq) returns (ReadDiscreteInputsRes);

  // 写单个线圈 (Function Code 0x05)
  rpc WriteSingleCoil(WriteSingleCoilReq) returns (WriteSingleCoilRes);

  // 写多个线圈 (Function Code 0x0F)
  rpc WriteMultipleCoils(WriteMultipleCoilsReq) returns (WriteMultipleCoilsRes);

  // -------------------- 16-bit Register Access --------------------

  // 读取输入寄存器 (Function Code 0x04)
  rpc ReadInputRegisters(ReadInputRegistersReq) returns (ReadInputRegistersRes);

  // 读取保持寄存器 (Function Code 0x03)
  rpc ReadHoldingRegisters(ReadHoldingRegistersReq) returns (ReadHoldingRegistersRes);

  // 写单个保持寄存器 (Function Code 0x06)
  rpc WriteSingleRegister(WriteSingleRegisterReq) returns (WriteSingleRegisterRes);

  // 写多个保持寄存器 (Function Code 0x10)
  rpc WriteMultipleRegisters(WriteMultipleRegistersReq) returns (WriteMultipleRegistersRes);

  // 读写多个保持寄存器 (Function Code 0x17)
  rpc ReadWriteMultipleRegisters(ReadWriteMultipleRegistersReq) returns (ReadWriteMultipleRegistersRes);

  // 屏蔽写保持寄存器 (Function Code 0x16)
  rpc MaskWriteRegister(MaskWriteRegisterReq) returns (MaskWriteRegisterRes);

  // 读取 FIFO 队列 (Function Code 0x18)
  rpc ReadFIFOQueue(ReadFIFOQueueReq) returns (ReadFIFOQueueRes);

  // -------------------- Device Identification --------------------

  // 读取设备标识 (Function Code 0x2B / 0x0E)
  rpc ReadDeviceIdentification(ReadDeviceIdentificationReq) returns (ReadDeviceIdentificationRes);
}

// -------------------- 通用请求/响应 --------------------

message Req {
  string ping = 1; // 健康检查请求内容
}

message Res {
  string pong = 1; // 健康检查返回内容
}

// -------------------- 请求与响应定义 --------------------

// -------------------- Bit Access --------------------

message ReadCoilsReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 起始线圈地址
  uint32 quantity = 3;  // 读取数量（1–2000）
}
message ReadCoilsRes {
  bytes results = 1;    // 按位表示的线圈状态（bit0 对应起始地址）
  repeated bool values = 2;  // 每个元素对应一个线圈状态
}

message ReadDiscreteInputsReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 起始离散输入地址
  uint32 quantity = 3;  // 读取数量（1–2000）
}
message ReadDiscreteInputsRes {
  bytes results = 1;    // 按位表示的离散输入状态
  repeated bool values = 2;  // 每个元素对应一个离散输入
}

message WriteSingleCoilReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 线圈地址
  uint32 value = 3;     // 写入值：0x0000=OFF, 0xFF00=ON
}
message WriteSingleCoilRes {
  bytes results = 1;    // 回显写入后的线圈值
}

message WriteMultipleCoilsReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 起始线圈地址
  uint32 quantity = 3;  // 写入数量
  bytes values = 4;     // 每 bit 对应一个线圈状态，0=OFF，1=ON
}
message WriteMultipleCoilsRes {
  bytes results = 1;    // 回显写入的数量
}

// -------------------- 16-bit Register Access --------------------

message ReadInputRegistersReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 起始寄存器地址
  uint32 quantity = 3;  // 读取数量（1–125）
}
message ReadInputRegistersRes {
  bytes results = 1;    // 输入寄存器数据，每寄存器 2 字节，高字节在前
  repeated string values = 2; // 每个寄存器值按 16 进制字符串返回，例如 "0xFF01"
}

message ReadHoldingRegistersReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 起始寄存器地址
  uint32 quantity = 3;  // 读取数量（1–125）
}
message ReadHoldingRegistersRes {
  bytes results = 1;    // 保持寄存器数据，每寄存器 2 字节
  repeated string values = 2; // 每个寄存器值按 16 进制字符串返回，例如 "0xFF01"
}

message WriteSingleRegisterReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 寄存器地址
  uint32 value = 3;     // 写入的 16-bit 值
}
message WriteSingleRegisterRes {
  bytes results = 1;    // 回显写入后的寄存器值
}

message WriteMultipleRegistersReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 起始寄存器地址
  uint32 quantity = 3;  // 写入数量
  bytes values = 4;     // 按寄存器顺序的字节数组，每寄存器 2 字节
}
message WriteMultipleRegistersRes {
  bytes results = 1;    // 回显写入的数量
}

message ReadWriteMultipleRegistersReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 readAddress = 2;     // 读取起始寄存器地址
  uint32 readQuantity = 3;    // 读取数量
  uint32 writeAddress = 4;    // 写入起始寄存器地址
  uint32 writeQuantity = 5;   // 写入数量
  bytes values = 6;            // 写入数据，每寄存器 2 字节
}
message ReadWriteMultipleRegistersRes {
  bytes results = 1;           // 读取到的寄存器数据
}

message MaskWriteRegisterReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // 寄存器地址
  uint32 andMask = 3;  // AND 掩码
  uint32 orMask = 4;   // OR 掩码
}
message MaskWriteRegisterRes {
  bytes results = 1;    // 回显写入后的寄存器值
}

message ReadFIFOQueueReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 address = 2;   // FIFO 队列寄存器地址
}
message ReadFIFOQueueRes {
  bytes results = 1;    // FIFO 队列内容
}

// -------------------- Device Identification --------------------

message ReadDeviceIdentificationReq {
  string modbusCode = 1; // Modbus配置唯一编码 空-默认文件配置 否则为自定义配置
  uint32 readDeviceIdCode = 2; // 读取类型：0x01=基本, 0x02=常规, 0x03=扩展
}
message ReadDeviceIdentificationRes {
  // 原始对象 ID 映射 (十进制)，方便协议调试/直接对应 Modbus 规范
  map<uint32, string> results = 1;
  // 对象 ID 用十六进制字符串表示，例如 "0x00", "0x01"
  map<string, string> hexResults = 2;
  // 语义化映射 (如果对象 ID 有标准含义，就用名字；否则 fallback 成 Object_0xXX)
  map<string, string> semanticResults = 3;
}