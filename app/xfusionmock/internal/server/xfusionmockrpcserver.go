// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: xfusionmock.proto

package server

import (
	"context"

	"zero-service/app/xfusionmock/internal/logic"
	"zero-service/app/xfusionmock/internal/svc"
	"zero-service/app/xfusionmock/xfusionmock"
)

type XFusionMockRpcServer struct {
	svcCtx *svc.ServiceContext
	xfusionmock.UnimplementedXFusionMockRpcServer
}

func NewXFusionMockRpcServer(svcCtx *svc.ServiceContext) *XFusionMockRpcServer {
	return &XFusionMockRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *XFusionMockRpcServer) Ping(ctx context.Context, in *xfusionmock.Req) (*xfusionmock.Res, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *XFusionMockRpcServer) PushTest(ctx context.Context, in *xfusionmock.ReqPushTest) (*xfusionmock.ResPushTest, error) {
	l := logic.NewPushTestLogic(ctx, s.svcCtx)
	return l.PushTest(in)
}

func (s *XFusionMockRpcServer) PushPoint(ctx context.Context, in *xfusionmock.ReqPushPoint) (*xfusionmock.ResPushPoint, error) {
	l := logic.NewPushPointLogic(ctx, s.svcCtx)
	return l.PushPoint(in)
}

func (s *XFusionMockRpcServer) PushAlarm(ctx context.Context, in *xfusionmock.ReqPushAlarm) (*xfusionmock.ResPushAlarm, error) {
	l := logic.NewPushAlarmLogic(ctx, s.svcCtx)
	return l.PushAlarm(in)
}

func (s *XFusionMockRpcServer) PushEvent(ctx context.Context, in *xfusionmock.ReqPushEvent) (*xfusionmock.ResPushEvent, error) {
	l := logic.NewPushEventLogic(ctx, s.svcCtx)
	return l.PushEvent(in)
}

func (s *XFusionMockRpcServer) PushTerminalBind(ctx context.Context, in *xfusionmock.ReqPushTerminalBind) (*xfusionmock.ResPushTerminalBind, error) {
	l := logic.NewPushTerminalBindLogic(ctx, s.svcCtx)
	return l.PushTerminalBind(in)
}
