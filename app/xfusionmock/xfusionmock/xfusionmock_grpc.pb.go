// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: xfusionmock.proto

package xfusionmock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XFusionMockRpc_Ping_FullMethodName             = "/xfusionmock.XFusionMockRpc/Ping"
	XFusionMockRpc_PingV1_FullMethodName           = "/xfusionmock.XFusionMockRpc/PingV1"
	XFusionMockRpc_PushTest_FullMethodName         = "/xfusionmock.XFusionMockRpc/PushTest"
	XFusionMockRpc_PushPoint_FullMethodName        = "/xfusionmock.XFusionMockRpc/PushPoint"
	XFusionMockRpc_PushAlarm_FullMethodName        = "/xfusionmock.XFusionMockRpc/PushAlarm"
	XFusionMockRpc_PushEvent_FullMethodName        = "/xfusionmock.XFusionMockRpc/PushEvent"
	XFusionMockRpc_PushTerminalBind_FullMethodName = "/xfusionmock.XFusionMockRpc/PushTerminalBind"
)

// XFusionMockRpcClient is the client API for XFusionMockRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XFusionMockRpcClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	PingV1(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	PushTest(ctx context.Context, in *ReqPushTest, opts ...grpc.CallOption) (*ResPushTest, error)
	PushPoint(ctx context.Context, in *ReqPushPoint, opts ...grpc.CallOption) (*ResPushPoint, error)
	PushAlarm(ctx context.Context, in *ReqPushAlarm, opts ...grpc.CallOption) (*ResPushAlarm, error)
	PushEvent(ctx context.Context, in *ReqPushEvent, opts ...grpc.CallOption) (*ResPushEvent, error)
	PushTerminalBind(ctx context.Context, in *ReqPushTerminalBind, opts ...grpc.CallOption) (*ResPushTerminalBind, error)
}

type xFusionMockRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewXFusionMockRpcClient(cc grpc.ClientConnInterface) XFusionMockRpcClient {
	return &xFusionMockRpcClient{cc}
}

func (c *xFusionMockRpcClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, XFusionMockRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xFusionMockRpcClient) PingV1(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, XFusionMockRpc_PingV1_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xFusionMockRpcClient) PushTest(ctx context.Context, in *ReqPushTest, opts ...grpc.CallOption) (*ResPushTest, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPushTest)
	err := c.cc.Invoke(ctx, XFusionMockRpc_PushTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xFusionMockRpcClient) PushPoint(ctx context.Context, in *ReqPushPoint, opts ...grpc.CallOption) (*ResPushPoint, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPushPoint)
	err := c.cc.Invoke(ctx, XFusionMockRpc_PushPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xFusionMockRpcClient) PushAlarm(ctx context.Context, in *ReqPushAlarm, opts ...grpc.CallOption) (*ResPushAlarm, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPushAlarm)
	err := c.cc.Invoke(ctx, XFusionMockRpc_PushAlarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xFusionMockRpcClient) PushEvent(ctx context.Context, in *ReqPushEvent, opts ...grpc.CallOption) (*ResPushEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPushEvent)
	err := c.cc.Invoke(ctx, XFusionMockRpc_PushEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xFusionMockRpcClient) PushTerminalBind(ctx context.Context, in *ReqPushTerminalBind, opts ...grpc.CallOption) (*ResPushTerminalBind, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResPushTerminalBind)
	err := c.cc.Invoke(ctx, XFusionMockRpc_PushTerminalBind_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XFusionMockRpcServer is the server API for XFusionMockRpc service.
// All implementations must embed UnimplementedXFusionMockRpcServer
// for forward compatibility.
type XFusionMockRpcServer interface {
	Ping(context.Context, *Req) (*Res, error)
	PingV1(context.Context, *Req) (*Res, error)
	PushTest(context.Context, *ReqPushTest) (*ResPushTest, error)
	PushPoint(context.Context, *ReqPushPoint) (*ResPushPoint, error)
	PushAlarm(context.Context, *ReqPushAlarm) (*ResPushAlarm, error)
	PushEvent(context.Context, *ReqPushEvent) (*ResPushEvent, error)
	PushTerminalBind(context.Context, *ReqPushTerminalBind) (*ResPushTerminalBind, error)
	mustEmbedUnimplementedXFusionMockRpcServer()
}

// UnimplementedXFusionMockRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXFusionMockRpcServer struct{}

func (UnimplementedXFusionMockRpcServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedXFusionMockRpcServer) PingV1(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingV1 not implemented")
}
func (UnimplementedXFusionMockRpcServer) PushTest(context.Context, *ReqPushTest) (*ResPushTest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTest not implemented")
}
func (UnimplementedXFusionMockRpcServer) PushPoint(context.Context, *ReqPushPoint) (*ResPushPoint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushPoint not implemented")
}
func (UnimplementedXFusionMockRpcServer) PushAlarm(context.Context, *ReqPushAlarm) (*ResPushAlarm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushAlarm not implemented")
}
func (UnimplementedXFusionMockRpcServer) PushEvent(context.Context, *ReqPushEvent) (*ResPushEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvent not implemented")
}
func (UnimplementedXFusionMockRpcServer) PushTerminalBind(context.Context, *ReqPushTerminalBind) (*ResPushTerminalBind, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTerminalBind not implemented")
}
func (UnimplementedXFusionMockRpcServer) mustEmbedUnimplementedXFusionMockRpcServer() {}
func (UnimplementedXFusionMockRpcServer) testEmbeddedByValue()                        {}

// UnsafeXFusionMockRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XFusionMockRpcServer will
// result in compilation errors.
type UnsafeXFusionMockRpcServer interface {
	mustEmbedUnimplementedXFusionMockRpcServer()
}

func RegisterXFusionMockRpcServer(s grpc.ServiceRegistrar, srv XFusionMockRpcServer) {
	// If the following call pancis, it indicates UnimplementedXFusionMockRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XFusionMockRpc_ServiceDesc, srv)
}

func _XFusionMockRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _XFusionMockRpc_PingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).PingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_PingV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).PingV1(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _XFusionMockRpc_PushTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPushTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).PushTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_PushTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).PushTest(ctx, req.(*ReqPushTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XFusionMockRpc_PushPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPushPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).PushPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_PushPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).PushPoint(ctx, req.(*ReqPushPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _XFusionMockRpc_PushAlarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPushAlarm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).PushAlarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_PushAlarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).PushAlarm(ctx, req.(*ReqPushAlarm))
	}
	return interceptor(ctx, in, info, handler)
}

func _XFusionMockRpc_PushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPushEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).PushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_PushEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).PushEvent(ctx, req.(*ReqPushEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _XFusionMockRpc_PushTerminalBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPushTerminalBind)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XFusionMockRpcServer).PushTerminalBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XFusionMockRpc_PushTerminalBind_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XFusionMockRpcServer).PushTerminalBind(ctx, req.(*ReqPushTerminalBind))
	}
	return interceptor(ctx, in, info, handler)
}

// XFusionMockRpc_ServiceDesc is the grpc.ServiceDesc for XFusionMockRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XFusionMockRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xfusionmock.XFusionMockRpc",
	HandlerType: (*XFusionMockRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _XFusionMockRpc_Ping_Handler,
		},
		{
			MethodName: "PingV1",
			Handler:    _XFusionMockRpc_PingV1_Handler,
		},
		{
			MethodName: "PushTest",
			Handler:    _XFusionMockRpc_PushTest_Handler,
		},
		{
			MethodName: "PushPoint",
			Handler:    _XFusionMockRpc_PushPoint_Handler,
		},
		{
			MethodName: "PushAlarm",
			Handler:    _XFusionMockRpc_PushAlarm_Handler,
		},
		{
			MethodName: "PushEvent",
			Handler:    _XFusionMockRpc_PushEvent_Handler,
		},
		{
			MethodName: "PushTerminalBind",
			Handler:    _XFusionMockRpc_PushTerminalBind_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xfusionmock.proto",
}
