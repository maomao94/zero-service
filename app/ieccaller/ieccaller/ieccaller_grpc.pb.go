// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ieccaller.proto

package ieccaller

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IecCaller_Ping_FullMethodName                        = "/ieccaller.IecCaller/Ping"
	IecCaller_SendTestCmd_FullMethodName                 = "/ieccaller.IecCaller/SendTestCmd"
	IecCaller_SendReadCmd_FullMethodName                 = "/ieccaller.IecCaller/SendReadCmd"
	IecCaller_SendInterrogationCmd_FullMethodName        = "/ieccaller.IecCaller/SendInterrogationCmd"
	IecCaller_SendCounterInterrogationCmd_FullMethodName = "/ieccaller.IecCaller/SendCounterInterrogationCmd"
)

// IecCallerClient is the client API for IecCaller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IecCallerClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 发送带时标的测试命令
	SendTestCmd(ctx context.Context, in *SendTestCmdReq, opts ...grpc.CallOption) (*SendTestCmdRes, error)
	// 发起读命令
	SendReadCmd(ctx context.Context, in *SendReadCmdReq, opts ...grpc.CallOption) (*SendReadCmdRes, error)
	// 发送总召唤
	SendInterrogationCmd(ctx context.Context, in *SendInterrogationCmdReq, opts ...grpc.CallOption) (*SendInterrogationCmdRes, error)
	// 累积量召唤
	SendCounterInterrogationCmd(ctx context.Context, in *SendCounterInterrogationCmdReq, opts ...grpc.CallOption) (*SendCounterInterrogationCmdRes, error)
}

type iecCallerClient struct {
	cc grpc.ClientConnInterface
}

func NewIecCallerClient(cc grpc.ClientConnInterface) IecCallerClient {
	return &iecCallerClient{cc}
}

func (c *iecCallerClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, IecCaller_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iecCallerClient) SendTestCmd(ctx context.Context, in *SendTestCmdReq, opts ...grpc.CallOption) (*SendTestCmdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTestCmdRes)
	err := c.cc.Invoke(ctx, IecCaller_SendTestCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iecCallerClient) SendReadCmd(ctx context.Context, in *SendReadCmdReq, opts ...grpc.CallOption) (*SendReadCmdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendReadCmdRes)
	err := c.cc.Invoke(ctx, IecCaller_SendReadCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iecCallerClient) SendInterrogationCmd(ctx context.Context, in *SendInterrogationCmdReq, opts ...grpc.CallOption) (*SendInterrogationCmdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendInterrogationCmdRes)
	err := c.cc.Invoke(ctx, IecCaller_SendInterrogationCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iecCallerClient) SendCounterInterrogationCmd(ctx context.Context, in *SendCounterInterrogationCmdReq, opts ...grpc.CallOption) (*SendCounterInterrogationCmdRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCounterInterrogationCmdRes)
	err := c.cc.Invoke(ctx, IecCaller_SendCounterInterrogationCmd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IecCallerServer is the server API for IecCaller service.
// All implementations must embed UnimplementedIecCallerServer
// for forward compatibility.
type IecCallerServer interface {
	Ping(context.Context, *Req) (*Res, error)
	// 发送带时标的测试命令
	SendTestCmd(context.Context, *SendTestCmdReq) (*SendTestCmdRes, error)
	// 发起读命令
	SendReadCmd(context.Context, *SendReadCmdReq) (*SendReadCmdRes, error)
	// 发送总召唤
	SendInterrogationCmd(context.Context, *SendInterrogationCmdReq) (*SendInterrogationCmdRes, error)
	// 累积量召唤
	SendCounterInterrogationCmd(context.Context, *SendCounterInterrogationCmdReq) (*SendCounterInterrogationCmdRes, error)
	mustEmbedUnimplementedIecCallerServer()
}

// UnimplementedIecCallerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIecCallerServer struct{}

func (UnimplementedIecCallerServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedIecCallerServer) SendTestCmd(context.Context, *SendTestCmdReq) (*SendTestCmdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTestCmd not implemented")
}
func (UnimplementedIecCallerServer) SendReadCmd(context.Context, *SendReadCmdReq) (*SendReadCmdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReadCmd not implemented")
}
func (UnimplementedIecCallerServer) SendInterrogationCmd(context.Context, *SendInterrogationCmdReq) (*SendInterrogationCmdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInterrogationCmd not implemented")
}
func (UnimplementedIecCallerServer) SendCounterInterrogationCmd(context.Context, *SendCounterInterrogationCmdReq) (*SendCounterInterrogationCmdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCounterInterrogationCmd not implemented")
}
func (UnimplementedIecCallerServer) mustEmbedUnimplementedIecCallerServer() {}
func (UnimplementedIecCallerServer) testEmbeddedByValue()                   {}

// UnsafeIecCallerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IecCallerServer will
// result in compilation errors.
type UnsafeIecCallerServer interface {
	mustEmbedUnimplementedIecCallerServer()
}

func RegisterIecCallerServer(s grpc.ServiceRegistrar, srv IecCallerServer) {
	// If the following call pancis, it indicates UnimplementedIecCallerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IecCaller_ServiceDesc, srv)
}

func _IecCaller_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IecCallerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IecCaller_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IecCallerServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _IecCaller_SendTestCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTestCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IecCallerServer).SendTestCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IecCaller_SendTestCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IecCallerServer).SendTestCmd(ctx, req.(*SendTestCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IecCaller_SendReadCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReadCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IecCallerServer).SendReadCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IecCaller_SendReadCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IecCallerServer).SendReadCmd(ctx, req.(*SendReadCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IecCaller_SendInterrogationCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInterrogationCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IecCallerServer).SendInterrogationCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IecCaller_SendInterrogationCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IecCallerServer).SendInterrogationCmd(ctx, req.(*SendInterrogationCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IecCaller_SendCounterInterrogationCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCounterInterrogationCmdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IecCallerServer).SendCounterInterrogationCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IecCaller_SendCounterInterrogationCmd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IecCallerServer).SendCounterInterrogationCmd(ctx, req.(*SendCounterInterrogationCmdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IecCaller_ServiceDesc is the grpc.ServiceDesc for IecCaller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IecCaller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ieccaller.IecCaller",
	HandlerType: (*IecCallerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _IecCaller_Ping_Handler,
		},
		{
			MethodName: "SendTestCmd",
			Handler:    _IecCaller_SendTestCmd_Handler,
		},
		{
			MethodName: "SendReadCmd",
			Handler:    _IecCaller_SendReadCmd_Handler,
		},
		{
			MethodName: "SendInterrogationCmd",
			Handler:    _IecCaller_SendInterrogationCmd_Handler,
		},
		{
			MethodName: "SendCounterInterrogationCmd",
			Handler:    _IecCaller_SendCounterInterrogationCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ieccaller.proto",
}
