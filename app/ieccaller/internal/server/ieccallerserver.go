// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: ieccaller.proto

package server

import (
	"context"

	"zero-service/app/ieccaller/ieccaller"
	"zero-service/app/ieccaller/internal/logic"
	"zero-service/app/ieccaller/internal/svc"
)

type IecCallerServer struct {
	svcCtx *svc.ServiceContext
	ieccaller.UnimplementedIecCallerServer
}

func NewIecCallerServer(svcCtx *svc.ServiceContext) *IecCallerServer {
	return &IecCallerServer{
		svcCtx: svcCtx,
	}
}

func (s *IecCallerServer) Ping(ctx context.Context, in *ieccaller.Req) (*ieccaller.Res, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

// 发送带时标的测试命令
func (s *IecCallerServer) SendTestCmd(ctx context.Context, in *ieccaller.SendTestCmdReq) (*ieccaller.SendTestCmdRes, error) {
	l := logic.NewSendTestCmdLogic(ctx, s.svcCtx)
	return l.SendTestCmd(in)
}

// 发起读命令
func (s *IecCallerServer) SendReadCmd(ctx context.Context, in *ieccaller.SendReadCmdReq) (*ieccaller.SendReadCmdRes, error) {
	l := logic.NewSendReadCmdLogic(ctx, s.svcCtx)
	return l.SendReadCmd(in)
}

// 发送总召唤
func (s *IecCallerServer) SendInterrogationCmd(ctx context.Context, in *ieccaller.SendInterrogationCmdReq) (*ieccaller.SendInterrogationCmdRes, error) {
	l := logic.NewSendInterrogationCmdLogic(ctx, s.svcCtx)
	return l.SendInterrogationCmd(in)
}

// 累积量召唤
func (s *IecCallerServer) SendCounterInterrogationCmd(ctx context.Context, in *ieccaller.SendCounterInterrogationCmdReq) (*ieccaller.SendCounterInterrogationCmdRes, error) {
	l := logic.NewSendCounterInterrogationCmdLogic(ctx, s.svcCtx)
	return l.SendCounterInterrogationCmd(in)
}
