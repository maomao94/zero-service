// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: bridgemqtt.proto

package bridgemqtt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          string                 `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"` // 健康检查请求内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Req) Reset() {
	*x = Req{}
	mi := &file_bridgemqtt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemqtt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_bridgemqtt_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"` // 健康检查返回内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Res) Reset() {
	*x = Res{}
	mi := &file_bridgemqtt_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemqtt_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_bridgemqtt_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type PublishReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 暂不考虑 session 区分下发
	// 发布消息的 topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// 发布消息的 payload
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	// 是否开启 trace, 默认-false, true-开启 otel 链路追踪, 包装整个请求
	IsTrace       bool `protobuf:"varint,3,opt,name=isTrace,proto3" json:"isTrace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishReq) Reset() {
	*x = PublishReq{}
	mi := &file_bridgemqtt_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishReq) ProtoMessage() {}

func (x *PublishReq) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemqtt_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishReq.ProtoReflect.Descriptor instead.
func (*PublishReq) Descriptor() ([]byte, []int) {
	return file_bridgemqtt_proto_rawDescGZIP(), []int{2}
}

func (x *PublishReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishReq) GetIsTrace() bool {
	if x != nil {
		return x.IsTrace
	}
	return false
}

type PublishRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRes) Reset() {
	*x = PublishRes{}
	mi := &file_bridgemqtt_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRes) ProtoMessage() {}

func (x *PublishRes) ProtoReflect() protoreflect.Message {
	mi := &file_bridgemqtt_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRes.ProtoReflect.Descriptor instead.
func (*PublishRes) Descriptor() ([]byte, []int) {
	return file_bridgemqtt_proto_rawDescGZIP(), []int{3}
}

var File_bridgemqtt_proto protoreflect.FileDescriptor

const file_bridgemqtt_proto_rawDesc = "" +
	"\n" +
	"\x10bridgemqtt.proto\x12\n" +
	"bridgemqtt\"\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04ping\x18\x01 \x01(\tR\x04ping\"\x19\n" +
	"\x03Res\x12\x12\n" +
	"\x04pong\x18\x01 \x01(\tR\x04pong\"V\n" +
	"\n" +
	"PublishReq\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12\x18\n" +
	"\aisTrace\x18\x03 \x01(\bR\aisTrace\"\f\n" +
	"\n" +
	"PublishRes2q\n" +
	"\n" +
	"BridgeMqtt\x12(\n" +
	"\x04Ping\x12\x0f.bridgemqtt.Req\x1a\x0f.bridgemqtt.Res\x129\n" +
	"\aPublish\x12\x16.bridgemqtt.PublishReq\x1a\x16.bridgemqtt.PublishResB=\n" +
	"\x1acom.github.bridgemqtt.grpcB\x0fBridgeMqttProtoP\x01Z\f./bridgemqttb\x06proto3"

var (
	file_bridgemqtt_proto_rawDescOnce sync.Once
	file_bridgemqtt_proto_rawDescData []byte
)

func file_bridgemqtt_proto_rawDescGZIP() []byte {
	file_bridgemqtt_proto_rawDescOnce.Do(func() {
		file_bridgemqtt_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bridgemqtt_proto_rawDesc), len(file_bridgemqtt_proto_rawDesc)))
	})
	return file_bridgemqtt_proto_rawDescData
}

var file_bridgemqtt_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bridgemqtt_proto_goTypes = []any{
	(*Req)(nil),        // 0: bridgemqtt.Req
	(*Res)(nil),        // 1: bridgemqtt.Res
	(*PublishReq)(nil), // 2: bridgemqtt.PublishReq
	(*PublishRes)(nil), // 3: bridgemqtt.PublishRes
}
var file_bridgemqtt_proto_depIdxs = []int32{
	0, // 0: bridgemqtt.BridgeMqtt.Ping:input_type -> bridgemqtt.Req
	2, // 1: bridgemqtt.BridgeMqtt.Publish:input_type -> bridgemqtt.PublishReq
	1, // 2: bridgemqtt.BridgeMqtt.Ping:output_type -> bridgemqtt.Res
	3, // 3: bridgemqtt.BridgeMqtt.Publish:output_type -> bridgemqtt.PublishRes
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bridgemqtt_proto_init() }
func file_bridgemqtt_proto_init() {
	if File_bridgemqtt_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bridgemqtt_proto_rawDesc), len(file_bridgemqtt_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bridgemqtt_proto_goTypes,
		DependencyIndexes: file_bridgemqtt_proto_depIdxs,
		MessageInfos:      file_bridgemqtt_proto_msgTypes,
	}.Build()
	File_bridgemqtt_proto = out.File
	file_bridgemqtt_proto_goTypes = nil
	file_bridgemqtt_proto_depIdxs = nil
}
