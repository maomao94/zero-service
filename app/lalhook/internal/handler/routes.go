// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"
	"time"

	api "zero-service/app/lalhook/internal/handler/api"
	webhook "zero-service/app/lalhook/internal/handler/webhook"
	"zero-service/app/lalhook/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				// 查询 TS 文件列表（按时间区间）
				Method:  http.MethodPost,
				Path:    "/ts/list",
				Handler: api.ListTsFilesHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/api"),
		rest.WithTimeout(7200000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				// HLS 生成每个 ts 分片文件时
				Method:  http.MethodPost,
				Path:    "/onHlsMakeTs",
				Handler: webhook.OnHlsMakeTsHandler(serverCtx),
			},
			{
				// 别人推流到当前节点
				Method:  http.MethodPost,
				Path:    "/onPubStart",
				Handler: webhook.OnPubStartHandler(serverCtx),
			},
			{
				// 推流停止
				Method:  http.MethodPost,
				Path:    "/onPubStop",
				Handler: webhook.OnPubStopHandler(serverCtx),
			},
			{
				// 回源拉流成功
				Method:  http.MethodPost,
				Path:    "/onRelayPullStart",
				Handler: webhook.OnRelayPullStartHandler(serverCtx),
			},
			{
				// 回源拉流停止
				Method:  http.MethodPost,
				Path:    "/onRelayPullStop",
				Handler: webhook.OnRelayPullStopHandler(serverCtx),
			},
			{
				// 收到 rtmp connect message 信令
				Method:  http.MethodPost,
				Path:    "/onRtmpConnect",
				Handler: webhook.OnRtmpConnectHandler(serverCtx),
			},
			{
				// 服务启动时
				Method:  http.MethodPost,
				Path:    "/onServerStart",
				Handler: webhook.OnServerStartHandler(serverCtx),
			},
			{
				// 别人从当前节点拉流
				Method:  http.MethodPost,
				Path:    "/onSubStart",
				Handler: webhook.OnSubStartHandler(serverCtx),
			},
			{
				// 拉流停止
				Method:  http.MethodPost,
				Path:    "/onSubStop",
				Handler: webhook.OnSubStopHandler(serverCtx),
			},
			{
				// 定时汇报所有group、session的信息
				Method:  http.MethodPost,
				Path:    "/onUpdate",
				Handler: webhook.OnUpdateHandler(serverCtx),
			},
		},
		rest.WithPrefix("/v1/hook"),
		rest.WithTimeout(7200000*time.Millisecond),
	)
}
