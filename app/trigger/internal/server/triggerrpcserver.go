// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: trigger.proto

package server

import (
	"context"

	"zero-service/app/trigger/internal/logic"
	"zero-service/app/trigger/internal/svc"
	"zero-service/app/trigger/trigger"
)

type TriggerRpcServer struct {
	svcCtx *svc.ServiceContext
	trigger.UnimplementedTriggerRpcServer
}

func NewTriggerRpcServer(svcCtx *svc.ServiceContext) *TriggerRpcServer {
	return &TriggerRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *TriggerRpcServer) Ping(ctx context.Context, in *trigger.Req) (*trigger.Res, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

// 发送 http-post-json 回调
func (s *TriggerRpcServer) SendTrigger(ctx context.Context, in *trigger.SendTriggerReq) (*trigger.SendTriggerRes, error) {
	l := logic.NewSendTriggerLogic(ctx, s.svcCtx)
	return l.SendTrigger(in)
}

// 发送 grpc proto字节码 回调
func (s *TriggerRpcServer) SendProtoTrigger(ctx context.Context, in *trigger.SendProtoTriggerReq) (*trigger.SendProtoTriggerRes, error) {
	l := logic.NewSendProtoTriggerLogic(ctx, s.svcCtx)
	return l.SendProtoTrigger(in)
}

// 归档任务
func (s *TriggerRpcServer) ArchiveTask(ctx context.Context, in *trigger.ArchiveTaskReq) (*trigger.ArchiveTaskRes, error) {
	l := logic.NewArchiveTaskLogic(ctx, s.svcCtx)
	return l.ArchiveTask(in)
}

// 删除任务
func (s *TriggerRpcServer) DeleteTask(ctx context.Context, in *trigger.DeleteTaskReq) (*trigger.DeleteTaskRes, error) {
	l := logic.NewDeleteTaskLogic(ctx, s.svcCtx)
	return l.DeleteTask(in)
}

// 获取任务
func (s *TriggerRpcServer) GetTaskInfo(ctx context.Context, in *trigger.GetTaskInfoReq) (*trigger.GetTaskInfoRes, error) {
	l := logic.NewGetTaskInfoLogic(ctx, s.svcCtx)
	return l.GetTaskInfo(in)
}

// 获取任务历史统计
func (s *TriggerRpcServer) HistoricalStats(ctx context.Context, in *trigger.HistoricalStatsReq) (*trigger.HistoricalStatsRes, error) {
	l := logic.NewHistoricalStatsLogic(ctx, s.svcCtx)
	return l.HistoricalStats(in)
}

// 获取活跃任务列表
func (s *TriggerRpcServer) ListActiveTasks(ctx context.Context, in *trigger.ListActiveTasksReq) (*trigger.ListActiveTasksRes, error) {
	l := logic.NewListActiveTasksLogic(ctx, s.svcCtx)
	return l.ListActiveTasks(in)
}

// 获取待处理任务列表
func (s *TriggerRpcServer) ListPendingTasks(ctx context.Context, in *trigger.ListPendingTasksReq) (*trigger.ListPendingTasksRes, error) {
	l := logic.NewListPendingTasksLogic(ctx, s.svcCtx)
	return l.ListPendingTasks(in)
}

// 获取聚合任务列表
func (s *TriggerRpcServer) ListAggregatingTasks(ctx context.Context, in *trigger.ListAggregatingTasksReq) (*trigger.ListAggregatingTasksRes, error) {
	l := logic.NewListAggregatingTasksLogic(ctx, s.svcCtx)
	return l.ListAggregatingTasks(in)
}

// 获取预定任务列表
func (s *TriggerRpcServer) ListScheduledTasks(ctx context.Context, in *trigger.ListScheduledTasksReq) (*trigger.ListScheduledTasksRes, error) {
	l := logic.NewListScheduledTasksLogic(ctx, s.svcCtx)
	return l.ListScheduledTasks(in)
}

// 获取重试任务列表
func (s *TriggerRpcServer) ListRetryTasks(ctx context.Context, in *trigger.ListRetryTasksReq) (*trigger.ListRetryTasksRes, error) {
	l := logic.NewListRetryTasksLogic(ctx, s.svcCtx)
	return l.ListRetryTasks(in)
}

// 获取已归档任务列表
func (s *TriggerRpcServer) ListArchivedTasks(ctx context.Context, in *trigger.ListArchivedTasksReq) (*trigger.ListArchivedTasksRes, error) {
	l := logic.NewListArchivedTasksLogic(ctx, s.svcCtx)
	return l.ListArchivedTasks(in)
}

// 获取已完成任务列表
func (s *TriggerRpcServer) ListCompletedTasks(ctx context.Context, in *trigger.ListCompletedTasksReq) (*trigger.ListCompletedTasksRes, error) {
	l := logic.NewListCompletedTasksLogic(ctx, s.svcCtx)
	return l.ListCompletedTasks(in)
}
