// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: trigger.proto

package trigger

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PbTaskInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID is the identifier of the task.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Queue is the name of the queue in which the task belongs.
	Queue string `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	// Type is the type name of the task.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Payload is the payload data of the task.
	Payload string `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// State indicates the task state.
	State int32 `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"` // 建议配合 enum TaskState 使用
	// MaxRetry is the maximum number of times the task can be retried.
	MaxRetry int32 `protobuf:"varint,6,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	// Retried is the number of times the task has retried so far.
	Retried int32 `protobuf:"varint,7,opt,name=retried,proto3" json:"retried,omitempty"`
	// LastErr is the error message from the last failure.
	LastErr string `protobuf:"bytes,8,opt,name=lastErr,proto3" json:"lastErr,omitempty"`
	// LastFailedAt is the time of the last failure.
	LastFailedAt string `protobuf:"bytes,9,opt,name=lastFailedAt,proto3" json:"lastFailedAt,omitempty"`
	// Timeout is the duration the task can be processed before being retried.
	Timeout int64 `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"` // 使用秒为单位的 duration
	// Deadline is the deadline for the task.
	Deadline string `protobuf:"bytes,11,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Group is the name of the group in which the task belongs.
	Group string `protobuf:"bytes,12,opt,name=group,proto3" json:"group,omitempty"`
	// NextProcessAt is the time the task is scheduled to be processed.
	NextProcessAt string `protobuf:"bytes,13,opt,name=nextProcessAt,proto3" json:"nextProcessAt,omitempty"`
	// IsOrphaned indicates if the task is left in active state with no worker.
	IsOrphaned bool `protobuf:"varint,14,opt,name=isOrphaned,proto3" json:"isOrphaned,omitempty"`
	// Retention is duration of the retention period.
	Retention int64 `protobuf:"varint,15,opt,name=retention,proto3" json:"retention,omitempty"` // 使用秒为单位的 duration
	// CompletedAt is the time when the task is processed successfully.
	CompletedAt string `protobuf:"bytes,16,opt,name=completedAt,proto3" json:"completedAt,omitempty"` // 或 google.protobuf.Timestamp
	// Result holds the result data associated with the task.
	Result        string `protobuf:"bytes,17,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PbTaskInfo) Reset() {
	*x = PbTaskInfo{}
	mi := &file_trigger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PbTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbTaskInfo) ProtoMessage() {}

func (x *PbTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbTaskInfo.ProtoReflect.Descriptor instead.
func (*PbTaskInfo) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{0}
}

func (x *PbTaskInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PbTaskInfo) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *PbTaskInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PbTaskInfo) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *PbTaskInfo) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PbTaskInfo) GetMaxRetry() int32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *PbTaskInfo) GetRetried() int32 {
	if x != nil {
		return x.Retried
	}
	return 0
}

func (x *PbTaskInfo) GetLastErr() string {
	if x != nil {
		return x.LastErr
	}
	return ""
}

func (x *PbTaskInfo) GetLastFailedAt() string {
	if x != nil {
		return x.LastFailedAt
	}
	return ""
}

func (x *PbTaskInfo) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *PbTaskInfo) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *PbTaskInfo) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *PbTaskInfo) GetNextProcessAt() string {
	if x != nil {
		return x.NextProcessAt
	}
	return ""
}

func (x *PbTaskInfo) GetIsOrphaned() bool {
	if x != nil {
		return x.IsOrphaned
	}
	return false
}

func (x *PbTaskInfo) GetRetention() int64 {
	if x != nil {
		return x.Retention
	}
	return 0
}

func (x *PbTaskInfo) GetCompletedAt() string {
	if x != nil {
		return x.CompletedAt
	}
	return ""
}

func (x *PbTaskInfo) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          string                 `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Req) Reset() {
	*x = Req{}
	mi := &file_trigger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{1}
}

func (x *Req) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Res) Reset() {
	*x = Res{}
	mi := &file_trigger_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{2}
}

func (x *Res) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type SendTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 秒
	ProcessIn uint64 `protobuf:"varint,1,opt,name=processIn,proto3" json:"processIn,omitempty"`
	// 触发时间 2019-01-01 00:00:00 二选一 该字段存在时，优先使用
	TriggerTime string `protobuf:"bytes,2,opt,name=triggerTime,proto3" json:"triggerTime,omitempty"`
	// POST json提交 不可为空
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// 重试次数 可为空 默认: 25
	MaxRetry int64 `protobuf:"varint,4,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	// 唯一消息 id 可为空
	MsgId string `protobuf:"bytes,5,opt,name=msgId,proto3" json:"msgId,omitempty"`
	// 触发内容，可为空
	Body          string `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTriggerReq) Reset() {
	*x = SendTriggerReq{}
	mi := &file_trigger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTriggerReq) ProtoMessage() {}

func (x *SendTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTriggerReq.ProtoReflect.Descriptor instead.
func (*SendTriggerReq) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{3}
}

func (x *SendTriggerReq) GetProcessIn() uint64 {
	if x != nil {
		return x.ProcessIn
	}
	return 0
}

func (x *SendTriggerReq) GetTriggerTime() string {
	if x != nil {
		return x.TriggerTime
	}
	return ""
}

func (x *SendTriggerReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SendTriggerReq) GetMaxRetry() int64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *SendTriggerReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *SendTriggerReq) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type SendTriggerRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 唯一追踪 id
	TraceId string `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// Queue is the name of the queue in which the task belongs.
	Queue string `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	// ID is the identifier of the task.
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendTriggerRes) Reset() {
	*x = SendTriggerRes{}
	mi := &file_trigger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendTriggerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTriggerRes) ProtoMessage() {}

func (x *SendTriggerRes) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTriggerRes.ProtoReflect.Descriptor instead.
func (*SendTriggerRes) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{4}
}

func (x *SendTriggerRes) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *SendTriggerRes) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *SendTriggerRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SendProtoTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 秒
	ProcessIn uint64 `protobuf:"varint,1,opt,name=processIn,proto3" json:"processIn,omitempty"`
	// 触发时间 2019-01-01 00:00:00 二选一 该字段存在时，优先使用
	TriggerTime string `protobuf:"bytes,2,opt,name=triggerTime,proto3" json:"triggerTime,omitempty"`
	// 最大重试次数（可为空，默认 25 次）
	//
	// 任务失败后会重试，重试间隔采用指数退避策略，时间间隔随重试次数成倍增长：
	//   - 第 1 次重试间隔约 1 秒，
	//   - 第 2 次重试间隔约 2 秒，
	//   - 第 3 次重试间隔约 4 秒，
	//   - 依此类推，间隔时间不断翻倍，
	//   - 重试间隔最高封顶为 30 分钟（1800 秒）。
	//
	// 具体时间区间示例：
	//
	//	1 次重试：约 1 秒
	//	5 次重试：约 16 秒
	//	7 次重试：约 64 秒（约 1 分钟）
	//	10 次重试：约 8 分钟
	//	12 次及以上重试：间隔固定为 30 分钟
	//
	// 总之，重试间隔从秒级开始，逐步增长到分钟、十几分钟，最终封顶 30 分钟。
	MaxRetry int64 `protobuf:"varint,3,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	// 唯一消息 id 可为空
	MsgId string `protobuf:"bytes,4,opt,name=msgId,proto3" json:"msgId,omitempty"`
	// 服务名称 不可为空 示例 127.0.0.1:8080 direct:///127.0.0.1:8080,127.0.0.2:8080 nacos://nacos:nacos@127.0.0.1:8848/service?namespaceid=public&timeout=5000s
	GrpcServer string `protobuf:"bytes,5,opt,name=grpcServer,proto3" json:"grpcServer,omitempty"`
	// 方法 不可为空
	Method string `protobuf:"bytes,6,opt,name=method,proto3" json:"method,omitempty"`
	// pb 字节数据 不可为空
	Payload []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	// 请求超时时间 单位: 毫秒 可为空
	RequestTimeout int64 `protobuf:"varint,8,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SendProtoTriggerReq) Reset() {
	*x = SendProtoTriggerReq{}
	mi := &file_trigger_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendProtoTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendProtoTriggerReq) ProtoMessage() {}

func (x *SendProtoTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendProtoTriggerReq.ProtoReflect.Descriptor instead.
func (*SendProtoTriggerReq) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{5}
}

func (x *SendProtoTriggerReq) GetProcessIn() uint64 {
	if x != nil {
		return x.ProcessIn
	}
	return 0
}

func (x *SendProtoTriggerReq) GetTriggerTime() string {
	if x != nil {
		return x.TriggerTime
	}
	return ""
}

func (x *SendProtoTriggerReq) GetMaxRetry() int64 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *SendProtoTriggerReq) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *SendProtoTriggerReq) GetGrpcServer() string {
	if x != nil {
		return x.GrpcServer
	}
	return ""
}

func (x *SendProtoTriggerReq) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SendProtoTriggerReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SendProtoTriggerReq) GetRequestTimeout() int64 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

type SendProtoTriggerRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 唯一追踪 id
	TraceId string `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	// Queue is the name of the queue in which the task belongs.
	Queue string `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	// ID is the identifier of the task.
	Id            string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendProtoTriggerRes) Reset() {
	*x = SendProtoTriggerRes{}
	mi := &file_trigger_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendProtoTriggerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendProtoTriggerRes) ProtoMessage() {}

func (x *SendProtoTriggerRes) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendProtoTriggerRes.ProtoReflect.Descriptor instead.
func (*SendProtoTriggerRes) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{6}
}

func (x *SendProtoTriggerRes) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *SendProtoTriggerRes) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *SendProtoTriggerRes) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArchiveTaskReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queue is the name of the queue in which the task belongs.
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"` // 默认 critical
	// ID is the identifier of the task.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveTaskReq) Reset() {
	*x = ArchiveTaskReq{}
	mi := &file_trigger_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveTaskReq) ProtoMessage() {}

func (x *ArchiveTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveTaskReq.ProtoReflect.Descriptor instead.
func (*ArchiveTaskReq) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{7}
}

func (x *ArchiveTaskReq) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *ArchiveTaskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ArchiveTaskRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveTaskRes) Reset() {
	*x = ArchiveTaskRes{}
	mi := &file_trigger_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveTaskRes) ProtoMessage() {}

func (x *ArchiveTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveTaskRes.ProtoReflect.Descriptor instead.
func (*ArchiveTaskRes) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{8}
}

type DeleteTaskReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queue is the name of the queue in which the task belongs.
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"` // 默认 critical
	// ID is the identifier of the task.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskReq) Reset() {
	*x = DeleteTaskReq{}
	mi := &file_trigger_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskReq) ProtoMessage() {}

func (x *DeleteTaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskReq.ProtoReflect.Descriptor instead.
func (*DeleteTaskReq) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTaskReq) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *DeleteTaskReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTaskRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTaskRes) Reset() {
	*x = DeleteTaskRes{}
	mi := &file_trigger_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTaskRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTaskRes) ProtoMessage() {}

func (x *DeleteTaskRes) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTaskRes.ProtoReflect.Descriptor instead.
func (*DeleteTaskRes) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{10}
}

type GetTaskInfoReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Queue is the name of the queue in which the task belongs.
	Queue string `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"` // 默认 critical
	// ID is the identifier of the task.
	Id            string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInfoReq) Reset() {
	*x = GetTaskInfoReq{}
	mi := &file_trigger_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInfoReq) ProtoMessage() {}

func (x *GetTaskInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInfoReq.ProtoReflect.Descriptor instead.
func (*GetTaskInfoReq) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{11}
}

func (x *GetTaskInfoReq) GetQueue() string {
	if x != nil {
		return x.Queue
	}
	return ""
}

func (x *GetTaskInfoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTaskInfoRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskInfo      *PbTaskInfo            `protobuf:"bytes,1,opt,name=taskInfo,proto3" json:"taskInfo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskInfoRes) Reset() {
	*x = GetTaskInfoRes{}
	mi := &file_trigger_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskInfoRes) ProtoMessage() {}

func (x *GetTaskInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_trigger_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskInfoRes.ProtoReflect.Descriptor instead.
func (*GetTaskInfoRes) Descriptor() ([]byte, []int) {
	return file_trigger_proto_rawDescGZIP(), []int{12}
}

func (x *GetTaskInfoRes) GetTaskInfo() *PbTaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

var File_trigger_proto protoreflect.FileDescriptor

const file_trigger_proto_rawDesc = "" +
	"\n" +
	"\rtrigger.proto\x12\atrigger\x1a\x17validate/validate.proto\"\xd4\x03\n" +
	"\n" +
	"PbTaskInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05queue\x18\x02 \x01(\tR\x05queue\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x18\n" +
	"\apayload\x18\x04 \x01(\tR\apayload\x12\x14\n" +
	"\x05state\x18\x05 \x01(\x05R\x05state\x12\x1a\n" +
	"\bmaxRetry\x18\x06 \x01(\x05R\bmaxRetry\x12\x18\n" +
	"\aretried\x18\a \x01(\x05R\aretried\x12\x18\n" +
	"\alastErr\x18\b \x01(\tR\alastErr\x12\"\n" +
	"\flastFailedAt\x18\t \x01(\tR\flastFailedAt\x12\x18\n" +
	"\atimeout\x18\n" +
	" \x01(\x03R\atimeout\x12\x1a\n" +
	"\bdeadline\x18\v \x01(\tR\bdeadline\x12\x14\n" +
	"\x05group\x18\f \x01(\tR\x05group\x12$\n" +
	"\rnextProcessAt\x18\r \x01(\tR\rnextProcessAt\x12\x1e\n" +
	"\n" +
	"isOrphaned\x18\x0e \x01(\bR\n" +
	"isOrphaned\x12\x1c\n" +
	"\tretention\x18\x0f \x01(\x03R\tretention\x12 \n" +
	"\vcompletedAt\x18\x10 \x01(\tR\vcompletedAt\x12\x16\n" +
	"\x06result\x18\x11 \x01(\tR\x06result\"\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04ping\x18\x01 \x01(\tR\x04ping\"\x19\n" +
	"\x03Res\x12\x12\n" +
	"\x04pong\x18\x01 \x01(\tR\x04pong\"\xa8\x01\n" +
	"\x0eSendTriggerReq\x12\x1c\n" +
	"\tprocessIn\x18\x01 \x01(\x04R\tprocessIn\x12 \n" +
	"\vtriggerTime\x18\x02 \x01(\tR\vtriggerTime\x12\x10\n" +
	"\x03url\x18\x03 \x01(\tR\x03url\x12\x1a\n" +
	"\bmaxRetry\x18\x04 \x01(\x03R\bmaxRetry\x12\x14\n" +
	"\x05msgId\x18\x05 \x01(\tR\x05msgId\x12\x12\n" +
	"\x04body\x18\x06 \x01(\tR\x04body\"P\n" +
	"\x0eSendTriggerRes\x12\x18\n" +
	"\atraceId\x18\x01 \x01(\tR\atraceId\x12\x14\n" +
	"\x05queue\x18\x02 \x01(\tR\x05queue\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"\x81\x02\n" +
	"\x13SendProtoTriggerReq\x12\x1c\n" +
	"\tprocessIn\x18\x01 \x01(\x04R\tprocessIn\x12 \n" +
	"\vtriggerTime\x18\x02 \x01(\tR\vtriggerTime\x12\x1a\n" +
	"\bmaxRetry\x18\x03 \x01(\x03R\bmaxRetry\x12\x14\n" +
	"\x05msgId\x18\x04 \x01(\tR\x05msgId\x12\x1e\n" +
	"\n" +
	"grpcServer\x18\x05 \x01(\tR\n" +
	"grpcServer\x12\x16\n" +
	"\x06method\x18\x06 \x01(\tR\x06method\x12\x18\n" +
	"\apayload\x18\a \x01(\fR\apayload\x12&\n" +
	"\x0erequestTimeout\x18\b \x01(\x03R\x0erequestTimeout\"U\n" +
	"\x13SendProtoTriggerRes\x12\x18\n" +
	"\atraceId\x18\x01 \x01(\tR\atraceId\x12\x14\n" +
	"\x05queue\x18\x02 \x01(\tR\x05queue\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\"H\n" +
	"\x0eArchiveTaskReq\x12\x1d\n" +
	"\x05queue\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05queue\x12\x17\n" +
	"\x02id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x02id\"\x10\n" +
	"\x0eArchiveTaskRes\"G\n" +
	"\rDeleteTaskReq\x12\x1d\n" +
	"\x05queue\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05queue\x12\x17\n" +
	"\x02id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x02id\"\x0f\n" +
	"\rDeleteTaskRes\"H\n" +
	"\x0eGetTaskInfoReq\x12\x1d\n" +
	"\x05queue\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x05queue\x12\x17\n" +
	"\x02id\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x02id\"A\n" +
	"\x0eGetTaskInfoRes\x12/\n" +
	"\btaskInfo\x18\x01 \x01(\v2\x13.trigger.PbTaskInfoR\btaskInfo2\x81\x03\n" +
	"\n" +
	"TriggerRpc\x12\"\n" +
	"\x04Ping\x12\f.trigger.Req\x1a\f.trigger.Res\x12?\n" +
	"\vSendTrigger\x12\x17.trigger.SendTriggerReq\x1a\x17.trigger.SendTriggerRes\x12N\n" +
	"\x10SendProtoTrigger\x12\x1c.trigger.SendProtoTriggerReq\x1a\x1c.trigger.SendProtoTriggerRes\x12?\n" +
	"\vArchiveTask\x12\x17.trigger.ArchiveTaskReq\x1a\x17.trigger.ArchiveTaskRes\x12<\n" +
	"\n" +
	"DeleteTask\x12\x16.trigger.DeleteTaskReq\x1a\x16.trigger.DeleteTaskRes\x12?\n" +
	"\vGetTaskInfo\x12\x17.trigger.GetTaskInfoReq\x1a\x17.trigger.GetTaskInfoResB4\n" +
	"\x17com.github.trigger.grpcB\fTriggerProtoP\x01Z\t./triggerb\x06proto3"

var (
	file_trigger_proto_rawDescOnce sync.Once
	file_trigger_proto_rawDescData []byte
)

func file_trigger_proto_rawDescGZIP() []byte {
	file_trigger_proto_rawDescOnce.Do(func() {
		file_trigger_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_trigger_proto_rawDesc), len(file_trigger_proto_rawDesc)))
	})
	return file_trigger_proto_rawDescData
}

var file_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_trigger_proto_goTypes = []any{
	(*PbTaskInfo)(nil),          // 0: trigger.PbTaskInfo
	(*Req)(nil),                 // 1: trigger.Req
	(*Res)(nil),                 // 2: trigger.Res
	(*SendTriggerReq)(nil),      // 3: trigger.SendTriggerReq
	(*SendTriggerRes)(nil),      // 4: trigger.SendTriggerRes
	(*SendProtoTriggerReq)(nil), // 5: trigger.SendProtoTriggerReq
	(*SendProtoTriggerRes)(nil), // 6: trigger.SendProtoTriggerRes
	(*ArchiveTaskReq)(nil),      // 7: trigger.ArchiveTaskReq
	(*ArchiveTaskRes)(nil),      // 8: trigger.ArchiveTaskRes
	(*DeleteTaskReq)(nil),       // 9: trigger.DeleteTaskReq
	(*DeleteTaskRes)(nil),       // 10: trigger.DeleteTaskRes
	(*GetTaskInfoReq)(nil),      // 11: trigger.GetTaskInfoReq
	(*GetTaskInfoRes)(nil),      // 12: trigger.GetTaskInfoRes
}
var file_trigger_proto_depIdxs = []int32{
	0,  // 0: trigger.GetTaskInfoRes.taskInfo:type_name -> trigger.PbTaskInfo
	1,  // 1: trigger.TriggerRpc.Ping:input_type -> trigger.Req
	3,  // 2: trigger.TriggerRpc.SendTrigger:input_type -> trigger.SendTriggerReq
	5,  // 3: trigger.TriggerRpc.SendProtoTrigger:input_type -> trigger.SendProtoTriggerReq
	7,  // 4: trigger.TriggerRpc.ArchiveTask:input_type -> trigger.ArchiveTaskReq
	9,  // 5: trigger.TriggerRpc.DeleteTask:input_type -> trigger.DeleteTaskReq
	11, // 6: trigger.TriggerRpc.GetTaskInfo:input_type -> trigger.GetTaskInfoReq
	2,  // 7: trigger.TriggerRpc.Ping:output_type -> trigger.Res
	4,  // 8: trigger.TriggerRpc.SendTrigger:output_type -> trigger.SendTriggerRes
	6,  // 9: trigger.TriggerRpc.SendProtoTrigger:output_type -> trigger.SendProtoTriggerRes
	8,  // 10: trigger.TriggerRpc.ArchiveTask:output_type -> trigger.ArchiveTaskRes
	10, // 11: trigger.TriggerRpc.DeleteTask:output_type -> trigger.DeleteTaskRes
	12, // 12: trigger.TriggerRpc.GetTaskInfo:output_type -> trigger.GetTaskInfoRes
	7,  // [7:13] is the sub-list for method output_type
	1,  // [1:7] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_trigger_proto_init() }
func file_trigger_proto_init() {
	if File_trigger_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_trigger_proto_rawDesc), len(file_trigger_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trigger_proto_goTypes,
		DependencyIndexes: file_trigger_proto_depIdxs,
		MessageInfos:      file_trigger_proto_msgTypes,
	}.Build()
	File_trigger_proto = out.File
	file_trigger_proto_goTypes = nil
	file_trigger_proto_depIdxs = nil
}
