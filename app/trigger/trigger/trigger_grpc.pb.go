// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: trigger.proto

package trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TriggerRpc_Ping_FullMethodName                 = "/trigger.TriggerRpc/Ping"
	TriggerRpc_SendTrigger_FullMethodName          = "/trigger.TriggerRpc/SendTrigger"
	TriggerRpc_SendProtoTrigger_FullMethodName     = "/trigger.TriggerRpc/SendProtoTrigger"
	TriggerRpc_ArchiveTask_FullMethodName          = "/trigger.TriggerRpc/ArchiveTask"
	TriggerRpc_DeleteTask_FullMethodName           = "/trigger.TriggerRpc/DeleteTask"
	TriggerRpc_GetTaskInfo_FullMethodName          = "/trigger.TriggerRpc/GetTaskInfo"
	TriggerRpc_HistoricalStats_FullMethodName      = "/trigger.TriggerRpc/HistoricalStats"
	TriggerRpc_ListActiveTasks_FullMethodName      = "/trigger.TriggerRpc/ListActiveTasks"
	TriggerRpc_ListPendingTasks_FullMethodName     = "/trigger.TriggerRpc/ListPendingTasks"
	TriggerRpc_ListAggregatingTasks_FullMethodName = "/trigger.TriggerRpc/ListAggregatingTasks"
	TriggerRpc_ListScheduledTasks_FullMethodName   = "/trigger.TriggerRpc/ListScheduledTasks"
	TriggerRpc_ListRetryTasks_FullMethodName       = "/trigger.TriggerRpc/ListRetryTasks"
	TriggerRpc_ListArchivedTasks_FullMethodName    = "/trigger.TriggerRpc/ListArchivedTasks"
	TriggerRpc_ListCompletedTasks_FullMethodName   = "/trigger.TriggerRpc/ListCompletedTasks"
)

// TriggerRpcClient is the client API for TriggerRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerRpcClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 发送 http-post-json 回调
	SendTrigger(ctx context.Context, in *SendTriggerReq, opts ...grpc.CallOption) (*SendTriggerRes, error)
	// 发送 grpc proto字节码 回调
	SendProtoTrigger(ctx context.Context, in *SendProtoTriggerReq, opts ...grpc.CallOption) (*SendProtoTriggerRes, error)
	// 归档任务
	ArchiveTask(ctx context.Context, in *ArchiveTaskReq, opts ...grpc.CallOption) (*ArchiveTaskRes, error)
	// 删除任务
	DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskRes, error)
	// 获取任务
	GetTaskInfo(ctx context.Context, in *GetTaskInfoReq, opts ...grpc.CallOption) (*GetTaskInfoRes, error)
	// 获取任务历史统计
	HistoricalStats(ctx context.Context, in *HistoricalStatsReq, opts ...grpc.CallOption) (*HistoricalStatsRes, error)
	// 获取活跃任务列表
	ListActiveTasks(ctx context.Context, in *ListActiveTasksReq, opts ...grpc.CallOption) (*ListActiveTasksRes, error)
	// 获取待处理任务列表
	ListPendingTasks(ctx context.Context, in *ListPendingTasksReq, opts ...grpc.CallOption) (*ListPendingTasksRes, error)
	// 获取聚合任务列表
	ListAggregatingTasks(ctx context.Context, in *ListAggregatingTasksReq, opts ...grpc.CallOption) (*ListAggregatingTasksRes, error)
	// 获取预定任务列表
	ListScheduledTasks(ctx context.Context, in *ListScheduledTasksReq, opts ...grpc.CallOption) (*ListScheduledTasksRes, error)
	// 获取重试任务列表
	ListRetryTasks(ctx context.Context, in *ListRetryTasksReq, opts ...grpc.CallOption) (*ListRetryTasksRes, error)
	// 获取已归档任务列表
	ListArchivedTasks(ctx context.Context, in *ListArchivedTasksReq, opts ...grpc.CallOption) (*ListArchivedTasksRes, error)
	// 获取已完成任务列表
	ListCompletedTasks(ctx context.Context, in *ListCompletedTasksReq, opts ...grpc.CallOption) (*ListCompletedTasksRes, error)
}

type triggerRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerRpcClient(cc grpc.ClientConnInterface) TriggerRpcClient {
	return &triggerRpcClient{cc}
}

func (c *triggerRpcClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, TriggerRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) SendTrigger(ctx context.Context, in *SendTriggerReq, opts ...grpc.CallOption) (*SendTriggerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendTriggerRes)
	err := c.cc.Invoke(ctx, TriggerRpc_SendTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) SendProtoTrigger(ctx context.Context, in *SendProtoTriggerReq, opts ...grpc.CallOption) (*SendProtoTriggerRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendProtoTriggerRes)
	err := c.cc.Invoke(ctx, TriggerRpc_SendProtoTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ArchiveTask(ctx context.Context, in *ArchiveTaskReq, opts ...grpc.CallOption) (*ArchiveTaskRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveTaskRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ArchiveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) DeleteTask(ctx context.Context, in *DeleteTaskReq, opts ...grpc.CallOption) (*DeleteTaskRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskRes)
	err := c.cc.Invoke(ctx, TriggerRpc_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) GetTaskInfo(ctx context.Context, in *GetTaskInfoReq, opts ...grpc.CallOption) (*GetTaskInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskInfoRes)
	err := c.cc.Invoke(ctx, TriggerRpc_GetTaskInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) HistoricalStats(ctx context.Context, in *HistoricalStatsReq, opts ...grpc.CallOption) (*HistoricalStatsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoricalStatsRes)
	err := c.cc.Invoke(ctx, TriggerRpc_HistoricalStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListActiveTasks(ctx context.Context, in *ListActiveTasksReq, opts ...grpc.CallOption) (*ListActiveTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActiveTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListActiveTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListPendingTasks(ctx context.Context, in *ListPendingTasksReq, opts ...grpc.CallOption) (*ListPendingTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPendingTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListPendingTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListAggregatingTasks(ctx context.Context, in *ListAggregatingTasksReq, opts ...grpc.CallOption) (*ListAggregatingTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAggregatingTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListAggregatingTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListScheduledTasks(ctx context.Context, in *ListScheduledTasksReq, opts ...grpc.CallOption) (*ListScheduledTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScheduledTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListScheduledTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListRetryTasks(ctx context.Context, in *ListRetryTasksReq, opts ...grpc.CallOption) (*ListRetryTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRetryTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListRetryTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListArchivedTasks(ctx context.Context, in *ListArchivedTasksReq, opts ...grpc.CallOption) (*ListArchivedTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListArchivedTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListArchivedTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) ListCompletedTasks(ctx context.Context, in *ListCompletedTasksReq, opts ...grpc.CallOption) (*ListCompletedTasksRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompletedTasksRes)
	err := c.cc.Invoke(ctx, TriggerRpc_ListCompletedTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerRpcServer is the server API for TriggerRpc service.
// All implementations must embed UnimplementedTriggerRpcServer
// for forward compatibility.
type TriggerRpcServer interface {
	Ping(context.Context, *Req) (*Res, error)
	// 发送 http-post-json 回调
	SendTrigger(context.Context, *SendTriggerReq) (*SendTriggerRes, error)
	// 发送 grpc proto字节码 回调
	SendProtoTrigger(context.Context, *SendProtoTriggerReq) (*SendProtoTriggerRes, error)
	// 归档任务
	ArchiveTask(context.Context, *ArchiveTaskReq) (*ArchiveTaskRes, error)
	// 删除任务
	DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskRes, error)
	// 获取任务
	GetTaskInfo(context.Context, *GetTaskInfoReq) (*GetTaskInfoRes, error)
	// 获取任务历史统计
	HistoricalStats(context.Context, *HistoricalStatsReq) (*HistoricalStatsRes, error)
	// 获取活跃任务列表
	ListActiveTasks(context.Context, *ListActiveTasksReq) (*ListActiveTasksRes, error)
	// 获取待处理任务列表
	ListPendingTasks(context.Context, *ListPendingTasksReq) (*ListPendingTasksRes, error)
	// 获取聚合任务列表
	ListAggregatingTasks(context.Context, *ListAggregatingTasksReq) (*ListAggregatingTasksRes, error)
	// 获取预定任务列表
	ListScheduledTasks(context.Context, *ListScheduledTasksReq) (*ListScheduledTasksRes, error)
	// 获取重试任务列表
	ListRetryTasks(context.Context, *ListRetryTasksReq) (*ListRetryTasksRes, error)
	// 获取已归档任务列表
	ListArchivedTasks(context.Context, *ListArchivedTasksReq) (*ListArchivedTasksRes, error)
	// 获取已完成任务列表
	ListCompletedTasks(context.Context, *ListCompletedTasksReq) (*ListCompletedTasksRes, error)
	mustEmbedUnimplementedTriggerRpcServer()
}

// UnimplementedTriggerRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTriggerRpcServer struct{}

func (UnimplementedTriggerRpcServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTriggerRpcServer) SendTrigger(context.Context, *SendTriggerReq) (*SendTriggerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTrigger not implemented")
}
func (UnimplementedTriggerRpcServer) SendProtoTrigger(context.Context, *SendProtoTriggerReq) (*SendProtoTriggerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProtoTrigger not implemented")
}
func (UnimplementedTriggerRpcServer) ArchiveTask(context.Context, *ArchiveTaskReq) (*ArchiveTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveTask not implemented")
}
func (UnimplementedTriggerRpcServer) DeleteTask(context.Context, *DeleteTaskReq) (*DeleteTaskRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTriggerRpcServer) GetTaskInfo(context.Context, *GetTaskInfoReq) (*GetTaskInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskInfo not implemented")
}
func (UnimplementedTriggerRpcServer) HistoricalStats(context.Context, *HistoricalStatsReq) (*HistoricalStatsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalStats not implemented")
}
func (UnimplementedTriggerRpcServer) ListActiveTasks(context.Context, *ListActiveTasksReq) (*ListActiveTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveTasks not implemented")
}
func (UnimplementedTriggerRpcServer) ListPendingTasks(context.Context, *ListPendingTasksReq) (*ListPendingTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingTasks not implemented")
}
func (UnimplementedTriggerRpcServer) ListAggregatingTasks(context.Context, *ListAggregatingTasksReq) (*ListAggregatingTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAggregatingTasks not implemented")
}
func (UnimplementedTriggerRpcServer) ListScheduledTasks(context.Context, *ListScheduledTasksReq) (*ListScheduledTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScheduledTasks not implemented")
}
func (UnimplementedTriggerRpcServer) ListRetryTasks(context.Context, *ListRetryTasksReq) (*ListRetryTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetryTasks not implemented")
}
func (UnimplementedTriggerRpcServer) ListArchivedTasks(context.Context, *ListArchivedTasksReq) (*ListArchivedTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedTasks not implemented")
}
func (UnimplementedTriggerRpcServer) ListCompletedTasks(context.Context, *ListCompletedTasksReq) (*ListCompletedTasksRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompletedTasks not implemented")
}
func (UnimplementedTriggerRpcServer) mustEmbedUnimplementedTriggerRpcServer() {}
func (UnimplementedTriggerRpcServer) testEmbeddedByValue()                    {}

// UnsafeTriggerRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerRpcServer will
// result in compilation errors.
type UnsafeTriggerRpcServer interface {
	mustEmbedUnimplementedTriggerRpcServer()
}

func RegisterTriggerRpcServer(s grpc.ServiceRegistrar, srv TriggerRpcServer) {
	// If the following call pancis, it indicates UnimplementedTriggerRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TriggerRpc_ServiceDesc, srv)
}

func _TriggerRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_SendTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).SendTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_SendTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).SendTrigger(ctx, req.(*SendTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_SendProtoTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProtoTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).SendProtoTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_SendProtoTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).SendProtoTrigger(ctx, req.(*SendProtoTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ArchiveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ArchiveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ArchiveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ArchiveTask(ctx, req.(*ArchiveTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).DeleteTask(ctx, req.(*DeleteTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_GetTaskInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).GetTaskInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_GetTaskInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).GetTaskInfo(ctx, req.(*GetTaskInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_HistoricalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoricalStatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).HistoricalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_HistoricalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).HistoricalStats(ctx, req.(*HistoricalStatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListActiveTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListActiveTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListActiveTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListActiveTasks(ctx, req.(*ListActiveTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListPendingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListPendingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListPendingTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListPendingTasks(ctx, req.(*ListPendingTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListAggregatingTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAggregatingTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListAggregatingTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListAggregatingTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListAggregatingTasks(ctx, req.(*ListAggregatingTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListScheduledTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScheduledTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListScheduledTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListScheduledTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListScheduledTasks(ctx, req.(*ListScheduledTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListRetryTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetryTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListRetryTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListRetryTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListRetryTasks(ctx, req.(*ListRetryTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListArchivedTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchivedTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListArchivedTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListArchivedTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListArchivedTasks(ctx, req.(*ListArchivedTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_ListCompletedTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompletedTasksReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).ListCompletedTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TriggerRpc_ListCompletedTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).ListCompletedTasks(ctx, req.(*ListCompletedTasksReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerRpc_ServiceDesc is the grpc.ServiceDesc for TriggerRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trigger.TriggerRpc",
	HandlerType: (*TriggerRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TriggerRpc_Ping_Handler,
		},
		{
			MethodName: "SendTrigger",
			Handler:    _TriggerRpc_SendTrigger_Handler,
		},
		{
			MethodName: "SendProtoTrigger",
			Handler:    _TriggerRpc_SendProtoTrigger_Handler,
		},
		{
			MethodName: "ArchiveTask",
			Handler:    _TriggerRpc_ArchiveTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TriggerRpc_DeleteTask_Handler,
		},
		{
			MethodName: "GetTaskInfo",
			Handler:    _TriggerRpc_GetTaskInfo_Handler,
		},
		{
			MethodName: "HistoricalStats",
			Handler:    _TriggerRpc_HistoricalStats_Handler,
		},
		{
			MethodName: "ListActiveTasks",
			Handler:    _TriggerRpc_ListActiveTasks_Handler,
		},
		{
			MethodName: "ListPendingTasks",
			Handler:    _TriggerRpc_ListPendingTasks_Handler,
		},
		{
			MethodName: "ListAggregatingTasks",
			Handler:    _TriggerRpc_ListAggregatingTasks_Handler,
		},
		{
			MethodName: "ListScheduledTasks",
			Handler:    _TriggerRpc_ListScheduledTasks_Handler,
		},
		{
			MethodName: "ListRetryTasks",
			Handler:    _TriggerRpc_ListRetryTasks_Handler,
		},
		{
			MethodName: "ListArchivedTasks",
			Handler:    _TriggerRpc_ListArchivedTasks_Handler,
		},
		{
			MethodName: "ListCompletedTasks",
			Handler:    _TriggerRpc_ListCompletedTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger.proto",
}
