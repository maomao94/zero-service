// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: trigger.proto

package trigger

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TriggerRpcClient is the client API for TriggerRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TriggerRpcClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	SendTrigger(ctx context.Context, in *SendTriggerReq, opts ...grpc.CallOption) (*SendTriggerRes, error)
}

type triggerRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewTriggerRpcClient(cc grpc.ClientConnInterface) TriggerRpcClient {
	return &triggerRpcClient{cc}
}

func (c *triggerRpcClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/trigger.TriggerRpc/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *triggerRpcClient) SendTrigger(ctx context.Context, in *SendTriggerReq, opts ...grpc.CallOption) (*SendTriggerRes, error) {
	out := new(SendTriggerRes)
	err := c.cc.Invoke(ctx, "/trigger.TriggerRpc/SendTrigger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TriggerRpcServer is the server API for TriggerRpc service.
// All implementations must embed UnimplementedTriggerRpcServer
// for forward compatibility
type TriggerRpcServer interface {
	Ping(context.Context, *Req) (*Res, error)
	SendTrigger(context.Context, *SendTriggerReq) (*SendTriggerRes, error)
	mustEmbedUnimplementedTriggerRpcServer()
}

// UnimplementedTriggerRpcServer must be embedded to have forward compatible implementations.
type UnimplementedTriggerRpcServer struct {
}

func (UnimplementedTriggerRpcServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTriggerRpcServer) SendTrigger(context.Context, *SendTriggerReq) (*SendTriggerRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTrigger not implemented")
}
func (UnimplementedTriggerRpcServer) mustEmbedUnimplementedTriggerRpcServer() {}

// UnsafeTriggerRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TriggerRpcServer will
// result in compilation errors.
type UnsafeTriggerRpcServer interface {
	mustEmbedUnimplementedTriggerRpcServer()
}

func RegisterTriggerRpcServer(s grpc.ServiceRegistrar, srv TriggerRpcServer) {
	s.RegisterService(&TriggerRpc_ServiceDesc, srv)
}

func _TriggerRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger.TriggerRpc/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _TriggerRpc_SendTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TriggerRpcServer).SendTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trigger.TriggerRpc/SendTrigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TriggerRpcServer).SendTrigger(ctx, req.(*SendTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TriggerRpc_ServiceDesc is the grpc.ServiceDesc for TriggerRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TriggerRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "trigger.TriggerRpc",
	HandlerType: (*TriggerRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _TriggerRpc_Ping_Handler,
		},
		{
			MethodName: "SendTrigger",
			Handler:    _TriggerRpc_SendTrigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trigger.proto",
}
