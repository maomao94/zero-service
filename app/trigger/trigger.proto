syntax = "proto3";

package trigger;

import "validate/validate.proto";
import "extproto.proto";

option go_package = "./trigger";
option java_multiple_files = true;
option java_package = "com.github.trigger.grpc";
option java_outer_classname = "TriggerProto";


message PbTaskInfo {
  // ID is the identifier of the task.
  string id = 1;
  // Queue is the name of the queue in which the task belongs.
  string queue = 2;
  // Type is the type name of the task.
  string type = 3;
  // Payload is the payload data of the task.
  string payload = 4;
  // State indicates the task state.
  int32 state = 5; // 建议配合 enum TaskState 使用
  // MaxRetry is the maximum number of times the task can be retried.
  int32 maxRetry = 6;
  // Retried is the number of times the task has retried so far.
  int32 retried = 7;
  // LastErr is the error message from the last failure.
  string lastErr = 8;
  // LastFailedAt is the time of the last failure.
  string lastFailedAt = 9;
  // Timeout is the duration the task can be processed before being retried.
  int64 timeout = 10; // 使用秒为单位的 duration
  // Deadline is the deadline for the task.
  string deadline = 11;
  // Group is the name of the group in which the task belongs.
  string group = 12;
  // NextProcessAt is the time the task is scheduled to be processed.
  string nextProcessAt = 13;
  // IsOrphaned indicates if the task is left in active state with no worker.
  bool isOrphaned = 14;
  // Retention is duration of the retention period.
  int64 retention = 15; // 使用秒为单位的 duration
  // CompletedAt is the time when the task is processed successfully.
  string completedAt = 16; // 或 google.protobuf.Timestamp
  // Result holds the result data associated with the task.
  string result = 17;
}

message PbDailyStats  {
  // Name of the queue.
  string queue = 1;
  // Total number of tasks being processed during the given date.
  // The number includes both succeeded and failed tasks.
  int64 processed = 2;
  // Total number of tasks failed to be processed during the given date.
  int64 failed = 3;
  // Date this stats was taken.
  string date = 4;
}

message PbQueueInfo  {
  // Name of the queue.
  string Queue = 1;
  // Total number of bytes that the queue and its tasks require to be stored in redis.
  // It is an approximate memory usage value in bytes since the value is computed by sampling.
  int64 memoryUsage = 2;
  // Latency of the queue, measured by the oldest pending task in the queue.
  string latency = 3;
  // Size is the total number of tasks in the queue.
  // The value is the sum of Pending, Active, Scheduled, Retry, Aggregating and Archived.
  int64 size = 4;
  // Groups is the total number of groups in the queue.
  int64 groups = 5;
  // Number of pending tasks.
  int64 pending = 6;
  // Number of active tasks.
  int64 active = 7;
  // Number of scheduled tasks.
  int64 scheduled = 8;
  // Number of retry tasks.
  int64 retry = 9;
  // Number of archived tasks.
  int64 archived = 10;
  // Number of stored completed tasks.
  int64 completed = 11;
  // Number of aggregating tasks.
  int64 aggregating = 12;
  // Total number of tasks being processed within the given date (counter resets daily).
  // The number includes both succeeded and failed tasks.
  int64 processed = 13;
  // Total number of tasks failed to be processed within the given date (counter resets daily).
  int64 failed = 14;
  // Total number of tasks processed (cumulative).
  int64 processedTotal = 15;
  // Total number of tasks failed (cumulative).
  int64 failedTotal = 16;
  // Paused indicates whether the queue is paused.
  // If true, tasks in the queue will not be processed.
  bool paused = 17;
  // Time when this queue info snapshot was taken.
  string timestamp = 18;
}

message Req {
  string ping = 1;
}

message Res {
  string pong = 1;
}

message SendTriggerReq {
  extproto.CurrentUser currentUser = 100;

  // 秒
  uint64 processIn = 1;
  // 触发时间 2019-01-01 00:00:00 二选一 该字段存在时，优先使用
  string triggerTime = 2;
  // POST json提交 不可为空
  string url = 3;
  // 重试次数 可为空 默认: 25
  int64 maxRetry = 4;
  // 唯一消息 id 可为空
  string msgId = 5;
  // 触发内容，可为空
  string body = 6;
}

message SendTriggerRes {
  // 唯一追踪 id
  string traceId = 1;
  // Queue is the name of the queue in which the task belongs.
  string queue = 2;
  // ID is the identifier of the task.
  string id = 3;
}

message SendProtoTriggerReq {
  extproto.CurrentUser currentUser = 100;

  // 秒
  uint64 processIn = 1;
  // 触发时间 2019-01-01 00:00:00 二选一 该字段存在时，优先使用
  string triggerTime = 2;
  // 最大重试次数（可为空，默认 25 次）
  //
  // 任务失败后会重试，重试间隔采用指数退避策略，时间间隔随重试次数成倍增长：
  //   - 第 1 次重试间隔约 1 秒，
  //   - 第 2 次重试间隔约 2 秒，
  //   - 第 3 次重试间隔约 4 秒，
  //   - 依此类推，间隔时间不断翻倍，
  //   - 重试间隔最高封顶为 30 分钟（1800 秒）。
  //
  // 具体时间区间示例：
  //   1 次重试：约 1 秒
  //   5 次重试：约 16 秒
  //   7 次重试：约 64 秒（约 1 分钟）
  //   10 次重试：约 8 分钟
  //   12 次及以上重试：间隔固定为 30 分钟
  //
  // 总之，重试间隔从秒级开始，逐步增长到分钟、十几分钟，最终封顶 30 分钟。
  int64 maxRetry = 3;
  // 唯一消息 id 可为空
  string msgId = 4;
  // 服务名称 不可为空 示例 127.0.0.1:8080 direct:///127.0.0.1:8080,127.0.0.2:8080,nacos://nacos:nacos@127.0.0.1:8848/service?namespaceid=public&timeout=5000s
  string grpcServer = 5;
  // 方法 不可为空
  string method = 6;
  // pb 字节数据 不可为空
  bytes payload = 7;
  // 请求超时时间 单位: 毫秒 可为空
  int64 requestTimeout = 8;
}

message SendProtoTriggerRes {
  // 唯一追踪 id
  string traceId = 1;
  // Queue is the name of the queue in which the task belongs.
  string queue = 2;
  // ID is the identifier of the task.
  string id = 3;
}

message QueuesReq {
  extproto.CurrentUser currentUser = 100;
}

message QueuesRes {
  repeated string queues = 1;
}

message GetQueueInfoReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message GetQueueInfoRes {
  PbQueueInfo queueInfo = 1;
}

message ArchiveTaskReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
  // ID is the identifier of the task.
  string id = 2 [(validate.rules).string = {min_len: 1}];
}

message ArchiveTaskRes {
}

message DeleteTaskReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
  // ID is the identifier of the task.
  string id = 2 [(validate.rules).string = {min_len: 1}];
}

message DeleteTaskRes {
}

message GetTaskInfoReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
  // ID is the identifier of the task.
  string id = 2 [(validate.rules).string = {min_len: 1}];
}

message GetTaskInfoRes {
  PbTaskInfo taskInfo = 1;
}

message DeleteAllCompletedTasksReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message DeleteAllCompletedTasksRes {
  int64 count = 1;
}

message HistoricalStatsReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
  // 天
  uint32 n = 2 [(validate.rules).uint32 = {gte:1, lte:90}];
}

message HistoricalStatsRes {
  repeated PbDailyStats dailyStat = 1;
}

message ListActiveTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message ListActiveTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message ListPendingTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message ListPendingTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message ListAggregatingTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
  string group = 4 [(validate.rules).string = {min_len: 1}];
}

message ListAggregatingTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message ListScheduledTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message ListScheduledTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message ListRetryTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message ListRetryTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message ListArchivedTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message ListArchivedTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message ListCompletedTasksReq {
  extproto.CurrentUser currentUser = 100;

  int64 pageSize = 1 [(validate.rules).int64 = {gte:0}];
  int64 pageNum = 2 [(validate.rules).int64 = {gte:0}];
  string queue = 3 [(validate.rules).string = {min_len: 1}]; // 默认 critical
}

message ListCompletedTasksRes {
  PbQueueInfo queueInfo = 1;
  repeated PbTaskInfo tasksInfo = 2;
}

message RunTaskReq {
  extproto.CurrentUser currentUser = 100;

  // Queue is the name of the queue in which the task belongs.
  string queue = 1 [(validate.rules).string = {min_len: 1}]; // 默认 critical
  // ID is the identifier of the task.
  string id = 2 [(validate.rules).string = {min_len: 1}];
}

message RunTaskRes {
}

service TriggerRpc {
  rpc Ping (Req) returns (Res);
  // 发送 http-post-json 回调
  rpc SendTrigger(SendTriggerReq) returns(SendTriggerRes);
  // 发送 grpc proto字节码 回调
  rpc SendProtoTrigger(SendProtoTriggerReq) returns (SendProtoTriggerRes);
  // 获取队列列表
  rpc Queues(QueuesReq) returns (QueuesRes);
  // 获取队列信息
  rpc GetQueueInfo(GetQueueInfoReq) returns (GetQueueInfoRes);
  // 归档任务
  rpc ArchiveTask(ArchiveTaskReq) returns (ArchiveTaskRes);
  // 删除任务
  rpc DeleteTask(DeleteTaskReq) returns (DeleteTaskRes);
  // 获取任务
  rpc GetTaskInfo(GetTaskInfoReq) returns (GetTaskInfoRes);
  // 删除所有已完成任务
  rpc DeleteAllCompletedTasks(DeleteAllCompletedTasksReq) returns (DeleteAllCompletedTasksRes);
  // 获取任务历史统计
  rpc HistoricalStats(HistoricalStatsReq) returns (HistoricalStatsRes);
  // 获取活跃任务列表
  rpc ListActiveTasks(ListActiveTasksReq) returns (ListActiveTasksRes);
  // 获取待处理任务列表
  rpc ListPendingTasks(ListPendingTasksReq) returns (ListPendingTasksRes);
  // 获取聚合任务列表
  rpc ListAggregatingTasks(ListAggregatingTasksReq) returns (ListAggregatingTasksRes);
  // 获取预定任务列表
  rpc ListScheduledTasks(ListScheduledTasksReq) returns (ListScheduledTasksRes);
  // 获取重试任务列表
  rpc ListRetryTasks(ListRetryTasksReq) returns (ListRetryTasksRes);
  // 获取已归档任务列表
  rpc ListArchivedTasks(ListArchivedTasksReq) returns (ListArchivedTasksRes);
  // 获取已完成任务列表
  rpc ListCompletedTasks(ListCompletedTasksReq) returns (ListCompletedTasksRes);
  // 运行任务
  rpc RunTask(RunTaskReq) returns (RunTaskRes);
}