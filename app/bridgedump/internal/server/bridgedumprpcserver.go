// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: bridgedump.proto

package server

import (
	"context"

	"zero-service/app/bridgedump/bridgedump"
	"zero-service/app/bridgedump/internal/logic"
	"zero-service/app/bridgedump/internal/svc"
)

type BridgeDumpRpcServer struct {
	svcCtx *svc.ServiceContext
	bridgedump.UnimplementedBridgeDumpRpcServer
}

func NewBridgeDumpRpcServer(svcCtx *svc.ServiceContext) *BridgeDumpRpcServer {
	return &BridgeDumpRpcServer{
		svcCtx: svcCtx,
	}
}

func (s *BridgeDumpRpcServer) Ping(ctx context.Context, in *bridgedump.Req) (*bridgedump.Res, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

// 电缆设备运行数据接入
func (s *BridgeDumpRpcServer) CableWorkList(ctx context.Context, in *bridgedump.CableWorkListReq) (*bridgedump.CableWorkListRes, error) {
	l := logic.NewCableWorkListLogic(ctx, s.svcCtx)
	return l.CableWorkList(in)
}

// 电缆故障结果数据接入
func (s *BridgeDumpRpcServer) CableFault(ctx context.Context, in *bridgedump.CableFaultReq) (*bridgedump.CableFaultRes, error) {
	l := logic.NewCableFaultLogic(ctx, s.svcCtx)
	return l.CableFault(in)
}

// 电缆故障波形数据接入
func (s *BridgeDumpRpcServer) CableFaultWave(ctx context.Context, in *bridgedump.CableFaultWaveReq) (*bridgedump.CableFaultWaveRes, error) {
	l := logic.NewCableFaultWaveLogic(ctx, s.svcCtx)
	return l.CableFaultWave(in)
}
