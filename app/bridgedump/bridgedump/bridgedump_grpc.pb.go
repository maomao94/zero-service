// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: bridgedump.proto

package bridgedump

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BridgeDumpRpc_Ping_FullMethodName           = "/bridgedump.BridgeDumpRpc/Ping"
	BridgeDumpRpc_CableWorkList_FullMethodName  = "/bridgedump.BridgeDumpRpc/CableWorkList"
	BridgeDumpRpc_CableFault_FullMethodName     = "/bridgedump.BridgeDumpRpc/CableFault"
	BridgeDumpRpc_CableFaultWave_FullMethodName = "/bridgedump.BridgeDumpRpc/CableFaultWave"
)

// BridgeDumpRpcClient is the client API for BridgeDumpRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeDumpRpcClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 电缆设备运行数据接入
	CableWorkList(ctx context.Context, in *CableWorkListReq, opts ...grpc.CallOption) (*CableWorkListRes, error)
	// 电缆故障结果数据接入
	CableFault(ctx context.Context, in *CableFaultReq, opts ...grpc.CallOption) (*CableFaultRes, error)
	// 电缆故障波形数据接入
	CableFaultWave(ctx context.Context, in *CableFaultWaveReq, opts ...grpc.CallOption) (*CableFaultWaveRes, error)
}

type bridgeDumpRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeDumpRpcClient(cc grpc.ClientConnInterface) BridgeDumpRpcClient {
	return &bridgeDumpRpcClient{cc}
}

func (c *bridgeDumpRpcClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Res)
	err := c.cc.Invoke(ctx, BridgeDumpRpc_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeDumpRpcClient) CableWorkList(ctx context.Context, in *CableWorkListReq, opts ...grpc.CallOption) (*CableWorkListRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CableWorkListRes)
	err := c.cc.Invoke(ctx, BridgeDumpRpc_CableWorkList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeDumpRpcClient) CableFault(ctx context.Context, in *CableFaultReq, opts ...grpc.CallOption) (*CableFaultRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CableFaultRes)
	err := c.cc.Invoke(ctx, BridgeDumpRpc_CableFault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeDumpRpcClient) CableFaultWave(ctx context.Context, in *CableFaultWaveReq, opts ...grpc.CallOption) (*CableFaultWaveRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CableFaultWaveRes)
	err := c.cc.Invoke(ctx, BridgeDumpRpc_CableFaultWave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeDumpRpcServer is the server API for BridgeDumpRpc service.
// All implementations must embed UnimplementedBridgeDumpRpcServer
// for forward compatibility.
type BridgeDumpRpcServer interface {
	Ping(context.Context, *Req) (*Res, error)
	// 电缆设备运行数据接入
	CableWorkList(context.Context, *CableWorkListReq) (*CableWorkListRes, error)
	// 电缆故障结果数据接入
	CableFault(context.Context, *CableFaultReq) (*CableFaultRes, error)
	// 电缆故障波形数据接入
	CableFaultWave(context.Context, *CableFaultWaveReq) (*CableFaultWaveRes, error)
	mustEmbedUnimplementedBridgeDumpRpcServer()
}

// UnimplementedBridgeDumpRpcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBridgeDumpRpcServer struct{}

func (UnimplementedBridgeDumpRpcServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBridgeDumpRpcServer) CableWorkList(context.Context, *CableWorkListReq) (*CableWorkListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CableWorkList not implemented")
}
func (UnimplementedBridgeDumpRpcServer) CableFault(context.Context, *CableFaultReq) (*CableFaultRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CableFault not implemented")
}
func (UnimplementedBridgeDumpRpcServer) CableFaultWave(context.Context, *CableFaultWaveReq) (*CableFaultWaveRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CableFaultWave not implemented")
}
func (UnimplementedBridgeDumpRpcServer) mustEmbedUnimplementedBridgeDumpRpcServer() {}
func (UnimplementedBridgeDumpRpcServer) testEmbeddedByValue()                       {}

// UnsafeBridgeDumpRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeDumpRpcServer will
// result in compilation errors.
type UnsafeBridgeDumpRpcServer interface {
	mustEmbedUnimplementedBridgeDumpRpcServer()
}

func RegisterBridgeDumpRpcServer(s grpc.ServiceRegistrar, srv BridgeDumpRpcServer) {
	// If the following call pancis, it indicates UnimplementedBridgeDumpRpcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BridgeDumpRpc_ServiceDesc, srv)
}

func _BridgeDumpRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeDumpRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeDumpRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeDumpRpcServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeDumpRpc_CableWorkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CableWorkListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeDumpRpcServer).CableWorkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeDumpRpc_CableWorkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeDumpRpcServer).CableWorkList(ctx, req.(*CableWorkListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeDumpRpc_CableFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CableFaultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeDumpRpcServer).CableFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeDumpRpc_CableFault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeDumpRpcServer).CableFault(ctx, req.(*CableFaultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeDumpRpc_CableFaultWave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CableFaultWaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeDumpRpcServer).CableFaultWave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BridgeDumpRpc_CableFaultWave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeDumpRpcServer).CableFaultWave(ctx, req.(*CableFaultWaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BridgeDumpRpc_ServiceDesc is the grpc.ServiceDesc for BridgeDumpRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeDumpRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridgedump.BridgeDumpRpc",
	HandlerType: (*BridgeDumpRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BridgeDumpRpc_Ping_Handler,
		},
		{
			MethodName: "CableWorkList",
			Handler:    _BridgeDumpRpc_CableWorkList_Handler,
		},
		{
			MethodName: "CableFault",
			Handler:    _BridgeDumpRpc_CableFault_Handler,
		},
		{
			MethodName: "CableFaultWave",
			Handler:    _BridgeDumpRpc_CableFaultWave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bridgedump.proto",
}
