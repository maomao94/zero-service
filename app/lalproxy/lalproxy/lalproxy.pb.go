// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: lalproxy.proto

package lalproxy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Req struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ping          string                 `protobuf:"bytes,1,opt,name=ping,proto3" json:"ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Req) Reset() {
	*x = Req{}
	mi := &file_lalproxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Req) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Req) ProtoMessage() {}

func (x *Req) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Req.ProtoReflect.Descriptor instead.
func (*Req) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{0}
}

func (x *Req) GetPing() string {
	if x != nil {
		return x.Ping
	}
	return ""
}

type Res struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pong          string                 `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Res) Reset() {
	*x = Res{}
	mi := &file_lalproxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Res) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Res) ProtoMessage() {}

func (x *Res) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Res.ProtoReflect.Descriptor instead.
func (*Res) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{1}
}

func (x *Res) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

// 查询特定流分组的请求参数
type GetGroupInfoReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称，用于指定要查询的分组
	StreamName    string `protobuf:"bytes,1,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupInfoReq) Reset() {
	*x = GetGroupInfoReq{}
	mi := &file_lalproxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReq) ProtoMessage() {}

func (x *GetGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{2}
}

func (x *GetGroupInfoReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// 查询特定流分组的响应
type GetGroupInfoRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 分组详细信息
	Data          *GroupData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupInfoRes) Reset() {
	*x = GetGroupInfoRes{}
	mi := &file_lalproxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoRes) ProtoMessage() {}

func (x *GetGroupInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoRes.ProtoReflect.Descriptor instead.
func (*GetGroupInfoRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{3}
}

func (x *GetGroupInfoRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetGroupInfoRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *GetGroupInfoRes) GetData() *GroupData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 查询所有流分组的请求参数（暂无需额外参数）
type GetAllGroupsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllGroupsReq) Reset() {
	*x = GetAllGroupsReq{}
	mi := &file_lalproxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGroupsReq) ProtoMessage() {}

func (x *GetAllGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGroupsReq.ProtoReflect.Descriptor instead.
func (*GetAllGroupsReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{4}
}

// 查询所有流分组的响应
type GetAllGroupsRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 所有分组的列表
	Groups        []*GroupData `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllGroupsRes) Reset() {
	*x = GetAllGroupsRes{}
	mi := &file_lalproxy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGroupsRes) ProtoMessage() {}

func (x *GetAllGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGroupsRes.ProtoReflect.Descriptor instead.
func (*GetAllGroupsRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllGroupsRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAllGroupsRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *GetAllGroupsRes) GetGroups() []*GroupData {
	if x != nil {
		return x.Groups
	}
	return nil
}

// 查询服务器信息的请求参数（暂无需额外参数）
type GetLalInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLalInfoReq) Reset() {
	*x = GetLalInfoReq{}
	mi := &file_lalproxy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLalInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLalInfoReq) ProtoMessage() {}

func (x *GetLalInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLalInfoReq.ProtoReflect.Descriptor instead.
func (*GetLalInfoReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{6}
}

// 查询服务器信息的响应
type GetLalInfoRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 服务器详细信息
	Data          *LalServerData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLalInfoRes) Reset() {
	*x = GetLalInfoRes{}
	mi := &file_lalproxy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLalInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLalInfoRes) ProtoMessage() {}

func (x *GetLalInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLalInfoRes.ProtoReflect.Descriptor instead.
func (*GetLalInfoRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{7}
}

func (x *GetLalInfoRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetLalInfoRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *GetLalInfoRes) GetData() *LalServerData {
	if x != nil {
		return x.Data
	}
	return nil
}

// 启动中继拉流的请求参数
type StartRelayPullReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 拉流地址（如rtmp://example.com/live/stream）
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// 流名称，可选，默认从url中解析
	StreamName string `protobuf:"bytes,2,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	// 拉流超时时间，单位：毫秒
	PullTimeoutMs int32 `protobuf:"varint,3,opt,name=pullTimeoutMs,json=pull_timeout_ms,proto3" json:"pullTimeoutMs,omitempty"`
	// 拉流重试次数（-1表示一直重试，0表示不重试）
	PullRetryNum int32 `protobuf:"varint,4,opt,name=pullRetryNum,json=pull_retry_num,proto3" json:"pullRetryNum,omitempty"`
	// 无输出时自动停止拉流的时间，单位：毫秒
	AutoStopPullAfterNoOutMs int32 `protobuf:"varint,5,opt,name=autoStopPullAfterNoOutMs,json=auto_stop_pull_after_no_out_ms,proto3" json:"autoStopPullAfterNoOutMs,omitempty"`
	// RTSP模式（0表示TCP，1表示UDP）
	RtspMode      int32 `protobuf:"varint,6,opt,name=rtspMode,json=rtsp_mode,proto3" json:"rtspMode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRelayPullReq) Reset() {
	*x = StartRelayPullReq{}
	mi := &file_lalproxy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRelayPullReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRelayPullReq) ProtoMessage() {}

func (x *StartRelayPullReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRelayPullReq.ProtoReflect.Descriptor instead.
func (*StartRelayPullReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{8}
}

func (x *StartRelayPullReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StartRelayPullReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StartRelayPullReq) GetPullTimeoutMs() int32 {
	if x != nil {
		return x.PullTimeoutMs
	}
	return 0
}

func (x *StartRelayPullReq) GetPullRetryNum() int32 {
	if x != nil {
		return x.PullRetryNum
	}
	return 0
}

func (x *StartRelayPullReq) GetAutoStopPullAfterNoOutMs() int32 {
	if x != nil {
		return x.AutoStopPullAfterNoOutMs
	}
	return 0
}

func (x *StartRelayPullReq) GetRtspMode() int32 {
	if x != nil {
		return x.RtspMode
	}
	return 0
}

// 启动中继拉流的响应
type StartRelayPullRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 操作结果的附加数据（可能为空）
	Data          map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRelayPullRes) Reset() {
	*x = StartRelayPullRes{}
	mi := &file_lalproxy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRelayPullRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRelayPullRes) ProtoMessage() {}

func (x *StartRelayPullRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRelayPullRes.ProtoReflect.Descriptor instead.
func (*StartRelayPullRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{9}
}

func (x *StartRelayPullRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StartRelayPullRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *StartRelayPullRes) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 停止中继拉流的请求参数
type StopRelayPullReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要停止拉流的流名称
	StreamName    string `protobuf:"bytes,1,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRelayPullReq) Reset() {
	*x = StopRelayPullReq{}
	mi := &file_lalproxy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRelayPullReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRelayPullReq) ProtoMessage() {}

func (x *StopRelayPullReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRelayPullReq.ProtoReflect.Descriptor instead.
func (*StopRelayPullReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{10}
}

func (x *StopRelayPullReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// 停止中继拉流的响应
type StopRelayPullRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 操作结果的附加数据（可能为空）
	Data          map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRelayPullRes) Reset() {
	*x = StopRelayPullRes{}
	mi := &file_lalproxy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRelayPullRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRelayPullRes) ProtoMessage() {}

func (x *StopRelayPullRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRelayPullRes.ProtoReflect.Descriptor instead.
func (*StopRelayPullRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{11}
}

func (x *StopRelayPullRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StopRelayPullRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *StopRelayPullRes) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 踢出会话的请求参数
type KickSessionReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称
	StreamName string `protobuf:"bytes,1,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	// 会话ID，可通过查询接口获取
	SessionId string `protobuf:"bytes,2,opt,name=sessionId,json=session_id,proto3" json:"sessionId,omitempty"`
	// 会话类型（可选，如"pub"发布者,"sub"订阅者,"pull"拉流者）
	SessionType   string `protobuf:"bytes,3,opt,name=sessionType,json=session_type,proto3" json:"sessionType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickSessionReq) Reset() {
	*x = KickSessionReq{}
	mi := &file_lalproxy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickSessionReq) ProtoMessage() {}

func (x *KickSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickSessionReq.ProtoReflect.Descriptor instead.
func (*KickSessionReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{12}
}

func (x *KickSessionReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *KickSessionReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KickSessionReq) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

// 踢出会话的响应
type KickSessionRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 操作结果的附加数据（可能为空）
	Data          map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickSessionRes) Reset() {
	*x = KickSessionRes{}
	mi := &file_lalproxy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickSessionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickSessionRes) ProtoMessage() {}

func (x *KickSessionRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickSessionRes.ProtoReflect.Descriptor instead.
func (*KickSessionRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{13}
}

func (x *KickSessionRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *KickSessionRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *KickSessionRes) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 启动RTP发布的请求参数（GB28181相关）
type StartRtpPubReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 本地接收RTP流的端口
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// 流名称，用于标识该RTP流
	StreamName    string `protobuf:"bytes,2,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRtpPubReq) Reset() {
	*x = StartRtpPubReq{}
	mi := &file_lalproxy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRtpPubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRtpPubReq) ProtoMessage() {}

func (x *StartRtpPubReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRtpPubReq.ProtoReflect.Descriptor instead.
func (*StartRtpPubReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{14}
}

func (x *StartRtpPubReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartRtpPubReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// 启动RTP发布的响应
type StartRtpPubRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 操作结果的附加数据（可能为空）
	Data          map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRtpPubRes) Reset() {
	*x = StartRtpPubRes{}
	mi := &file_lalproxy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRtpPubRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRtpPubRes) ProtoMessage() {}

func (x *StartRtpPubRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRtpPubRes.ProtoReflect.Descriptor instead.
func (*StartRtpPubRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{15}
}

func (x *StartRtpPubRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StartRtpPubRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *StartRtpPubRes) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 停止RTP发布的请求参数（GB28181相关）
type StopRtpPubReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要关闭的RTP接收端口
	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	// 流名称，用于标识要停止的RTP流
	StreamName    string `protobuf:"bytes,2,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRtpPubReq) Reset() {
	*x = StopRtpPubReq{}
	mi := &file_lalproxy_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRtpPubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRtpPubReq) ProtoMessage() {}

func (x *StopRtpPubReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRtpPubReq.ProtoReflect.Descriptor instead.
func (*StopRtpPubReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{16}
}

func (x *StopRtpPubReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StopRtpPubReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// 停止RTP发布的响应
type StopRtpPubRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 操作结果的附加数据（可能为空）
	Data          map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRtpPubRes) Reset() {
	*x = StopRtpPubRes{}
	mi := &file_lalproxy_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRtpPubRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRtpPubRes) ProtoMessage() {}

func (x *StopRtpPubRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRtpPubRes.ProtoReflect.Descriptor instead.
func (*StopRtpPubRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{17}
}

func (x *StopRtpPubRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StopRtpPubRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *StopRtpPubRes) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 添加IP黑名单的请求参数
type AddIpBlacklistReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 要加入黑名单的IP地址
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// 黑名单过期时间，单位：秒（0表示永久有效）
	ExpireSeconds int32 `protobuf:"varint,2,opt,name=expireSeconds,json=expire_seconds,proto3" json:"expireSeconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIpBlacklistReq) Reset() {
	*x = AddIpBlacklistReq{}
	mi := &file_lalproxy_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIpBlacklistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIpBlacklistReq) ProtoMessage() {}

func (x *AddIpBlacklistReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIpBlacklistReq.ProtoReflect.Descriptor instead.
func (*AddIpBlacklistReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{18}
}

func (x *AddIpBlacklistReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddIpBlacklistReq) GetExpireSeconds() int32 {
	if x != nil {
		return x.ExpireSeconds
	}
	return 0
}

// 添加IP黑名单的响应
type AddIpBlacklistRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码，0表示成功，非0表示失败
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,json=error_code,proto3" json:"errorCode,omitempty"`
	// 错误描述信息
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 操作结果的附加数据（可能为空）
	Data          map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIpBlacklistRes) Reset() {
	*x = AddIpBlacklistRes{}
	mi := &file_lalproxy_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIpBlacklistRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIpBlacklistRes) ProtoMessage() {}

func (x *AddIpBlacklistRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIpBlacklistRes.ProtoReflect.Descriptor instead.
func (*AddIpBlacklistRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{19}
}

func (x *AddIpBlacklistRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *AddIpBlacklistRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *AddIpBlacklistRes) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// 流分组数据结构
type GroupData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称
	StreamName string `protobuf:"bytes,1,opt,name=streamName,json=stream_name,proto3" json:"streamName,omitempty"`
	// 分组创建时间，单位：毫秒时间戳
	CreateTimeMs int64 `protobuf:"varint,2,opt,name=createTimeMs,json=create_time_ms,proto3" json:"createTimeMs,omitempty"`
	// 发布者会话信息
	Publisher *SessionInfo `protobuf:"bytes,3,opt,name=publisher,proto3" json:"publisher,omitempty"`
	// 订阅者会话列表
	Subscribers []*SessionInfo `protobuf:"bytes,4,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	// 拉流会话列表
	Pullers       []*SessionInfo `protobuf:"bytes,5,rep,name=pullers,proto3" json:"pullers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupData) Reset() {
	*x = GroupData{}
	mi := &file_lalproxy_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupData) ProtoMessage() {}

func (x *GroupData) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupData.ProtoReflect.Descriptor instead.
func (*GroupData) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{20}
}

func (x *GroupData) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *GroupData) GetCreateTimeMs() int64 {
	if x != nil {
		return x.CreateTimeMs
	}
	return 0
}

func (x *GroupData) GetPublisher() *SessionInfo {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *GroupData) GetSubscribers() []*SessionInfo {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *GroupData) GetPullers() []*SessionInfo {
	if x != nil {
		return x.Pullers
	}
	return nil
}

// 会话信息数据结构
type SessionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话ID
	SessionId string `protobuf:"bytes,1,opt,name=sessionId,json=session_id,proto3" json:"sessionId,omitempty"`
	// 会话类型（"pub"发布者,"sub"订阅者,"pull"拉流者）
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// 客户端IP地址
	ClientIp string `protobuf:"bytes,3,opt,name=clientIp,json=client_ip,proto3" json:"clientIp,omitempty"`
	// 会话创建时间，单位：毫秒时间戳
	CreateTimeMs int64 `protobuf:"varint,4,opt,name=createTimeMs,json=create_time_ms,proto3" json:"createTimeMs,omitempty"`
	// 数据发送字节数
	SendBytes int64 `protobuf:"varint,5,opt,name=sendBytes,json=send_bytes,proto3" json:"sendBytes,omitempty"`
	// 数据接收字节数
	RecvBytes     int64 `protobuf:"varint,6,opt,name=recvBytes,json=recv_bytes,proto3" json:"recvBytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionInfo) Reset() {
	*x = SessionInfo{}
	mi := &file_lalproxy_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfo) ProtoMessage() {}

func (x *SessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfo.ProtoReflect.Descriptor instead.
func (*SessionInfo) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{21}
}

func (x *SessionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SessionInfo) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *SessionInfo) GetCreateTimeMs() int64 {
	if x != nil {
		return x.CreateTimeMs
	}
	return 0
}

func (x *SessionInfo) GetSendBytes() int64 {
	if x != nil {
		return x.SendBytes
	}
	return 0
}

func (x *SessionInfo) GetRecvBytes() int64 {
	if x != nil {
		return x.RecvBytes
	}
	return 0
}

// 服务器信息数据结构
type LalServerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 服务器版本号
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// 启动时间，单位：毫秒时间戳
	StartTimeMs int64 `protobuf:"varint,2,opt,name=startTimeMs,json=start_time_ms,proto3" json:"startTimeMs,omitempty"`
	// 运行时长，单位：秒
	UptimeSeconds int64 `protobuf:"varint,3,opt,name=uptimeSeconds,json=uptime_seconds,proto3" json:"uptimeSeconds,omitempty"`
	// 总连接数
	TotalConnections int32 `protobuf:"varint,4,opt,name=totalConnections,json=total_connections,proto3" json:"totalConnections,omitempty"`
	// 当前流数量
	StreamCount int32 `protobuf:"varint,5,opt,name=streamCount,json=stream_count,proto3" json:"streamCount,omitempty"`
	// 系统信息（如操作系统、CPU核心数等）
	SystemInfo string `protobuf:"bytes,6,opt,name=systemInfo,json=system_info,proto3" json:"systemInfo,omitempty"`
	// 配置信息摘要
	ConfigSummary string `protobuf:"bytes,7,opt,name=configSummary,json=config_summary,proto3" json:"configSummary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LalServerData) Reset() {
	*x = LalServerData{}
	mi := &file_lalproxy_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LalServerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LalServerData) ProtoMessage() {}

func (x *LalServerData) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LalServerData.ProtoReflect.Descriptor instead.
func (*LalServerData) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{22}
}

func (x *LalServerData) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LalServerData) GetStartTimeMs() int64 {
	if x != nil {
		return x.StartTimeMs
	}
	return 0
}

func (x *LalServerData) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *LalServerData) GetTotalConnections() int32 {
	if x != nil {
		return x.TotalConnections
	}
	return 0
}

func (x *LalServerData) GetStreamCount() int32 {
	if x != nil {
		return x.StreamCount
	}
	return 0
}

func (x *LalServerData) GetSystemInfo() string {
	if x != nil {
		return x.SystemInfo
	}
	return ""
}

func (x *LalServerData) GetConfigSummary() string {
	if x != nil {
		return x.ConfigSummary
	}
	return ""
}

var File_lalproxy_proto protoreflect.FileDescriptor

const file_lalproxy_proto_rawDesc = "" +
	"\n" +
	"\x0elalproxy.proto\x12\blalproxy\"\x19\n" +
	"\x03Req\x12\x12\n" +
	"\x04ping\x18\x01 \x01(\tR\x04ping\"\x19\n" +
	"\x03Res\x12\x12\n" +
	"\x04pong\x18\x01 \x01(\tR\x04pong\"2\n" +
	"\x0fGetGroupInfoReq\x12\x1f\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\vstream_name\"m\n" +
	"\x0fGetGroupInfoRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x12'\n" +
	"\x04data\x18\x03 \x01(\v2\x13.lalproxy.GroupDataR\x04data\"\x11\n" +
	"\x0fGetAllGroupsReq\"q\n" +
	"\x0fGetAllGroupsRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x12+\n" +
	"\x06groups\x18\x03 \x03(\v2\x13.lalproxy.GroupDataR\x06groups\"\x0f\n" +
	"\rGetLalInfoReq\"o\n" +
	"\rGetLalInfoRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.lalproxy.LalServerDataR\x04data\"\xf3\x01\n" +
	"\x11StartRelayPullReq\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1f\n" +
	"\n" +
	"streamName\x18\x02 \x01(\tR\vstream_name\x12&\n" +
	"\rpullTimeoutMs\x18\x03 \x01(\x05R\x0fpull_timeout_ms\x12$\n" +
	"\fpullRetryNum\x18\x04 \x01(\x05R\x0epull_retry_num\x12@\n" +
	"\x18autoStopPullAfterNoOutMs\x18\x05 \x01(\x05R\x1eauto_stop_pull_after_no_out_ms\x12\x1b\n" +
	"\brtspMode\x18\x06 \x01(\x05R\trtsp_mode\"\xba\x01\n" +
	"\x11StartRelayPullRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x129\n" +
	"\x04data\x18\x03 \x03(\v2%.lalproxy.StartRelayPullRes.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"3\n" +
	"\x10StopRelayPullReq\x12\x1f\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\vstream_name\"\xb8\x01\n" +
	"\x10StopRelayPullRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x128\n" +
	"\x04data\x18\x03 \x03(\v2$.lalproxy.StopRelayPullRes.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"s\n" +
	"\x0eKickSessionReq\x12\x1f\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\vstream_name\x12\x1d\n" +
	"\tsessionId\x18\x02 \x01(\tR\n" +
	"session_id\x12!\n" +
	"\vsessionType\x18\x03 \x01(\tR\fsession_type\"\xb4\x01\n" +
	"\x0eKickSessionRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x126\n" +
	"\x04data\x18\x03 \x03(\v2\".lalproxy.KickSessionRes.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"E\n" +
	"\x0eStartRtpPubReq\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\x12\x1f\n" +
	"\n" +
	"streamName\x18\x02 \x01(\tR\vstream_name\"\xb4\x01\n" +
	"\x0eStartRtpPubRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x126\n" +
	"\x04data\x18\x03 \x03(\v2\".lalproxy.StartRtpPubRes.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"D\n" +
	"\rStopRtpPubReq\x12\x12\n" +
	"\x04port\x18\x01 \x01(\x05R\x04port\x12\x1f\n" +
	"\n" +
	"streamName\x18\x02 \x01(\tR\vstream_name\"\xb2\x01\n" +
	"\rStopRtpPubRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x125\n" +
	"\x04data\x18\x03 \x03(\v2!.lalproxy.StopRtpPubRes.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"J\n" +
	"\x11AddIpBlacklistReq\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12%\n" +
	"\rexpireSeconds\x18\x02 \x01(\x05R\x0eexpire_seconds\"\xba\x01\n" +
	"\x11AddIpBlacklistRes\x12\x1d\n" +
	"\terrorCode\x18\x01 \x01(\x05R\n" +
	"error_code\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x129\n" +
	"\x04data\x18\x03 \x03(\v2%.lalproxy.AddIpBlacklistRes.DataEntryR\x04data\x1a7\n" +
	"\tDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf1\x01\n" +
	"\tGroupData\x12\x1f\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\vstream_name\x12$\n" +
	"\fcreateTimeMs\x18\x02 \x01(\x03R\x0ecreate_time_ms\x123\n" +
	"\tpublisher\x18\x03 \x01(\v2\x15.lalproxy.SessionInfoR\tpublisher\x127\n" +
	"\vsubscribers\x18\x04 \x03(\v2\x15.lalproxy.SessionInfoR\vsubscribers\x12/\n" +
	"\apullers\x18\x05 \x03(\v2\x15.lalproxy.SessionInfoR\apullers\"\xc1\x01\n" +
	"\vSessionInfo\x12\x1d\n" +
	"\tsessionId\x18\x01 \x01(\tR\n" +
	"session_id\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x1b\n" +
	"\bclientIp\x18\x03 \x01(\tR\tclient_ip\x12$\n" +
	"\fcreateTimeMs\x18\x04 \x01(\x03R\x0ecreate_time_ms\x12\x1d\n" +
	"\tsendBytes\x18\x05 \x01(\x03R\n" +
	"send_bytes\x12\x1d\n" +
	"\trecvBytes\x18\x06 \x01(\x03R\n" +
	"recv_bytes\"\x8c\x02\n" +
	"\rLalServerData\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\"\n" +
	"\vstartTimeMs\x18\x02 \x01(\x03R\rstart_time_ms\x12%\n" +
	"\ruptimeSeconds\x18\x03 \x01(\x03R\x0euptime_seconds\x12+\n" +
	"\x10totalConnections\x18\x04 \x01(\x05R\x11total_connections\x12!\n" +
	"\vstreamCount\x18\x05 \x01(\x05R\fstream_count\x12\x1f\n" +
	"\n" +
	"systemInfo\x18\x06 \x01(\tR\vsystem_info\x12%\n" +
	"\rconfigSummary\x18\a \x01(\tR\x0econfig_summary2\xfd\x04\n" +
	"\bLalProxy\x12D\n" +
	"\fGetGroupInfo\x12\x19.lalproxy.GetGroupInfoReq\x1a\x19.lalproxy.GetGroupInfoRes\x12D\n" +
	"\fGetAllGroups\x12\x19.lalproxy.GetAllGroupsReq\x1a\x19.lalproxy.GetAllGroupsRes\x12>\n" +
	"\n" +
	"GetLalInfo\x12\x17.lalproxy.GetLalInfoReq\x1a\x17.lalproxy.GetLalInfoRes\x12J\n" +
	"\x0eStartRelayPull\x12\x1b.lalproxy.StartRelayPullReq\x1a\x1b.lalproxy.StartRelayPullRes\x12G\n" +
	"\rStopRelayPull\x12\x1a.lalproxy.StopRelayPullReq\x1a\x1a.lalproxy.StopRelayPullRes\x12A\n" +
	"\vKickSession\x12\x18.lalproxy.KickSessionReq\x1a\x18.lalproxy.KickSessionRes\x12A\n" +
	"\vStartRtpPub\x12\x18.lalproxy.StartRtpPubReq\x1a\x18.lalproxy.StartRtpPubRes\x12>\n" +
	"\n" +
	"StopRtpPub\x12\x17.lalproxy.StopRtpPubReq\x1a\x17.lalproxy.StopRtpPubRes\x12J\n" +
	"\x0eAddIpBlacklist\x12\x1b.lalproxy.AddIpBlacklistReq\x1a\x1b.lalproxy.AddIpBlacklistResB7\n" +
	"\x18com.github.lalproxy.grpcB\rLalProxyProtoP\x01Z\n" +
	"./lalproxyb\x06proto3"

var (
	file_lalproxy_proto_rawDescOnce sync.Once
	file_lalproxy_proto_rawDescData []byte
)

func file_lalproxy_proto_rawDescGZIP() []byte {
	file_lalproxy_proto_rawDescOnce.Do(func() {
		file_lalproxy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lalproxy_proto_rawDesc), len(file_lalproxy_proto_rawDesc)))
	})
	return file_lalproxy_proto_rawDescData
}

var file_lalproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_lalproxy_proto_goTypes = []any{
	(*Req)(nil),               // 0: lalproxy.Req
	(*Res)(nil),               // 1: lalproxy.Res
	(*GetGroupInfoReq)(nil),   // 2: lalproxy.GetGroupInfoReq
	(*GetGroupInfoRes)(nil),   // 3: lalproxy.GetGroupInfoRes
	(*GetAllGroupsReq)(nil),   // 4: lalproxy.GetAllGroupsReq
	(*GetAllGroupsRes)(nil),   // 5: lalproxy.GetAllGroupsRes
	(*GetLalInfoReq)(nil),     // 6: lalproxy.GetLalInfoReq
	(*GetLalInfoRes)(nil),     // 7: lalproxy.GetLalInfoRes
	(*StartRelayPullReq)(nil), // 8: lalproxy.StartRelayPullReq
	(*StartRelayPullRes)(nil), // 9: lalproxy.StartRelayPullRes
	(*StopRelayPullReq)(nil),  // 10: lalproxy.StopRelayPullReq
	(*StopRelayPullRes)(nil),  // 11: lalproxy.StopRelayPullRes
	(*KickSessionReq)(nil),    // 12: lalproxy.KickSessionReq
	(*KickSessionRes)(nil),    // 13: lalproxy.KickSessionRes
	(*StartRtpPubReq)(nil),    // 14: lalproxy.StartRtpPubReq
	(*StartRtpPubRes)(nil),    // 15: lalproxy.StartRtpPubRes
	(*StopRtpPubReq)(nil),     // 16: lalproxy.StopRtpPubReq
	(*StopRtpPubRes)(nil),     // 17: lalproxy.StopRtpPubRes
	(*AddIpBlacklistReq)(nil), // 18: lalproxy.AddIpBlacklistReq
	(*AddIpBlacklistRes)(nil), // 19: lalproxy.AddIpBlacklistRes
	(*GroupData)(nil),         // 20: lalproxy.GroupData
	(*SessionInfo)(nil),       // 21: lalproxy.SessionInfo
	(*LalServerData)(nil),     // 22: lalproxy.LalServerData
	nil,                       // 23: lalproxy.StartRelayPullRes.DataEntry
	nil,                       // 24: lalproxy.StopRelayPullRes.DataEntry
	nil,                       // 25: lalproxy.KickSessionRes.DataEntry
	nil,                       // 26: lalproxy.StartRtpPubRes.DataEntry
	nil,                       // 27: lalproxy.StopRtpPubRes.DataEntry
	nil,                       // 28: lalproxy.AddIpBlacklistRes.DataEntry
}
var file_lalproxy_proto_depIdxs = []int32{
	20, // 0: lalproxy.GetGroupInfoRes.data:type_name -> lalproxy.GroupData
	20, // 1: lalproxy.GetAllGroupsRes.groups:type_name -> lalproxy.GroupData
	22, // 2: lalproxy.GetLalInfoRes.data:type_name -> lalproxy.LalServerData
	23, // 3: lalproxy.StartRelayPullRes.data:type_name -> lalproxy.StartRelayPullRes.DataEntry
	24, // 4: lalproxy.StopRelayPullRes.data:type_name -> lalproxy.StopRelayPullRes.DataEntry
	25, // 5: lalproxy.KickSessionRes.data:type_name -> lalproxy.KickSessionRes.DataEntry
	26, // 6: lalproxy.StartRtpPubRes.data:type_name -> lalproxy.StartRtpPubRes.DataEntry
	27, // 7: lalproxy.StopRtpPubRes.data:type_name -> lalproxy.StopRtpPubRes.DataEntry
	28, // 8: lalproxy.AddIpBlacklistRes.data:type_name -> lalproxy.AddIpBlacklistRes.DataEntry
	21, // 9: lalproxy.GroupData.publisher:type_name -> lalproxy.SessionInfo
	21, // 10: lalproxy.GroupData.subscribers:type_name -> lalproxy.SessionInfo
	21, // 11: lalproxy.GroupData.pullers:type_name -> lalproxy.SessionInfo
	2,  // 12: lalproxy.LalProxy.GetGroupInfo:input_type -> lalproxy.GetGroupInfoReq
	4,  // 13: lalproxy.LalProxy.GetAllGroups:input_type -> lalproxy.GetAllGroupsReq
	6,  // 14: lalproxy.LalProxy.GetLalInfo:input_type -> lalproxy.GetLalInfoReq
	8,  // 15: lalproxy.LalProxy.StartRelayPull:input_type -> lalproxy.StartRelayPullReq
	10, // 16: lalproxy.LalProxy.StopRelayPull:input_type -> lalproxy.StopRelayPullReq
	12, // 17: lalproxy.LalProxy.KickSession:input_type -> lalproxy.KickSessionReq
	14, // 18: lalproxy.LalProxy.StartRtpPub:input_type -> lalproxy.StartRtpPubReq
	16, // 19: lalproxy.LalProxy.StopRtpPub:input_type -> lalproxy.StopRtpPubReq
	18, // 20: lalproxy.LalProxy.AddIpBlacklist:input_type -> lalproxy.AddIpBlacklistReq
	3,  // 21: lalproxy.LalProxy.GetGroupInfo:output_type -> lalproxy.GetGroupInfoRes
	5,  // 22: lalproxy.LalProxy.GetAllGroups:output_type -> lalproxy.GetAllGroupsRes
	7,  // 23: lalproxy.LalProxy.GetLalInfo:output_type -> lalproxy.GetLalInfoRes
	9,  // 24: lalproxy.LalProxy.StartRelayPull:output_type -> lalproxy.StartRelayPullRes
	11, // 25: lalproxy.LalProxy.StopRelayPull:output_type -> lalproxy.StopRelayPullRes
	13, // 26: lalproxy.LalProxy.KickSession:output_type -> lalproxy.KickSessionRes
	15, // 27: lalproxy.LalProxy.StartRtpPub:output_type -> lalproxy.StartRtpPubRes
	17, // 28: lalproxy.LalProxy.StopRtpPub:output_type -> lalproxy.StopRtpPubRes
	19, // 29: lalproxy.LalProxy.AddIpBlacklist:output_type -> lalproxy.AddIpBlacklistRes
	21, // [21:30] is the sub-list for method output_type
	12, // [12:21] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_lalproxy_proto_init() }
func file_lalproxy_proto_init() {
	if File_lalproxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lalproxy_proto_rawDesc), len(file_lalproxy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lalproxy_proto_goTypes,
		DependencyIndexes: file_lalproxy_proto_depIdxs,
		MessageInfos:      file_lalproxy_proto_msgTypes,
	}.Build()
	File_lalproxy_proto = out.File
	file_lalproxy_proto_goTypes = nil
	file_lalproxy_proto_depIdxs = nil
}
