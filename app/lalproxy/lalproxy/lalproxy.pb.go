// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v5.29.3
// source: lalproxy.proto

package lalproxy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 帧率数据：对应接口返回的 in_frame_per_sec 数组元素（最近32秒每秒视频帧数）
type FrameData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 时间戳（秒级Unix时间，如1723513826，必返）
	UnixSec int64 `protobuf:"varint,1,opt,name=unixSec,proto3" json:"unixSec,omitempty"`
	// 每秒视频帧数（如15，必返）
	V             int32 `protobuf:"varint,2,opt,name=v,proto3" json:"v,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FrameData) Reset() {
	*x = FrameData{}
	mi := &file_lalproxy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameData) ProtoMessage() {}

func (x *FrameData) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameData.ProtoReflect.Descriptor instead.
func (*FrameData) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{0}
}

func (x *FrameData) GetUnixSec() int64 {
	if x != nil {
		return x.UnixSec
	}
	return 0
}

func (x *FrameData) GetV() int32 {
	if x != nil {
		return x.V
	}
	return 0
}

// 发布者会话信息：对应接口返回的 data.pub（接收推流的详情）
type PubSessionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话ID（全局唯一标识，如"RTMPPUBSUB1"，必返）
	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 推流协议（取值："RTMP"|"RTSP"，必返）
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// 基础类型（固定为"PUB"，标识发布者角色，必返）
	BaseType string `protobuf:"bytes,3,opt,name=baseType,proto3" json:"baseType,omitempty"`
	// 推流开始时间（格式化字符串，如"2020-10-11 19:17:41.586"，必返）
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 对端地址（客户端IP:端口，如"127.0.0.1:61353"，必返）
	RemoteAddr string `protobuf:"bytes,5,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	// 累计读取数据大小（从推流开始计算，单位字节，必返）
	ReadBytesSum int64 `protobuf:"varint,6,opt,name=readBytesSum,proto3" json:"readBytesSum,omitempty"`
	// 累计发送数据大小（从推流开始计算，单位字节，必返）
	WroteBytesSum int64 `protobuf:"varint,7,opt,name=wroteBytesSum,proto3" json:"wroteBytesSum,omitempty"`
	// 最近5秒总码率（单位kbit/s，对PUB类型等价于read_bitrate_kbits，必返）
	BitrateKbits int32 `protobuf:"varint,8,opt,name=bitrateKbits,proto3" json:"bitrateKbits,omitempty"`
	// 最近5秒读取数据码率（单位kbit/s，必返）
	ReadBitrateKbits int32 `protobuf:"varint,9,opt,name=readBitrateKbits,proto3" json:"readBitrateKbits,omitempty"`
	// 最近5秒发送数据码率（单位kbit/s，必返）
	WriteBitrateKbits int32 `protobuf:"varint,10,opt,name=writeBitrateKbits,proto3" json:"writeBitrateKbits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PubSessionInfo) Reset() {
	*x = PubSessionInfo{}
	mi := &file_lalproxy_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubSessionInfo) ProtoMessage() {}

func (x *PubSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubSessionInfo.ProtoReflect.Descriptor instead.
func (*PubSessionInfo) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{1}
}

func (x *PubSessionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PubSessionInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *PubSessionInfo) GetBaseType() string {
	if x != nil {
		return x.BaseType
	}
	return ""
}

func (x *PubSessionInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PubSessionInfo) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *PubSessionInfo) GetReadBytesSum() int64 {
	if x != nil {
		return x.ReadBytesSum
	}
	return 0
}

func (x *PubSessionInfo) GetWroteBytesSum() int64 {
	if x != nil {
		return x.WroteBytesSum
	}
	return 0
}

func (x *PubSessionInfo) GetBitrateKbits() int32 {
	if x != nil {
		return x.BitrateKbits
	}
	return 0
}

func (x *PubSessionInfo) GetReadBitrateKbits() int32 {
	if x != nil {
		return x.ReadBitrateKbits
	}
	return 0
}

func (x *PubSessionInfo) GetWriteBitrateKbits() int32 {
	if x != nil {
		return x.WriteBitrateKbits
	}
	return 0
}

// 订阅者会话信息：对应接口返回的 data.subs 数组元素（拉流的详情）
type SubSessionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话ID（全局唯一标识，如"FLVSUB1"，必返）
	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 拉流协议（取值："RTMP"|"FLV"|"TS"，必返）
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// 基础类型（固定为"SUB"，标识订阅者角色，必返）
	BaseType string `protobuf:"bytes,3,opt,name=baseType,proto3" json:"baseType,omitempty"`
	// 拉流开始时间（格式化字符串，如"2020-10-11 19:19:21.724"，必返）
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 对端地址（客户端IP:端口，如"127.0.0.1:61785"，必返）
	RemoteAddr string `protobuf:"bytes,5,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	// 累计读取数据大小（从拉流开始计算，单位字节，必返）
	ReadBytesSum int64 `protobuf:"varint,6,opt,name=readBytesSum,proto3" json:"readBytesSum,omitempty"`
	// 累计发送数据大小（从拉流开始计算，单位字节，必返）
	WroteBytesSum int64 `protobuf:"varint,7,opt,name=wroteBytesSum,proto3" json:"wroteBytesSum,omitempty"`
	// 最近5秒总码率（单位kbit/s，对SUB类型等价于write_bitrate_kbits，必返）
	BitrateKbits int32 `protobuf:"varint,8,opt,name=bitrateKbits,proto3" json:"bitrateKbits,omitempty"`
	// 最近5秒读取数据码率（单位kbit/s，必返）
	ReadBitrateKbits int32 `protobuf:"varint,9,opt,name=readBitrateKbits,proto3" json:"readBitrateKbits,omitempty"`
	// 最近5秒发送数据码率（单位kbit/s，必返）
	WriteBitrateKbits int32 `protobuf:"varint,10,opt,name=writeBitrateKbits,proto3" json:"writeBitrateKbits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SubSessionInfo) Reset() {
	*x = SubSessionInfo{}
	mi := &file_lalproxy_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSessionInfo) ProtoMessage() {}

func (x *SubSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSessionInfo.ProtoReflect.Descriptor instead.
func (*SubSessionInfo) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{2}
}

func (x *SubSessionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SubSessionInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SubSessionInfo) GetBaseType() string {
	if x != nil {
		return x.BaseType
	}
	return ""
}

func (x *SubSessionInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *SubSessionInfo) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *SubSessionInfo) GetReadBytesSum() int64 {
	if x != nil {
		return x.ReadBytesSum
	}
	return 0
}

func (x *SubSessionInfo) GetWroteBytesSum() int64 {
	if x != nil {
		return x.WroteBytesSum
	}
	return 0
}

func (x *SubSessionInfo) GetBitrateKbits() int32 {
	if x != nil {
		return x.BitrateKbits
	}
	return 0
}

func (x *SubSessionInfo) GetReadBitrateKbits() int32 {
	if x != nil {
		return x.ReadBitrateKbits
	}
	return 0
}

func (x *SubSessionInfo) GetWriteBitrateKbits() int32 {
	if x != nil {
		return x.WriteBitrateKbits
	}
	return 0
}

// 中继拉流会话信息：对应接口返回的 data.pull（从其他节点拉流回源的详情）
type PullSessionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 会话ID（全局唯一标识，如"RTMPPULL1"，必返）
	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	// 拉流协议（取值："RTMP"|"RTSP"，必返）
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// 基础类型（固定为"PULL"，标识中继拉流角色，必返）
	BaseType string `protobuf:"bytes,3,opt,name=baseType,proto3" json:"baseType,omitempty"`
	// 拉流开始时间（格式化字符串，如"2020-10-11 19:20:00.123"，必返）
	StartTime string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// 对端地址（源节点IP:端口，如"192.168.1.10:1935"，必返）
	RemoteAddr string `protobuf:"bytes,5,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
	// 累计读取数据大小（从拉流开始计算，单位字节，必返）
	ReadBytesSum int64 `protobuf:"varint,6,opt,name=readBytesSum,proto3" json:"readBytesSum,omitempty"`
	// 累计发送数据大小（从拉流开始计算，单位字节，必返）
	WroteBytesSum int64 `protobuf:"varint,7,opt,name=wroteBytesSum,proto3" json:"wroteBytesSum,omitempty"`
	// 最近5秒总码率（单位kbit/s，对PULL类型等价于read_bitrate_kbits，必返）
	BitrateKbits int32 `protobuf:"varint,8,opt,name=bitrateKbits,proto3" json:"bitrateKbits,omitempty"`
	// 最近5秒读取数据码率（单位kbit/s，必返）
	ReadBitrateKbits int32 `protobuf:"varint,9,opt,name=readBitrateKbits,proto3" json:"readBitrateKbits,omitempty"`
	// 最近5秒发送数据码率（单位kbit/s，必返）
	WriteBitrateKbits int32 `protobuf:"varint,10,opt,name=writeBitrateKbits,proto3" json:"writeBitrateKbits,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PullSessionInfo) Reset() {
	*x = PullSessionInfo{}
	mi := &file_lalproxy_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PullSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullSessionInfo) ProtoMessage() {}

func (x *PullSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullSessionInfo.ProtoReflect.Descriptor instead.
func (*PullSessionInfo) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{3}
}

func (x *PullSessionInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PullSessionInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *PullSessionInfo) GetBaseType() string {
	if x != nil {
		return x.BaseType
	}
	return ""
}

func (x *PullSessionInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PullSessionInfo) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *PullSessionInfo) GetReadBytesSum() int64 {
	if x != nil {
		return x.ReadBytesSum
	}
	return 0
}

func (x *PullSessionInfo) GetWroteBytesSum() int64 {
	if x != nil {
		return x.WroteBytesSum
	}
	return 0
}

func (x *PullSessionInfo) GetBitrateKbits() int32 {
	if x != nil {
		return x.BitrateKbits
	}
	return 0
}

func (x *PullSessionInfo) GetReadBitrateKbits() int32 {
	if x != nil {
		return x.ReadBitrateKbits
	}
	return 0
}

func (x *PullSessionInfo) GetWriteBitrateKbits() int32 {
	if x != nil {
		return x.WriteBitrateKbits
	}
	return 0
}

// 中继推流会话信息：对应接口返回的 data.pushs（主动外连转推，暂不提供数据）
type PushSessionInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PushSessionInfo) Reset() {
	*x = PushSessionInfo{}
	mi := &file_lalproxy_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSessionInfo) ProtoMessage() {}

func (x *PushSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSessionInfo.ProtoReflect.Descriptor instead.
func (*PushSessionInfo) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{4}
}

// 分组核心数据：对应接口返回的 data 字段（流的完整信息聚合）
type GroupData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称（如"test110"，必返）
	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	// 应用名（如"live"，必返）
	AppName string `protobuf:"bytes,2,opt,name=appName,proto3" json:"appName,omitempty"`
	// 音频编码格式（如"AAC"，必返）
	AudioCodec string `protobuf:"bytes,3,opt,name=audioCodec,proto3" json:"audioCodec,omitempty"`
	// 视频编码格式（如"H264"|"H265"，必返）
	VideoCodec string `protobuf:"bytes,4,opt,name=videoCodec,proto3" json:"videoCodec,omitempty"`
	// 视频宽度（像素，如640，必返）
	VideoWidth int32 `protobuf:"varint,5,opt,name=videoWidth,proto3" json:"videoWidth,omitempty"`
	// 视频高度（像素，如360，必返）
	VideoHeight int32 `protobuf:"varint,6,opt,name=videoHeight,proto3" json:"videoHeight,omitempty"`
	// 发布者会话信息（推流详情，无推流时为nil，必返）
	Pub *PubSessionInfo `protobuf:"bytes,7,opt,name=pub,proto3" json:"pub,omitempty"`
	// 订阅者会话列表（拉流详情，无拉流时为空数组，必返）
	Subs []*SubSessionInfo `protobuf:"bytes,8,rep,name=subs,proto3" json:"subs,omitempty"`
	// 中继拉流会话信息（回源流详情，无回源时为nil，必返）
	Pull *PullSessionInfo `protobuf:"bytes,9,opt,name=pull,proto3" json:"pull,omitempty"`
	// 中继推流会话列表（外连转推，暂为空数组，必返）
	Pushs []*PushSessionInfo `protobuf:"bytes,10,rep,name=pushs,proto3" json:"pushs,omitempty"`
	// 最近32秒视频帧率统计（每秒视频帧数，必返）
	InFramePerSec []*FrameData `protobuf:"bytes,11,rep,name=inFramePerSec,proto3" json:"inFramePerSec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GroupData) Reset() {
	*x = GroupData{}
	mi := &file_lalproxy_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GroupData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupData) ProtoMessage() {}

func (x *GroupData) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupData.ProtoReflect.Descriptor instead.
func (*GroupData) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{5}
}

func (x *GroupData) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *GroupData) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *GroupData) GetAudioCodec() string {
	if x != nil {
		return x.AudioCodec
	}
	return ""
}

func (x *GroupData) GetVideoCodec() string {
	if x != nil {
		return x.VideoCodec
	}
	return ""
}

func (x *GroupData) GetVideoWidth() int32 {
	if x != nil {
		return x.VideoWidth
	}
	return 0
}

func (x *GroupData) GetVideoHeight() int32 {
	if x != nil {
		return x.VideoHeight
	}
	return 0
}

func (x *GroupData) GetPub() *PubSessionInfo {
	if x != nil {
		return x.Pub
	}
	return nil
}

func (x *GroupData) GetSubs() []*SubSessionInfo {
	if x != nil {
		return x.Subs
	}
	return nil
}

func (x *GroupData) GetPull() *PullSessionInfo {
	if x != nil {
		return x.Pull
	}
	return nil
}

func (x *GroupData) GetPushs() []*PushSessionInfo {
	if x != nil {
		return x.Pushs
	}
	return nil
}

func (x *GroupData) GetInFramePerSec() []*FrameData {
	if x != nil {
		return x.InFramePerSec
	}
	return nil
}

// 服务器基础信息：对应 /api/stat/lal_info 接口返回的「服务器基础信息」，与Go结构体 LalServerData 完全对齐
type LalServerData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 服务器唯一 ID
	ServerId string `protobuf:"bytes,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
	// 二进制文件信息
	BinInfo string `protobuf:"bytes,2,opt,name=binInfo,proto3" json:"binInfo,omitempty"`
	// lal可执行文件版本信息
	LalVersion string `protobuf:"bytes,3,opt,name=lalVersion,proto3" json:"lalVersion,omitempty"`
	// HTTP API接口版本信息
	ApiVersion string `protobuf:"bytes,4,opt,name=apiVersion,proto3" json:"apiVersion,omitempty"`
	// HTTP Notify版本信息
	NotifyVersion string `protobuf:"bytes,5,opt,name=notifyVersion,proto3" json:"notifyVersion,omitempty"`
	// Web UI版本信息
	WebUiVersion string `protobuf:"bytes,6,opt,name=webUiVersion,json=WebUiVersion,proto3" json:"webUiVersion,omitempty"`
	// lal进程启动时间
	StartTime     string `protobuf:"bytes,7,opt,name=startTime,proto3" json:"startTime,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LalServerData) Reset() {
	*x = LalServerData{}
	mi := &file_lalproxy_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LalServerData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LalServerData) ProtoMessage() {}

func (x *LalServerData) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LalServerData.ProtoReflect.Descriptor instead.
func (*LalServerData) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{6}
}

func (x *LalServerData) GetServerId() string {
	if x != nil {
		return x.ServerId
	}
	return ""
}

func (x *LalServerData) GetBinInfo() string {
	if x != nil {
		return x.BinInfo
	}
	return ""
}

func (x *LalServerData) GetLalVersion() string {
	if x != nil {
		return x.LalVersion
	}
	return ""
}

func (x *LalServerData) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *LalServerData) GetNotifyVersion() string {
	if x != nil {
		return x.NotifyVersion
	}
	return ""
}

func (x *LalServerData) GetWebUiVersion() string {
	if x != nil {
		return x.WebUiVersion
	}
	return ""
}

func (x *LalServerData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

// GetGroupInfo请求：对应/api/stat/group接口，查询指定流名称的group信息
type GetGroupInfoReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称（必填，URL参数；用于指定查询的group，如"test110"；缺失时返回error_code=1002）
	StreamName    string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupInfoReq) Reset() {
	*x = GetGroupInfoReq{}
	mi := &file_lalproxy_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoReq) ProtoMessage() {}

func (x *GetGroupInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoReq.ProtoReflect.Descriptor instead.
func (*GetGroupInfoReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{7}
}

func (x *GetGroupInfoReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// GetGroupInfo响应：对应/api/stat/group接口返回结果
type GetGroupInfoRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=成功，1001=group不存在，1002=参数缺失；参考lalserver HTTP API错误码规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因，如"group not found"；与errorCode一一对应）
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 分组详细数据（成功时返回，包含流编码、会话列表、帧率等信息；失败时为空）
	Data          *GroupData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetGroupInfoRes) Reset() {
	*x = GetGroupInfoRes{}
	mi := &file_lalproxy_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGroupInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupInfoRes) ProtoMessage() {}

func (x *GetGroupInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupInfoRes.ProtoReflect.Descriptor instead.
func (*GetGroupInfoRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{8}
}

func (x *GetGroupInfoRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetGroupInfoRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *GetGroupInfoRes) GetData() *GroupData {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetAllGroups请求：对应/api/stat/all_group接口，查询所有活跃group列表
type GetAllGroupsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllGroupsReq) Reset() {
	*x = GetAllGroupsReq{}
	mi := &file_lalproxy_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllGroupsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGroupsReq) ProtoMessage() {}

func (x *GetAllGroupsReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGroupsReq.ProtoReflect.Descriptor instead.
func (*GetAllGroupsReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{9}
}

// GetAllGroups响应：对应/api/stat/all_group接口返回结果
type GetAllGroupsRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（仅0=成功；无其他错误场景，参考lalserver HTTP API规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"；无失败场景，固定返回该值）
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 所有group列表（成功时返回，每个元素格式与GetGroupInfoRes.data一致；无活跃group时为空数组）
	Groups        []*GroupData `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllGroupsRes) Reset() {
	*x = GetAllGroupsRes{}
	mi := &file_lalproxy_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllGroupsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllGroupsRes) ProtoMessage() {}

func (x *GetAllGroupsRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllGroupsRes.ProtoReflect.Descriptor instead.
func (*GetAllGroupsRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllGroupsRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetAllGroupsRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *GetAllGroupsRes) GetGroups() []*GroupData {
	if x != nil {
		return x.Groups
	}
	return nil
}

// GetLalInfo请求：对应/api/stat/lal_info接口，查询lalserver服务器基础信息
type GetLalInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLalInfoReq) Reset() {
	*x = GetLalInfoReq{}
	mi := &file_lalproxy_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLalInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLalInfoReq) ProtoMessage() {}

func (x *GetLalInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLalInfoReq.ProtoReflect.Descriptor instead.
func (*GetLalInfoReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{11}
}

// GetLalInfo响应：对应/api/stat/lal_info接口返回结果
type GetLalInfoRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（仅0=成功；无其他错误场景，参考lalserver HTTP API规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"；无失败场景，固定返回该值）
	Desp string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	// 服务器信息数据（成功时返回，包含版本、启动时间等基础信息；无失败场景，必然非空）
	Data          *LalServerData `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLalInfoRes) Reset() {
	*x = GetLalInfoRes{}
	mi := &file_lalproxy_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLalInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLalInfoRes) ProtoMessage() {}

func (x *GetLalInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLalInfoRes.ProtoReflect.Descriptor instead.
func (*GetLalInfoRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{12}
}

func (x *GetLalInfoRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetLalInfoRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

func (x *GetLalInfoRes) GetData() *LalServerData {
	if x != nil {
		return x.Data
	}
	return nil
}

// StartRelayPull请求：对应/api/ctrl/start_relay_pull接口，控制服务器从远端拉流
type StartRelayPullReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 拉流URL（必填，JSON Body参数；支持RTMP/RTSP协议，如"rtmp://127.0.0.1/live/test110"；缺失时返回error_code=1002）
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// 流名称（选填，JSON Body参数；不指定则从url中解析；如"test110"）
	StreamName string `protobuf:"bytes,2,opt,name=streamName,proto3" json:"streamName,omitempty"`
	// 拉流超时时间（选填，JSON Body参数；单位毫秒，默认10000ms；表示建立拉流会话的超时阈值）
	PullTimeoutMs int32 `protobuf:"varint,3,opt,name=pullTimeoutMs,proto3" json:"pullTimeoutMs,omitempty"`
	// 拉流重试次数（选填，JSON Body参数；-1=一直重试，0=不重试，>0=指定次数；默认0；断开后是否自动重试）
	PullRetryNum int32 `protobuf:"varint,4,opt,name=pullRetryNum,proto3" json:"pullRetryNum,omitempty"`
	// 无输出自动停止时间（选填，JSON Body参数；单位毫秒，默认-1；-1=不自动停止，>0=无观看者持续该时长后停止拉流）
	AutoStopPullAfterNoOutMs int32 `protobuf:"varint,5,opt,name=autoStopPullAfterNoOutMs,proto3" json:"autoStopPullAfterNoOutMs,omitempty"`
	// RTSP模式（选填，JSON Body参数；0=TCP，1=UDP；仅RTSP协议拉流时生效，默认0）
	RtspMode int32 `protobuf:"varint,6,opt,name=rtspMode,proto3" json:"rtspMode,omitempty"`
	// 调试数据包存储路径（选填，JSON Body参数；默认空字符串；非空时将拉流数据存为文件，如"./dump/test110.laldump"，用于问题排查）
	DebugDumpPacket string `protobuf:"bytes,7,opt,name=debugDumpPacket,proto3" json:"debugDumpPacket,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StartRelayPullReq) Reset() {
	*x = StartRelayPullReq{}
	mi := &file_lalproxy_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRelayPullReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRelayPullReq) ProtoMessage() {}

func (x *StartRelayPullReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRelayPullReq.ProtoReflect.Descriptor instead.
func (*StartRelayPullReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{13}
}

func (x *StartRelayPullReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StartRelayPullReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StartRelayPullReq) GetPullTimeoutMs() int32 {
	if x != nil {
		return x.PullTimeoutMs
	}
	return 0
}

func (x *StartRelayPullReq) GetPullRetryNum() int32 {
	if x != nil {
		return x.PullRetryNum
	}
	return 0
}

func (x *StartRelayPullReq) GetAutoStopPullAfterNoOutMs() int32 {
	if x != nil {
		return x.AutoStopPullAfterNoOutMs
	}
	return 0
}

func (x *StartRelayPullReq) GetRtspMode() int32 {
	if x != nil {
		return x.RtspMode
	}
	return 0
}

func (x *StartRelayPullReq) GetDebugDumpPacket() string {
	if x != nil {
		return x.DebugDumpPacket
	}
	return ""
}

// StartRelayPull响应：对应/api/ctrl/start_relay_pull接口返回结果
type StartRelayPullRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=请求成功，1002=参数错误，2001=拉流失败；2001包含具体失败原因，如"in stream already exist"）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因；如参数错误返回"param missing"，拉流失败返回"lal.logic: in stream already exist"）
	Desp          string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRelayPullRes) Reset() {
	*x = StartRelayPullRes{}
	mi := &file_lalproxy_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRelayPullRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRelayPullRes) ProtoMessage() {}

func (x *StartRelayPullRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRelayPullRes.ProtoReflect.Descriptor instead.
func (*StartRelayPullRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{14}
}

func (x *StartRelayPullRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StartRelayPullRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

// StopRelayPull请求：对应/api/ctrl/stop_relay_pull接口，停止指定流的中继拉流
type StopRelayPullReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称（必填，URL参数；用于指定停止拉流的group，如"test110"；缺失时返回error_code=1002）
	StreamName    string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRelayPullReq) Reset() {
	*x = StopRelayPullReq{}
	mi := &file_lalproxy_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRelayPullReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRelayPullReq) ProtoMessage() {}

func (x *StopRelayPullReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRelayPullReq.ProtoReflect.Descriptor instead.
func (*StopRelayPullReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{15}
}

func (x *StopRelayPullReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// StopRelayPull响应：对应/api/ctrl/stop_relay_pull接口返回结果
type StopRelayPullRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=成功，1001=group不存在，1002=参数缺失，1003=pull会话不存在；参考lalserver HTTP API错误码规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因，如"pull session not found"；与errorCode一一对应）
	Desp          string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRelayPullRes) Reset() {
	*x = StopRelayPullRes{}
	mi := &file_lalproxy_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRelayPullRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRelayPullRes) ProtoMessage() {}

func (x *StopRelayPullRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRelayPullRes.ProtoReflect.Descriptor instead.
func (*StopRelayPullRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{16}
}

func (x *StopRelayPullRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StopRelayPullRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

// KickSession请求：对应/api/ctrl/kick_session接口，踢出指定流的指定会话
type KickSessionReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称（必填，JSON Body参数；会话所属的group，如"test110"；缺失时返回error_code=1002）
	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	// 会话ID（必填，JSON Body参数；唯一标识要踢出的会话，如"FLVSUB1"；需从查询接口获取，缺失时返回error_code=1002）
	SessionId     string `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickSessionReq) Reset() {
	*x = KickSessionReq{}
	mi := &file_lalproxy_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickSessionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickSessionReq) ProtoMessage() {}

func (x *KickSessionReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickSessionReq.ProtoReflect.Descriptor instead.
func (*KickSessionReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{17}
}

func (x *KickSessionReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *KickSessionReq) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// KickSession响应：对应/api/ctrl/kick_session接口返回结果
type KickSessionRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=成功，1001=group不存在，1002=参数错误，1003=会话不存在；参考lalserver HTTP API错误码规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因，如"session not found"；与errorCode一一对应）
	Desp          string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KickSessionRes) Reset() {
	*x = KickSessionRes{}
	mi := &file_lalproxy_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickSessionRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickSessionRes) ProtoMessage() {}

func (x *KickSessionRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickSessionRes.ProtoReflect.Descriptor instead.
func (*KickSessionRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{18}
}

func (x *KickSessionRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *KickSessionRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

// StartRtpPub请求：对应/api/ctrl/start_rtp_pub接口，打开GB28181 RTP接收端口
type StartRtpPubReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称（必填，JSON Body参数；绑定RTP流的标识，如"test110"；后续拉流、录制均使用该名称，缺失时返回error_code=1002）
	StreamName string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	// 接收端口（选填，JSON Body参数；默认0；0表示随机分配端口，非0表示指定端口；绑定失败返回error_code=2002）
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// 超时时间（选填，JSON Body参数；单位毫秒，默认60000ms；超时无数据则关闭端口，0表示不超时）
	TimeoutMs int32 `protobuf:"varint,3,opt,name=timeoutMs,proto3" json:"timeoutMs,omitempty"`
	// TCP传输标识（选填，JSON Body参数；0=UDP，1=TCP；默认0；指定RTP流的传输协议）
	IsTcpFlag int32 `protobuf:"varint,4,opt,name=isTcpFlag,proto3" json:"isTcpFlag,omitempty"`
	// 调试数据包存储路径（选填，JSON Body参数；默认空字符串；非空时存储RTP数据到文件，用于问题排查，如"/tmp/test110.laldump"）
	DebugDumpPacket string `protobuf:"bytes,5,opt,name=debugDumpPacket,proto3" json:"debugDumpPacket,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StartRtpPubReq) Reset() {
	*x = StartRtpPubReq{}
	mi := &file_lalproxy_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRtpPubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRtpPubReq) ProtoMessage() {}

func (x *StartRtpPubReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRtpPubReq.ProtoReflect.Descriptor instead.
func (*StartRtpPubReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{19}
}

func (x *StartRtpPubReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StartRtpPubReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartRtpPubReq) GetTimeoutMs() int32 {
	if x != nil {
		return x.TimeoutMs
	}
	return 0
}

func (x *StartRtpPubReq) GetIsTcpFlag() int32 {
	if x != nil {
		return x.IsTcpFlag
	}
	return 0
}

func (x *StartRtpPubReq) GetDebugDumpPacket() string {
	if x != nil {
		return x.DebugDumpPacket
	}
	return ""
}

// StartRtpPub响应：对应/api/ctrl/start_rtp_pub接口返回结果
type StartRtpPubRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=成功，1002=参数错误，2002=端口绑定失败；参考lalserver HTTP API错误码规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因，如"open gb28181 port failed"；与errorCode一一对应）
	Desp          string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartRtpPubRes) Reset() {
	*x = StartRtpPubRes{}
	mi := &file_lalproxy_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartRtpPubRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRtpPubRes) ProtoMessage() {}

func (x *StartRtpPubRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRtpPubRes.ProtoReflect.Descriptor instead.
func (*StartRtpPubRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{20}
}

func (x *StartRtpPubRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StartRtpPubRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

// StopRtpPub请求：对应/api/ctrl/stop_rtp_pub接口（注：根据lalserver文档，当前暂未开放，需使用KickSession接口替代）
type StopRtpPubReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 流名称（选填，JSON Body参数；用于匹配要关闭的RTP流，如"test110"）
	StreamName    string `protobuf:"bytes,1,opt,name=streamName,proto3" json:"streamName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRtpPubReq) Reset() {
	*x = StopRtpPubReq{}
	mi := &file_lalproxy_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRtpPubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRtpPubReq) ProtoMessage() {}

func (x *StopRtpPubReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRtpPubReq.ProtoReflect.Descriptor instead.
func (*StopRtpPubReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{21}
}

func (x *StopRtpPubReq) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// StopRtpPub响应：对应/api/ctrl/stop_rtp_pub接口返回结果（注：接口暂未开放，返回结果参考KickSession）
type StopRtpPubRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=成功，1001=group不存在，1002=参数错误，1003=RTP会话不存在；参考lalserver HTTP API错误码规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因，如"rtp pub session not found"；与errorCode一一对应）
	Desp          string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopRtpPubRes) Reset() {
	*x = StopRtpPubRes{}
	mi := &file_lalproxy_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopRtpPubRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRtpPubRes) ProtoMessage() {}

func (x *StopRtpPubRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRtpPubRes.ProtoReflect.Descriptor instead.
func (*StopRtpPubRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{22}
}

func (x *StopRtpPubRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *StopRtpPubRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

// AddIpBlacklist请求：对应/api/ctrl/add_ip_blacklist接口，添加IP到HLS协议黑名单
type AddIpBlacklistReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IP地址（必填，JSON Body参数；要加入黑名单的客户端IP，如"127.0.0.1"；缺失时返回error_code=1002）
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// 黑名单时长（必填，JSON Body参数；单位秒，如60；表示IP在黑名单中的有效时间，缺失时返回error_code=1002）
	DurationSec   int32 `protobuf:"varint,2,opt,name=durationSec,proto3" json:"durationSec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIpBlacklistReq) Reset() {
	*x = AddIpBlacklistReq{}
	mi := &file_lalproxy_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIpBlacklistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIpBlacklistReq) ProtoMessage() {}

func (x *AddIpBlacklistReq) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIpBlacklistReq.ProtoReflect.Descriptor instead.
func (*AddIpBlacklistReq) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{23}
}

func (x *AddIpBlacklistReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddIpBlacklistReq) GetDurationSec() int32 {
	if x != nil {
		return x.DurationSec
	}
	return 0
}

// AddIpBlacklist响应：对应/api/ctrl/add_ip_blacklist接口返回结果
type AddIpBlacklistRes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 错误码（0=成功，1002=参数错误；参考lalserver HTTP API错误码规范）
	ErrorCode int32 `protobuf:"varint,1,opt,name=errorCode,proto3" json:"errorCode,omitempty"`
	// 错误描述（成功时为"succ"，失败时为具体原因，如"ip invalid"；与errorCode一一对应）
	Desp          string `protobuf:"bytes,2,opt,name=desp,proto3" json:"desp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIpBlacklistRes) Reset() {
	*x = AddIpBlacklistRes{}
	mi := &file_lalproxy_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIpBlacklistRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIpBlacklistRes) ProtoMessage() {}

func (x *AddIpBlacklistRes) ProtoReflect() protoreflect.Message {
	mi := &file_lalproxy_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIpBlacklistRes.ProtoReflect.Descriptor instead.
func (*AddIpBlacklistRes) Descriptor() ([]byte, []int) {
	return file_lalproxy_proto_rawDescGZIP(), []int{24}
}

func (x *AddIpBlacklistRes) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *AddIpBlacklistRes) GetDesp() string {
	if x != nil {
		return x.Desp
	}
	return ""
}

var File_lalproxy_proto protoreflect.FileDescriptor

const file_lalproxy_proto_rawDesc = "" +
	"\n" +
	"\x0elalproxy.proto\x12\blalproxy\"3\n" +
	"\tFrameData\x12\x18\n" +
	"\aunixSec\x18\x01 \x01(\x03R\aunixSec\x12\f\n" +
	"\x01v\x18\x02 \x01(\x05R\x01v\"\xec\x02\n" +
	"\x0ePubSessionInfo\x12\x1c\n" +
	"\tsessionId\x18\x01 \x01(\tR\tsessionId\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x1a\n" +
	"\bbaseType\x18\x03 \x01(\tR\bbaseType\x12\x1c\n" +
	"\tstartTime\x18\x04 \x01(\tR\tstartTime\x12\x1e\n" +
	"\n" +
	"remoteAddr\x18\x05 \x01(\tR\n" +
	"remoteAddr\x12\"\n" +
	"\freadBytesSum\x18\x06 \x01(\x03R\freadBytesSum\x12$\n" +
	"\rwroteBytesSum\x18\a \x01(\x03R\rwroteBytesSum\x12\"\n" +
	"\fbitrateKbits\x18\b \x01(\x05R\fbitrateKbits\x12*\n" +
	"\x10readBitrateKbits\x18\t \x01(\x05R\x10readBitrateKbits\x12,\n" +
	"\x11writeBitrateKbits\x18\n" +
	" \x01(\x05R\x11writeBitrateKbits\"\xec\x02\n" +
	"\x0eSubSessionInfo\x12\x1c\n" +
	"\tsessionId\x18\x01 \x01(\tR\tsessionId\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x1a\n" +
	"\bbaseType\x18\x03 \x01(\tR\bbaseType\x12\x1c\n" +
	"\tstartTime\x18\x04 \x01(\tR\tstartTime\x12\x1e\n" +
	"\n" +
	"remoteAddr\x18\x05 \x01(\tR\n" +
	"remoteAddr\x12\"\n" +
	"\freadBytesSum\x18\x06 \x01(\x03R\freadBytesSum\x12$\n" +
	"\rwroteBytesSum\x18\a \x01(\x03R\rwroteBytesSum\x12\"\n" +
	"\fbitrateKbits\x18\b \x01(\x05R\fbitrateKbits\x12*\n" +
	"\x10readBitrateKbits\x18\t \x01(\x05R\x10readBitrateKbits\x12,\n" +
	"\x11writeBitrateKbits\x18\n" +
	" \x01(\x05R\x11writeBitrateKbits\"\xed\x02\n" +
	"\x0fPullSessionInfo\x12\x1c\n" +
	"\tsessionId\x18\x01 \x01(\tR\tsessionId\x12\x1a\n" +
	"\bprotocol\x18\x02 \x01(\tR\bprotocol\x12\x1a\n" +
	"\bbaseType\x18\x03 \x01(\tR\bbaseType\x12\x1c\n" +
	"\tstartTime\x18\x04 \x01(\tR\tstartTime\x12\x1e\n" +
	"\n" +
	"remoteAddr\x18\x05 \x01(\tR\n" +
	"remoteAddr\x12\"\n" +
	"\freadBytesSum\x18\x06 \x01(\x03R\freadBytesSum\x12$\n" +
	"\rwroteBytesSum\x18\a \x01(\x03R\rwroteBytesSum\x12\"\n" +
	"\fbitrateKbits\x18\b \x01(\x05R\fbitrateKbits\x12*\n" +
	"\x10readBitrateKbits\x18\t \x01(\x05R\x10readBitrateKbits\x12,\n" +
	"\x11writeBitrateKbits\x18\n" +
	" \x01(\x05R\x11writeBitrateKbits\"\x11\n" +
	"\x0fPushSessionInfo\"\xbc\x03\n" +
	"\tGroupData\x12\x1e\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\n" +
	"streamName\x12\x18\n" +
	"\aappName\x18\x02 \x01(\tR\aappName\x12\x1e\n" +
	"\n" +
	"audioCodec\x18\x03 \x01(\tR\n" +
	"audioCodec\x12\x1e\n" +
	"\n" +
	"videoCodec\x18\x04 \x01(\tR\n" +
	"videoCodec\x12\x1e\n" +
	"\n" +
	"videoWidth\x18\x05 \x01(\x05R\n" +
	"videoWidth\x12 \n" +
	"\vvideoHeight\x18\x06 \x01(\x05R\vvideoHeight\x12*\n" +
	"\x03pub\x18\a \x01(\v2\x18.lalproxy.PubSessionInfoR\x03pub\x12,\n" +
	"\x04subs\x18\b \x03(\v2\x18.lalproxy.SubSessionInfoR\x04subs\x12-\n" +
	"\x04pull\x18\t \x01(\v2\x19.lalproxy.PullSessionInfoR\x04pull\x12/\n" +
	"\x05pushs\x18\n" +
	" \x03(\v2\x19.lalproxy.PushSessionInfoR\x05pushs\x129\n" +
	"\rinFramePerSec\x18\v \x03(\v2\x13.lalproxy.FrameDataR\rinFramePerSec\"\xed\x01\n" +
	"\rLalServerData\x12\x1a\n" +
	"\bserverId\x18\x01 \x01(\tR\bserverId\x12\x18\n" +
	"\abinInfo\x18\x02 \x01(\tR\abinInfo\x12\x1e\n" +
	"\n" +
	"lalVersion\x18\x03 \x01(\tR\n" +
	"lalVersion\x12\x1e\n" +
	"\n" +
	"apiVersion\x18\x04 \x01(\tR\n" +
	"apiVersion\x12$\n" +
	"\rnotifyVersion\x18\x05 \x01(\tR\rnotifyVersion\x12\"\n" +
	"\fwebUiVersion\x18\x06 \x01(\tR\fWebUiVersion\x12\x1c\n" +
	"\tstartTime\x18\a \x01(\tR\tstartTime\"1\n" +
	"\x0fGetGroupInfoReq\x12\x1e\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\n" +
	"streamName\"l\n" +
	"\x0fGetGroupInfoRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x12'\n" +
	"\x04data\x18\x03 \x01(\v2\x13.lalproxy.GroupDataR\x04data\"\x11\n" +
	"\x0fGetAllGroupsReq\"p\n" +
	"\x0fGetAllGroupsRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x12+\n" +
	"\x06groups\x18\x03 \x03(\v2\x13.lalproxy.GroupDataR\x06groups\"\x0f\n" +
	"\rGetLalInfoReq\"n\n" +
	"\rGetLalInfoRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\x12+\n" +
	"\x04data\x18\x03 \x01(\v2\x17.lalproxy.LalServerDataR\x04data\"\x91\x02\n" +
	"\x11StartRelayPullReq\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1e\n" +
	"\n" +
	"streamName\x18\x02 \x01(\tR\n" +
	"streamName\x12$\n" +
	"\rpullTimeoutMs\x18\x03 \x01(\x05R\rpullTimeoutMs\x12\"\n" +
	"\fpullRetryNum\x18\x04 \x01(\x05R\fpullRetryNum\x12:\n" +
	"\x18autoStopPullAfterNoOutMs\x18\x05 \x01(\x05R\x18autoStopPullAfterNoOutMs\x12\x1a\n" +
	"\brtspMode\x18\x06 \x01(\x05R\brtspMode\x12(\n" +
	"\x0fdebugDumpPacket\x18\a \x01(\tR\x0fdebugDumpPacket\"E\n" +
	"\x11StartRelayPullRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\"2\n" +
	"\x10StopRelayPullReq\x12\x1e\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\n" +
	"streamName\"D\n" +
	"\x10StopRelayPullRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\"N\n" +
	"\x0eKickSessionReq\x12\x1e\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\n" +
	"streamName\x12\x1c\n" +
	"\tsessionId\x18\x02 \x01(\tR\tsessionId\"B\n" +
	"\x0eKickSessionRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\"\xaa\x01\n" +
	"\x0eStartRtpPubReq\x12\x1e\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\n" +
	"streamName\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1c\n" +
	"\ttimeoutMs\x18\x03 \x01(\x05R\ttimeoutMs\x12\x1c\n" +
	"\tisTcpFlag\x18\x04 \x01(\x05R\tisTcpFlag\x12(\n" +
	"\x0fdebugDumpPacket\x18\x05 \x01(\tR\x0fdebugDumpPacket\"B\n" +
	"\x0eStartRtpPubRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\"/\n" +
	"\rStopRtpPubReq\x12\x1e\n" +
	"\n" +
	"streamName\x18\x01 \x01(\tR\n" +
	"streamName\"A\n" +
	"\rStopRtpPubRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp\"E\n" +
	"\x11AddIpBlacklistReq\x12\x0e\n" +
	"\x02ip\x18\x01 \x01(\tR\x02ip\x12 \n" +
	"\vdurationSec\x18\x02 \x01(\x05R\vdurationSec\"E\n" +
	"\x11AddIpBlacklistRes\x12\x1c\n" +
	"\terrorCode\x18\x01 \x01(\x05R\terrorCode\x12\x12\n" +
	"\x04desp\x18\x02 \x01(\tR\x04desp2\xfd\x04\n" +
	"\blalProxy\x12D\n" +
	"\fGetGroupInfo\x12\x19.lalproxy.GetGroupInfoReq\x1a\x19.lalproxy.GetGroupInfoRes\x12D\n" +
	"\fGetAllGroups\x12\x19.lalproxy.GetAllGroupsReq\x1a\x19.lalproxy.GetAllGroupsRes\x12>\n" +
	"\n" +
	"GetLalInfo\x12\x17.lalproxy.GetLalInfoReq\x1a\x17.lalproxy.GetLalInfoRes\x12J\n" +
	"\x0eStartRelayPull\x12\x1b.lalproxy.StartRelayPullReq\x1a\x1b.lalproxy.StartRelayPullRes\x12G\n" +
	"\rStopRelayPull\x12\x1a.lalproxy.StopRelayPullReq\x1a\x1a.lalproxy.StopRelayPullRes\x12A\n" +
	"\vKickSession\x12\x18.lalproxy.KickSessionReq\x1a\x18.lalproxy.KickSessionRes\x12A\n" +
	"\vStartRtpPub\x12\x18.lalproxy.StartRtpPubReq\x1a\x18.lalproxy.StartRtpPubRes\x12>\n" +
	"\n" +
	"StopRtpPub\x12\x17.lalproxy.StopRtpPubReq\x1a\x17.lalproxy.StopRtpPubRes\x12J\n" +
	"\x0eAddIpBlacklist\x12\x1b.lalproxy.AddIpBlacklistReq\x1a\x1b.lalproxy.AddIpBlacklistResB7\n" +
	"\x18com.github.lalproxy.grpcB\rLalProxyProtoP\x01Z\n" +
	"./lalproxyb\x06proto3"

var (
	file_lalproxy_proto_rawDescOnce sync.Once
	file_lalproxy_proto_rawDescData []byte
)

func file_lalproxy_proto_rawDescGZIP() []byte {
	file_lalproxy_proto_rawDescOnce.Do(func() {
		file_lalproxy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_lalproxy_proto_rawDesc), len(file_lalproxy_proto_rawDesc)))
	})
	return file_lalproxy_proto_rawDescData
}

var file_lalproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_lalproxy_proto_goTypes = []any{
	(*FrameData)(nil),         // 0: lalproxy.FrameData
	(*PubSessionInfo)(nil),    // 1: lalproxy.PubSessionInfo
	(*SubSessionInfo)(nil),    // 2: lalproxy.SubSessionInfo
	(*PullSessionInfo)(nil),   // 3: lalproxy.PullSessionInfo
	(*PushSessionInfo)(nil),   // 4: lalproxy.PushSessionInfo
	(*GroupData)(nil),         // 5: lalproxy.GroupData
	(*LalServerData)(nil),     // 6: lalproxy.LalServerData
	(*GetGroupInfoReq)(nil),   // 7: lalproxy.GetGroupInfoReq
	(*GetGroupInfoRes)(nil),   // 8: lalproxy.GetGroupInfoRes
	(*GetAllGroupsReq)(nil),   // 9: lalproxy.GetAllGroupsReq
	(*GetAllGroupsRes)(nil),   // 10: lalproxy.GetAllGroupsRes
	(*GetLalInfoReq)(nil),     // 11: lalproxy.GetLalInfoReq
	(*GetLalInfoRes)(nil),     // 12: lalproxy.GetLalInfoRes
	(*StartRelayPullReq)(nil), // 13: lalproxy.StartRelayPullReq
	(*StartRelayPullRes)(nil), // 14: lalproxy.StartRelayPullRes
	(*StopRelayPullReq)(nil),  // 15: lalproxy.StopRelayPullReq
	(*StopRelayPullRes)(nil),  // 16: lalproxy.StopRelayPullRes
	(*KickSessionReq)(nil),    // 17: lalproxy.KickSessionReq
	(*KickSessionRes)(nil),    // 18: lalproxy.KickSessionRes
	(*StartRtpPubReq)(nil),    // 19: lalproxy.StartRtpPubReq
	(*StartRtpPubRes)(nil),    // 20: lalproxy.StartRtpPubRes
	(*StopRtpPubReq)(nil),     // 21: lalproxy.StopRtpPubReq
	(*StopRtpPubRes)(nil),     // 22: lalproxy.StopRtpPubRes
	(*AddIpBlacklistReq)(nil), // 23: lalproxy.AddIpBlacklistReq
	(*AddIpBlacklistRes)(nil), // 24: lalproxy.AddIpBlacklistRes
}
var file_lalproxy_proto_depIdxs = []int32{
	1,  // 0: lalproxy.GroupData.pub:type_name -> lalproxy.PubSessionInfo
	2,  // 1: lalproxy.GroupData.subs:type_name -> lalproxy.SubSessionInfo
	3,  // 2: lalproxy.GroupData.pull:type_name -> lalproxy.PullSessionInfo
	4,  // 3: lalproxy.GroupData.pushs:type_name -> lalproxy.PushSessionInfo
	0,  // 4: lalproxy.GroupData.inFramePerSec:type_name -> lalproxy.FrameData
	5,  // 5: lalproxy.GetGroupInfoRes.data:type_name -> lalproxy.GroupData
	5,  // 6: lalproxy.GetAllGroupsRes.groups:type_name -> lalproxy.GroupData
	6,  // 7: lalproxy.GetLalInfoRes.data:type_name -> lalproxy.LalServerData
	7,  // 8: lalproxy.lalProxy.GetGroupInfo:input_type -> lalproxy.GetGroupInfoReq
	9,  // 9: lalproxy.lalProxy.GetAllGroups:input_type -> lalproxy.GetAllGroupsReq
	11, // 10: lalproxy.lalProxy.GetLalInfo:input_type -> lalproxy.GetLalInfoReq
	13, // 11: lalproxy.lalProxy.StartRelayPull:input_type -> lalproxy.StartRelayPullReq
	15, // 12: lalproxy.lalProxy.StopRelayPull:input_type -> lalproxy.StopRelayPullReq
	17, // 13: lalproxy.lalProxy.KickSession:input_type -> lalproxy.KickSessionReq
	19, // 14: lalproxy.lalProxy.StartRtpPub:input_type -> lalproxy.StartRtpPubReq
	21, // 15: lalproxy.lalProxy.StopRtpPub:input_type -> lalproxy.StopRtpPubReq
	23, // 16: lalproxy.lalProxy.AddIpBlacklist:input_type -> lalproxy.AddIpBlacklistReq
	8,  // 17: lalproxy.lalProxy.GetGroupInfo:output_type -> lalproxy.GetGroupInfoRes
	10, // 18: lalproxy.lalProxy.GetAllGroups:output_type -> lalproxy.GetAllGroupsRes
	12, // 19: lalproxy.lalProxy.GetLalInfo:output_type -> lalproxy.GetLalInfoRes
	14, // 20: lalproxy.lalProxy.StartRelayPull:output_type -> lalproxy.StartRelayPullRes
	16, // 21: lalproxy.lalProxy.StopRelayPull:output_type -> lalproxy.StopRelayPullRes
	18, // 22: lalproxy.lalProxy.KickSession:output_type -> lalproxy.KickSessionRes
	20, // 23: lalproxy.lalProxy.StartRtpPub:output_type -> lalproxy.StartRtpPubRes
	22, // 24: lalproxy.lalProxy.StopRtpPub:output_type -> lalproxy.StopRtpPubRes
	24, // 25: lalproxy.lalProxy.AddIpBlacklist:output_type -> lalproxy.AddIpBlacklistRes
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_lalproxy_proto_init() }
func file_lalproxy_proto_init() {
	if File_lalproxy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_lalproxy_proto_rawDesc), len(file_lalproxy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lalproxy_proto_goTypes,
		DependencyIndexes: file_lalproxy_proto_depIdxs,
		MessageInfos:      file_lalproxy_proto_msgTypes,
	}.Build()
	File_lalproxy_proto = out.File
	file_lalproxy_proto_goTypes = nil
	file_lalproxy_proto_depIdxs = nil
}
