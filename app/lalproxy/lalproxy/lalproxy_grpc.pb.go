// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: lalproxy.proto

package lalproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LalProxy_GetGroupInfo_FullMethodName   = "/lalproxy.lalProxy/GetGroupInfo"
	LalProxy_GetAllGroups_FullMethodName   = "/lalproxy.lalProxy/GetAllGroups"
	LalProxy_GetLalInfo_FullMethodName     = "/lalproxy.lalProxy/GetLalInfo"
	LalProxy_StartRelayPull_FullMethodName = "/lalproxy.lalProxy/StartRelayPull"
	LalProxy_StopRelayPull_FullMethodName  = "/lalproxy.lalProxy/StopRelayPull"
	LalProxy_KickSession_FullMethodName    = "/lalproxy.lalProxy/KickSession"
	LalProxy_StartRtpPub_FullMethodName    = "/lalproxy.lalProxy/StartRtpPub"
	LalProxy_StopRtpPub_FullMethodName     = "/lalproxy.lalProxy/StopRtpPub"
	LalProxy_AddIpBlacklist_FullMethodName = "/lalproxy.lalProxy/AddIpBlacklist"
)

// LalProxyClient is the client API for LalProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// lalProxy：封装lalserver全部HTTP API能力，包含查询类（/api/stat）和控制类（/api/ctrl）接口
type LalProxyClient interface {
	// 查询指定group信息（对应HTTP API：/api/stat/group，GET请求+URL参数）
	GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoRes, error)
	// 查询所有group信息（对应HTTP API：/api/stat/all_group，GET请求，无参数）
	GetAllGroups(ctx context.Context, in *GetAllGroupsReq, opts ...grpc.CallOption) (*GetAllGroupsRes, error)
	// 查询服务器基础信息（对应HTTP API：/api/stat/lal_info，GET请求，无参数）
	GetLalInfo(ctx context.Context, in *GetLalInfoReq, opts ...grpc.CallOption) (*GetLalInfoRes, error)
	// 启动中继拉流（对应HTTP API：/api/ctrl/start_relay_pull，POST请求+JSON Body）
	StartRelayPull(ctx context.Context, in *StartRelayPullReq, opts ...grpc.CallOption) (*StartRelayPullRes, error)
	// 停止中继拉流（对应HTTP API：/api/ctrl/stop_relay_pull，GET请求+URL参数）
	StopRelayPull(ctx context.Context, in *StopRelayPullReq, opts ...grpc.CallOption) (*StopRelayPullRes, error)
	// 踢出指定会话（对应HTTP API：/api/ctrl/kick_session，POST请求+JSON Body；支持关闭pub/sub/pull类型会话）
	KickSession(ctx context.Context, in *KickSessionReq, opts ...grpc.CallOption) (*KickSessionRes, error)
	// 打开GB28181 RTP接收端口（对应HTTP API：/api/ctrl/start_rtp_pub，POST请求+JSON Body）
	StartRtpPub(ctx context.Context, in *StartRtpPubReq, opts ...grpc.CallOption) (*StartRtpPubRes, error)
	// 关闭GB28181 RTP接收端口（注：根据lalserver文档，当前需通过KickSession接口实现，本接口暂未开放）
	StopRtpPub(ctx context.Context, in *StopRtpPubReq, opts ...grpc.CallOption) (*StopRtpPubRes, error)
	// 添加IP到黑名单（对应HTTP API：/api/ctrl/add_ip_blacklist，POST请求+JSON Body；目前仅支持HLS协议）
	AddIpBlacklist(ctx context.Context, in *AddIpBlacklistReq, opts ...grpc.CallOption) (*AddIpBlacklistRes, error)
}

type lalProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewLalProxyClient(cc grpc.ClientConnInterface) LalProxyClient {
	return &lalProxyClient{cc}
}

func (c *lalProxyClient) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGroupInfoRes)
	err := c.cc.Invoke(ctx, LalProxy_GetGroupInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) GetAllGroups(ctx context.Context, in *GetAllGroupsReq, opts ...grpc.CallOption) (*GetAllGroupsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGroupsRes)
	err := c.cc.Invoke(ctx, LalProxy_GetAllGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) GetLalInfo(ctx context.Context, in *GetLalInfoReq, opts ...grpc.CallOption) (*GetLalInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLalInfoRes)
	err := c.cc.Invoke(ctx, LalProxy_GetLalInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) StartRelayPull(ctx context.Context, in *StartRelayPullReq, opts ...grpc.CallOption) (*StartRelayPullRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRelayPullRes)
	err := c.cc.Invoke(ctx, LalProxy_StartRelayPull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) StopRelayPull(ctx context.Context, in *StopRelayPullReq, opts ...grpc.CallOption) (*StopRelayPullRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopRelayPullRes)
	err := c.cc.Invoke(ctx, LalProxy_StopRelayPull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) KickSession(ctx context.Context, in *KickSessionReq, opts ...grpc.CallOption) (*KickSessionRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KickSessionRes)
	err := c.cc.Invoke(ctx, LalProxy_KickSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) StartRtpPub(ctx context.Context, in *StartRtpPubReq, opts ...grpc.CallOption) (*StartRtpPubRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartRtpPubRes)
	err := c.cc.Invoke(ctx, LalProxy_StartRtpPub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) StopRtpPub(ctx context.Context, in *StopRtpPubReq, opts ...grpc.CallOption) (*StopRtpPubRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopRtpPubRes)
	err := c.cc.Invoke(ctx, LalProxy_StopRtpPub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lalProxyClient) AddIpBlacklist(ctx context.Context, in *AddIpBlacklistReq, opts ...grpc.CallOption) (*AddIpBlacklistRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddIpBlacklistRes)
	err := c.cc.Invoke(ctx, LalProxy_AddIpBlacklist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LalProxyServer is the server API for LalProxy service.
// All implementations must embed UnimplementedLalProxyServer
// for forward compatibility.
//
// lalProxy：封装lalserver全部HTTP API能力，包含查询类（/api/stat）和控制类（/api/ctrl）接口
type LalProxyServer interface {
	// 查询指定group信息（对应HTTP API：/api/stat/group，GET请求+URL参数）
	GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoRes, error)
	// 查询所有group信息（对应HTTP API：/api/stat/all_group，GET请求，无参数）
	GetAllGroups(context.Context, *GetAllGroupsReq) (*GetAllGroupsRes, error)
	// 查询服务器基础信息（对应HTTP API：/api/stat/lal_info，GET请求，无参数）
	GetLalInfo(context.Context, *GetLalInfoReq) (*GetLalInfoRes, error)
	// 启动中继拉流（对应HTTP API：/api/ctrl/start_relay_pull，POST请求+JSON Body）
	StartRelayPull(context.Context, *StartRelayPullReq) (*StartRelayPullRes, error)
	// 停止中继拉流（对应HTTP API：/api/ctrl/stop_relay_pull，GET请求+URL参数）
	StopRelayPull(context.Context, *StopRelayPullReq) (*StopRelayPullRes, error)
	// 踢出指定会话（对应HTTP API：/api/ctrl/kick_session，POST请求+JSON Body；支持关闭pub/sub/pull类型会话）
	KickSession(context.Context, *KickSessionReq) (*KickSessionRes, error)
	// 打开GB28181 RTP接收端口（对应HTTP API：/api/ctrl/start_rtp_pub，POST请求+JSON Body）
	StartRtpPub(context.Context, *StartRtpPubReq) (*StartRtpPubRes, error)
	// 关闭GB28181 RTP接收端口（注：根据lalserver文档，当前需通过KickSession接口实现，本接口暂未开放）
	StopRtpPub(context.Context, *StopRtpPubReq) (*StopRtpPubRes, error)
	// 添加IP到黑名单（对应HTTP API：/api/ctrl/add_ip_blacklist，POST请求+JSON Body；目前仅支持HLS协议）
	AddIpBlacklist(context.Context, *AddIpBlacklistReq) (*AddIpBlacklistRes, error)
	mustEmbedUnimplementedLalProxyServer()
}

// UnimplementedLalProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLalProxyServer struct{}

func (UnimplementedLalProxyServer) GetGroupInfo(context.Context, *GetGroupInfoReq) (*GetGroupInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupInfo not implemented")
}
func (UnimplementedLalProxyServer) GetAllGroups(context.Context, *GetAllGroupsReq) (*GetAllGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGroups not implemented")
}
func (UnimplementedLalProxyServer) GetLalInfo(context.Context, *GetLalInfoReq) (*GetLalInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLalInfo not implemented")
}
func (UnimplementedLalProxyServer) StartRelayPull(context.Context, *StartRelayPullReq) (*StartRelayPullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRelayPull not implemented")
}
func (UnimplementedLalProxyServer) StopRelayPull(context.Context, *StopRelayPullReq) (*StopRelayPullRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRelayPull not implemented")
}
func (UnimplementedLalProxyServer) KickSession(context.Context, *KickSessionReq) (*KickSessionRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KickSession not implemented")
}
func (UnimplementedLalProxyServer) StartRtpPub(context.Context, *StartRtpPubReq) (*StartRtpPubRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRtpPub not implemented")
}
func (UnimplementedLalProxyServer) StopRtpPub(context.Context, *StopRtpPubReq) (*StopRtpPubRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRtpPub not implemented")
}
func (UnimplementedLalProxyServer) AddIpBlacklist(context.Context, *AddIpBlacklistReq) (*AddIpBlacklistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpBlacklist not implemented")
}
func (UnimplementedLalProxyServer) mustEmbedUnimplementedLalProxyServer() {}
func (UnimplementedLalProxyServer) testEmbeddedByValue()                  {}

// UnsafeLalProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LalProxyServer will
// result in compilation errors.
type UnsafeLalProxyServer interface {
	mustEmbedUnimplementedLalProxyServer()
}

func RegisterLalProxyServer(s grpc.ServiceRegistrar, srv LalProxyServer) {
	// If the following call pancis, it indicates UnimplementedLalProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LalProxy_ServiceDesc, srv)
}

func _LalProxy_GetGroupInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).GetGroupInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_GetGroupInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).GetGroupInfo(ctx, req.(*GetGroupInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_GetAllGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).GetAllGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_GetAllGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).GetAllGroups(ctx, req.(*GetAllGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_GetLalInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLalInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).GetLalInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_GetLalInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).GetLalInfo(ctx, req.(*GetLalInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_StartRelayPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRelayPullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).StartRelayPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_StartRelayPull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).StartRelayPull(ctx, req.(*StartRelayPullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_StopRelayPull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRelayPullReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).StopRelayPull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_StopRelayPull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).StopRelayPull(ctx, req.(*StopRelayPullReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_KickSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KickSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).KickSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_KickSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).KickSession(ctx, req.(*KickSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_StartRtpPub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRtpPubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).StartRtpPub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_StartRtpPub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).StartRtpPub(ctx, req.(*StartRtpPubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_StopRtpPub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRtpPubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).StopRtpPub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_StopRtpPub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).StopRtpPub(ctx, req.(*StopRtpPubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LalProxy_AddIpBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIpBlacklistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LalProxyServer).AddIpBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LalProxy_AddIpBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LalProxyServer).AddIpBlacklist(ctx, req.(*AddIpBlacklistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LalProxy_ServiceDesc is the grpc.ServiceDesc for LalProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LalProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lalproxy.lalProxy",
	HandlerType: (*LalProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupInfo",
			Handler:    _LalProxy_GetGroupInfo_Handler,
		},
		{
			MethodName: "GetAllGroups",
			Handler:    _LalProxy_GetAllGroups_Handler,
		},
		{
			MethodName: "GetLalInfo",
			Handler:    _LalProxy_GetLalInfo_Handler,
		},
		{
			MethodName: "StartRelayPull",
			Handler:    _LalProxy_StartRelayPull_Handler,
		},
		{
			MethodName: "StopRelayPull",
			Handler:    _LalProxy_StopRelayPull_Handler,
		},
		{
			MethodName: "KickSession",
			Handler:    _LalProxy_KickSession_Handler,
		},
		{
			MethodName: "StartRtpPub",
			Handler:    _LalProxy_StartRtpPub_Handler,
		},
		{
			MethodName: "StopRtpPub",
			Handler:    _LalProxy_StopRtpPub_Handler,
		},
		{
			MethodName: "AddIpBlacklist",
			Handler:    _LalProxy_AddIpBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lalproxy.proto",
}
