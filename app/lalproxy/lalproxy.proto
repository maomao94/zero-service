syntax = "proto3";

package Lalproxy;

option go_package = "./lalproxy";
option java_multiple_files = true;
option java_package = "com.github.lalproxy.grpc";
option java_outer_classname = "LalProxyProto";

// LalProxy服务：封装lalserver全部HTTP API能力，包含查询类（/api/stat）和控制类（/api/ctrl）接口
service LalProxy {
  // 查询指定group信息（对应HTTP API：/api/stat/group，GET请求+URL参数）
  rpc GetGroupInfo (GetGroupInfoReq) returns (GetGroupInfoRes);
  // 查询所有group信息（对应HTTP API：/api/stat/all_group，GET请求，无参数）
  rpc GetAllGroups (GetAllGroupsReq) returns (GetAllGroupsRes);
  // 查询服务器基础信息（对应HTTP API：/api/stat/lal_info，GET请求，无参数）
  rpc GetLalInfo (GetLalInfoReq) returns (GetLalInfoRes);
  // 启动中继拉流（对应HTTP API：/api/ctrl/start_relay_pull，POST请求+JSON Body）
  rpc StartRelayPull (StartRelayPullReq) returns (StartRelayPullRes);
  // 停止中继拉流（对应HTTP API：/api/ctrl/stop_relay_pull，GET请求+URL参数）
  rpc StopRelayPull (StopRelayPullReq) returns (StopRelayPullRes);
  // 踢出指定会话（对应HTTP API：/api/ctrl/kick_session，POST请求+JSON Body；支持关闭pub/sub/pull类型会话）
  rpc KickSession (KickSessionReq) returns (KickSessionRes);
  // 打开GB28181 RTP接收端口（对应HTTP API：/api/ctrl/start_rtp_pub，POST请求+JSON Body）
  rpc StartRtpPub (StartRtpPubReq) returns (StartRtpPubRes);
  // 关闭GB28181 RTP接收端口（注：根据lalserver文档，当前需通过KickSession接口实现，本接口暂未开放）
  rpc StopRtpPub (StopRtpPubReq) returns (StopRtpPubRes);
  // 添加IP到黑名单（对应HTTP API：/api/ctrl/add_ip_blacklist，POST请求+JSON Body；目前仅支持HLS协议）
  rpc AddIpBlacklist (AddIpBlacklistReq) returns (AddIpBlacklistRes);
}

// 会话详情：用于GroupData中描述单个流会话的信息（对应lalserver /api/stat/group接口返回的session列表结构）
message SessionInfo {
  // 会话ID（唯一标识，如"FLVSUB1"、"RTMPPULL1"；与KickSession接口的sessionId字段对应）
  string sessionId = 1 [json_name = "sessionId"];
  // 会话类型（"pub"=发布者，"sub"=订阅者，"pull"=中继拉流者；与KickSession接口的sessionType字段对应）
  string sessionType = 2 [json_name = "sessionType"];
  // 客户端IP（会话对应的客户端地址，如"192.168.1.100"；用于定位会话来源）
  string clientIp = 3 [json_name = "clientIp"];
  // 客户端端口（会话对应的客户端端口，如54321；与clientIp配合标识完整客户端地址）
  int32 clientPort = 4 [json_name = "clientPort"];
  // 协议类型（会话使用的流媒体协议，如"rtmp"、"flv"、"hls"、"rtsp"）
  string protocol = 5 [json_name = "protocol"];
  // 创建时间（会话建立的时间戳，单位毫秒；如1716000000000）
  int64 createTimeMs = 6 [json_name = "createTimeMs"];
  // 存活时长（会话已存活的时间，单位秒；如300表示已存活5分钟）
  int32 aliveSec = 7 [json_name = "aliveSec"];
  // 接收字节数（会话累计接收的数据量，单位字节；用于统计流量）
  int64 recvBytes = 8 [json_name = "recvBytes"];
  // 发送字节数（会话累计发送的数据量，单位字节；用于统计流量）
  int64 sendBytes = 9 [json_name = "sendBytes"];
}

// 视频编码信息：用于GroupData中描述流的视频编码参数
message VideoCodec {
  // 编码格式（如"h264"、"h265"、"vp8"；对应流的视频压缩格式）
  string codec = 1 [json_name = "codec"];
  // 分辨率宽度（视频画面宽度，单位像素；如1920）
  int32 width = 2 [json_name = "width"];
  // 分辨率高度（视频画面高度，单位像素；如1080）
  int32 height = 3 [json_name = "height"];
  // 帧率（每秒视频帧数，如25、30；反映视频流畅度）
  int32 fps = 4 [json_name = "fps"];
  // 码率（视频编码码率，单位bps；如2000000表示2Mbps）
  int64 bitrateBps = 5 [json_name = "bitrateBps"];
  // 关键帧间隔（两个关键帧之间的间隔，单位秒；如10表示每10秒一个关键帧）
  int32 gopSec = 6 [json_name = "gopSec"];
}

// 音频编码信息：用于GroupData中描述流的音频编码参数
message AudioCodec {
  // 编码格式（如"aac"、"mp3"、"pcm"；对应流的音频压缩格式）
  string codec = 1 [json_name = "codec"];
  // 采样率（音频采样频率，单位Hz；如44100、48000）
  int32 sampleRate = 2 [json_name = "sampleRate"];
  // 声道数（音频声道数量，如1=单声道，2=立体声）
  int32 channels = 3 [json_name = "channels"];
  // 码率（音频编码码率，单位bps；如128000表示128Kbps）
  int64 bitrateBps = 4 [json_name = "bitrateBps"];
}

// 分组数据：对应查询接口返回的单个流分组详情（GetGroupInfoRes.data、GetAllGroupsRes.groups元素）
message GroupData {
  // 流名称（分组唯一标识，与请求参数streamName一致；如"test110"）
  string streamName = 1 [json_name = "streamName"];
  // 分组状态（"active"=活跃，"inactive"=非活跃；标识流是否正常传输）
  string status = 2 [json_name = "status"];
  // 视频编码信息（流的视频参数；无视频流时为空）
  VideoCodec video = 3 [json_name = "video"];
  // 音频编码信息（流的音频参数；无音频流时为空）
  AudioCodec audio = 4 [json_name = "audio"];
  // 会话列表（分组下所有活跃会话；包含发布者、订阅者、拉流者会话）
  repeated SessionInfo sessions = 5 [json_name = "sessions"];
  // 发布者数量（分组下活跃的发布者会话数；通常为1，多发布者场景可能大于1）
  int32 pubCount = 6 [json_name = "pubCount"];
  // 订阅者数量（分组下活跃的订阅者会话数；反映流的观看人数）
  int32 subCount = 7 [json_name = "subCount"];
  // 拉流者数量（分组下活跃的中继拉流会话数；反映流的分发情况）
  int32 pullCount = 8 [json_name = "pullCount"];
  // 总会话数（pubCount + subCount + pullCount；分组下所有活跃会话总数）
  int32 totalSessionCount = 9 [json_name = "totalSessionCount"];
  // 分组创建时间（分组首次建立的时间戳，单位毫秒；如1716000000000）
  int64 createTimeMs = 10 [json_name = "createTimeMs"];
}

// 服务器基础信息：对应GetLalInfoRes.data，描述lalserver的系统与运行参数
message LalServerData {
  // 服务版本（lalserver的版本号，如"v1.5.0"；用于确认服务版本兼容性）
  string version = 1 [json_name = "version"];
  // 启动时间（服务启动的时间戳，单位毫秒；如1716000000000）
  int64 startTimeMs = 2 [json_name = "startTimeMs"];
  // 运行时长（服务已运行的时间，单位秒；如86400表示已运行1天）
  int32 runSec = 3 [json_name = "runSec"];
  // 监听地址列表（服务所有监听的网络地址，如["rtmp://0.0.0.0:1935", "http://0.0.0.0:8080"]）
  repeated string listenAddrs = 4 [json_name = "listenAddrs"];
  // 当前活跃分组数（服务中正在传输的流分组数量；反映服务负载情况）
  int32 activeGroupCount = 5 [json_name = "activeGroupCount"];
  // 当前总会话数（服务中所有活跃的流媒体会话数量；反映服务并发量）
  int32 totalSessionCount = 6 [json_name = "totalSessionCount"];
  // Go语言版本（服务编译使用的Go版本，如"go1.21.0"；用于排查语言相关问题）
  string goVersion = 7 [json_name = "goVersion"];
  // 操作系统架构（服务运行的系统架构，如"linux/amd64"、"darwin/arm64"）
  string osArch = 8 [json_name = "osArch"];
  // CPU核心数（服务运行环境的CPU核心数量；如8）
  int32 cpuCores = 9 [json_name = "cpuCores"];
  // 内存使用量（服务当前占用的内存，单位字节；如1073741824表示1GB）
  int64 memoryUsedBytes = 10 [json_name = "memoryUsedBytes"];
}

// GetGroupInfo请求：对应/api/stat/group接口，查询指定流名称的group信息
message GetGroupInfoReq {
  // 流名称（必填，URL参数；用于指定查询的group，如"test110"；缺失时返回error_code=1002）
  string streamName = 1 [json_name = "streamName"];
}

// GetGroupInfo响应：对应/api/stat/group接口返回结果
message GetGroupInfoRes {
  // 错误码（0=成功，1001=group不存在，1002=参数缺失；参考lalserver HTTP API错误码规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因，如"group not found"；与errorCode一一对应）
  string desp = 2 [json_name = "desp"];
  // 分组详细数据（成功时返回，包含流编码、会话列表、帧率等信息；失败时为空）
  GroupData data = 3 [json_name = "data"];
}

// GetAllGroups请求：对应/api/stat/all_group接口，查询所有活跃group列表
message GetAllGroupsReq {}

// GetAllGroups响应：对应/api/stat/all_group接口返回结果
message GetAllGroupsRes {
  // 错误码（仅0=成功；无其他错误场景，参考lalserver HTTP API规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"；无失败场景，固定返回该值）
  string desp = 2 [json_name = "desp"];
  // 所有group列表（成功时返回，每个元素格式与GetGroupInfoRes.data一致；无活跃group时为空数组）
  repeated GroupData groups = 3 [json_name = "groups"];
}

// GetLalInfo请求：对应/api/stat/lal_info接口，查询lalserver服务器基础信息
message GetLalInfoReq {}

// GetLalInfo响应：对应/api/stat/lal_info接口返回结果
message GetLalInfoRes {
  // 错误码（仅0=成功；无其他错误场景，参考lalserver HTTP API规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"；无失败场景，固定返回该值）
  string desp = 2 [json_name = "desp"];
  // 服务器信息数据（成功时返回，包含版本、启动时间等基础信息；无失败场景，必然非空）
  LalServerData data = 3 [json_name = "data"];
}

// StartRelayPull请求：对应/api/ctrl/start_relay_pull接口，控制服务器从远端拉流
message StartRelayPullReq {
  // 拉流URL（必填，JSON Body参数；支持RTMP/RTSP协议，如"rtmp://127.0.0.1/live/test110"；缺失时返回error_code=1002）
  string url = 1 [json_name = "url"];
  // 流名称（选填，JSON Body参数；不指定则从url中解析；如"test110"）
  string streamName = 2 [json_name = "streamName"];
  // 拉流超时时间（选填，JSON Body参数；单位毫秒，默认10000ms；表示建立拉流会话的超时阈值）
  int32 pullTimeoutMs = 3 [json_name = "pullTimeoutMs"];
  // 拉流重试次数（选填，JSON Body参数；-1=一直重试，0=不重试，>0=指定次数；默认0；断开后是否自动重试）
  int32 pullRetryNum = 4 [json_name = "pullRetryNum"];
  // 无输出自动停止时间（选填，JSON Body参数；单位毫秒，默认-1；-1=不自动停止，>0=无观看者持续该时长后停止拉流）
  int32 autoStopPullAfterNoOutMs = 5 [json_name = "autoStopPullAfterNoOutMs"];
  // RTSP模式（选填，JSON Body参数；0=TCP，1=UDP；仅RTSP协议拉流时生效，默认0）
  int32 rtspMode = 6 [json_name = "rtspMode"];
  // 调试数据包存储路径（选填，JSON Body参数；默认空字符串；非空时将拉流数据存为文件，如"./dump/test110.laldump"，用于问题排查）
  string debugDumpPacket = 7 [json_name = "debugDumpPacket"];
}

// StartRelayPull响应：对应/api/ctrl/start_relay_pull接口返回结果
message StartRelayPullRes {
  // 错误码（0=请求成功，1002=参数错误，2001=拉流失败；2001包含具体失败原因，如"in stream already exist"）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因；如参数错误返回"param missing"，拉流失败返回"lal.logic: in stream already exist"）
  string desp = 2 [json_name = "desp"];
}

// StopRelayPull请求：对应/api/ctrl/stop_relay_pull接口，停止指定流的中继拉流
message StopRelayPullReq {
  // 流名称（必填，URL参数；用于指定停止拉流的group，如"test110"；缺失时返回error_code=1002）
  string streamName = 1 [json_name = "streamName"];
}

// StopRelayPull响应：对应/api/ctrl/stop_relay_pull接口返回结果
message StopRelayPullRes {
  // 错误码（0=成功，1001=group不存在，1002=参数缺失，1003=pull会话不存在；参考lalserver HTTP API错误码规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因，如"pull session not found"；与errorCode一一对应）
  string desp = 2 [json_name = "desp"];
}

// KickSession请求：对应/api/ctrl/kick_session接口，踢出指定流的指定会话
message KickSessionReq {
  // 流名称（必填，JSON Body参数；会话所属的group，如"test110"；缺失时返回error_code=1002）
  string streamName = 1 [json_name = "streamName"];
  // 会话ID（必填，JSON Body参数；唯一标识要踢出的会话，如"FLVSUB1"；需从查询接口获取，缺失时返回error_code=1002）
  string sessionId = 2 [json_name = "sessionId"];
  // 会话类型（选填，JSON Body参数；过滤会话角色，如"pub"=发布者，"sub"=订阅者，"pull"=拉流者；不填则匹配所有类型）
  string sessionType = 3 [json_name = "sessionType"];
}

// KickSession响应：对应/api/ctrl/kick_session接口返回结果
message KickSessionRes {
  // 错误码（0=成功，1001=group不存在，1002=参数错误，1003=会话不存在；参考lalserver HTTP API错误码规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因，如"session not found"；与errorCode一一对应）
  string desp = 2 [json_name = "desp"];
}

// StartRtpPub请求：对应/api/ctrl/start_rtp_pub接口，打开GB28181 RTP接收端口
message StartRtpPubReq {
  // 流名称（必填，JSON Body参数；绑定RTP流的标识，如"test110"；后续拉流、录制均使用该名称，缺失时返回error_code=1002）
  string streamName = 1 [json_name = "streamName"];
  // 接收端口（选填，JSON Body参数；默认0；0表示随机分配端口，非0表示指定端口；绑定失败返回error_code=2002）
  int32 port = 2 [json_name = "port"];
  // 超时时间（选填，JSON Body参数；单位毫秒，默认60000ms；超时无数据则关闭端口，0表示不超时）
  int32 timeoutMs = 3 [json_name = "timeoutMs"];
  // TCP传输标识（选填，JSON Body参数；0=UDP，1=TCP；默认0；指定RTP流的传输协议）
  int32 isTcpFlag = 4 [json_name = "isTcpFlag"];
  // 调试数据包存储路径（选填，JSON Body参数；默认空字符串；非空时存储RTP数据到文件，用于问题排查，如"/tmp/test110.laldump"）
  string debugDumpPacket = 5 [json_name = "debugDumpPacket"];
}

// StartRtpPub响应：对应/api/ctrl/start_rtp_pub接口返回结果
message StartRtpPubRes {
  // 错误码（0=成功，1002=参数错误，2002=端口绑定失败；参考lalserver HTTP API错误码规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因，如"open gb28181 port failed"；与errorCode一一对应）
  string desp = 2 [json_name = "desp"];
}

// StopRtpPub请求：对应/api/ctrl/stop_rtp_pub接口（注：根据lalserver文档，当前暂未开放，需使用KickSession接口替代）
message StopRtpPubReq {
  // 流名称（选填，JSON Body参数；用于匹配要关闭的RTP流，如"test110"）
  string streamName = 1 [json_name = "streamName"];
  // 接收端口（选填，JSON Body参数；用于匹配要关闭的RTP端口，如20000；与流名称配合定位目标）
  int32 port = 2 [json_name = "port"];
}

// StopRtpPub响应：对应/api/ctrl/stop_rtp_pub接口返回结果（注：接口暂未开放，返回结果参考KickSession）
message StopRtpPubRes {
  // 错误码（0=成功，1001=group不存在，1002=参数错误，1003=RTP会话不存在；参考lalserver HTTP API错误码规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因，如"rtp pub session not found"；与errorCode一一对应）
  string desp = 2 [json_name = "desp"];
}

// AddIpBlacklist请求：对应/api/ctrl/add_ip_blacklist接口，添加IP到HLS协议黑名单
message AddIpBlacklistReq {
  // IP地址（必填，JSON Body参数；要加入黑名单的客户端IP，如"127.0.0.1"；缺失时返回error_code=1002）
  string ip = 1 [json_name = "ip"];
  // 黑名单时长（必填，JSON Body参数；单位秒，如60；表示IP在黑名单中的有效时间，缺失时返回error_code=1002）
  int32 durationSec = 2 [json_name = "durationSec"];
}

// AddIpBlacklist响应：对应/api/ctrl/add_ip_blacklist接口返回结果
message AddIpBlacklistRes {
  // 错误码（0=成功，1002=参数错误；参考lalserver HTTP API错误码规范）
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述（成功时为"succ"，失败时为具体原因，如"ip invalid"；与errorCode一一对应）
  string desp = 2 [json_name = "desp"];
}