syntax = "proto3";

package lalproxy;

option go_package = "./lalproxy";
option java_multiple_files = true;
option java_package = "com.github.lalproxy.grpc";
option java_outer_classname = "LalProxyProto";

message Req {
  string ping = 1 [json_name = "ping"];
}

message Res {
  string pong = 1 [json_name = "pong"];
}

service LalProxy {
  // 查询特定流分组的信息
  rpc GetGroupInfo (GetGroupInfoReq) returns (GetGroupInfoRes);
  // 查询所有流分组的信息
  rpc GetAllGroups (GetAllGroupsReq) returns (GetAllGroupsRes);
  // 查询服务器基本信息
  rpc GetLalInfo (GetLalInfoReq) returns (GetLalInfoRes);
  // 控制服务器从远端拉流至本地
  rpc StartRelayPull (StartRelayPullReq) returns (StartRelayPullRes);
  // 停止从远端拉流
  rpc StopRelayPull (StopRelayPullReq) returns (StopRelayPullRes);
  // 强行踢出关闭指定会话
  rpc KickSession (KickSessionReq) returns (KickSessionRes);
  // 打开GB28181接收端口
  rpc StartRtpPub (StartRtpPubReq) returns (StartRtpPubRes);
  // 关闭GB28181接收端口
  rpc StopRtpPub (StopRtpPubReq) returns (StopRtpPubRes);
  // 增加IP黑名单，加入名单的IP将无法连接本服务
  rpc AddIpBlacklist (AddIpBlacklistReq) returns (AddIpBlacklistRes);
}

// 查询特定流分组的请求参数
message GetGroupInfoReq {
  // 流名称，用于指定要查询的分组
  string streamName = 1 [json_name = "streamName"];
}

// 查询特定流分组的响应
message GetGroupInfoRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 分组详细信息
  GroupData data = 3 [json_name = "data"];
}

// 查询所有流分组的请求参数（暂无需额外参数）
message GetAllGroupsReq {}

// 查询所有流分组的响应
message GetAllGroupsRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 所有分组的列表
  repeated GroupData groups = 3 [json_name = "groups"];
}

// 查询服务器信息的请求参数（暂无需额外参数）
message GetLalInfoReq {}

// 查询服务器信息的响应
message GetLalInfoRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 服务器详细信息
  LalServerData data = 3 [json_name = "data"];
}

// 启动中继拉流的请求参数
message StartRelayPullReq {
  // 拉流地址（如rtmp://example.com/live/stream）
  string url = 1 [json_name = "url"];
  // 流名称，可选，默认从url中解析
  string streamName = 2 [json_name = "streamName"];
  // 拉流超时时间，单位：毫秒
  int32 pullTimeoutMs = 3 [json_name = "pullTimeoutMs"];
  // 拉流重试次数（-1表示一直重试，0表示不重试）
  int32 pullRetryNum = 4 [json_name = "pullRetryNum"];
  // 无输出时自动停止拉流的时间，单位：毫秒
  int32 autoStopPullAfterNoOutMs = 5 [json_name = "autoStopPullAfterNoOutMs"];
  // RTSP模式（0表示TCP，1表示UDP）
  int32 rtspMode = 6 [json_name = "rtspMode"];
}

// 启动中继拉流的响应
message StartRelayPullRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 停止中继拉流的请求参数
message StopRelayPullReq {
  // 要停止拉流的流名称
  string streamName = 1 [json_name = "streamName"];
}

// 停止中继拉流的响应
message StopRelayPullRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 踢出会话的请求参数
message KickSessionReq {
  // 流名称
  string streamName = 1 [json_name = "streamName"];
  // 会话ID，可通过查询接口获取
  string sessionId = 2 [json_name = "sessionId"];
  // 会话类型（可选，如"pub"发布者,"sub"订阅者,"pull"拉流者）
  string sessionType = 3 [json_name = "sessionType"];
}

// 踢出会话的响应
message KickSessionRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 启动RTP发布的请求参数（GB28181相关）
message StartRtpPubReq {
  // 本地接收RTP流的端口
  int32 port = 1 [json_name = "port"];
  // 流名称，用于标识该RTP流
  string streamName = 2 [json_name = "streamName"];
}

// 启动RTP发布的响应
message StartRtpPubRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 停止RTP发布的请求参数（GB28181相关）
message StopRtpPubReq {
  // 要关闭的RTP接收端口
  int32 port = 1 [json_name = "port"];
  // 流名称，用于标识要停止的RTP流
  string streamName = 2 [json_name = "streamName"];
}

// 停止RTP发布的响应
message StopRtpPubRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 添加IP黑名单的请求参数
message AddIpBlacklistReq {
  // 要加入黑名单的IP地址
  string ip = 1 [json_name = "ip"];
  // 黑名单过期时间，单位：秒（0表示永久有效）
  int32 expireSeconds = 2 [json_name = "expireSeconds"];
}

// 通用操作响应消息类型（用于各操作响应的基础结构）
message OperationRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 添加IP黑名单的响应
message AddIpBlacklistRes {
  // 错误码，0表示成功，非0表示失败
  int32 errorCode = 1 [json_name = "errorCode"];
  // 错误描述信息
  string desp = 2 [json_name = "desp"];
  // 操作结果的附加数据（可能为空）
  map<string, string> data = 3 [json_name = "data"];
}

// 流分组数据结构
message GroupData {
  string streamName = 1 [json_name = "streamName"];      // 流名称
  string appName = 2 [json_name = "appName"];            // 应用名称
  string audioCodec = 3 [json_name = "audioCodec"];      // 音频编码格式
  string videoCodec = 4 [json_name = "videoCodec"];      // 视频编码格式
  int32 videoWidth = 5 [json_name = "videoWidth"];       // 视频宽度
  int32 videoHeight = 6 [json_name = "videoHeight"];     // 视频高度
  SessionInfo pub = 7 [json_name = "pub"];               // 发布者信息
  repeated SessionInfo subs = 8 [json_name = "subs"];    // 订阅者列表
  SessionInfo pull = 9 [json_name = "pull"];             // 拉流回源信息
  repeated bytes pushs = 10 [json_name = "pushs"];       // 外连转推信息
  repeated FrameData inFramePerSec = 11 [json_name = "inFramePerSec"]; // 帧率数据
}

// 会话信息数据结构
message SessionInfo {
  string sessionId = 1 [json_name = "sessionId"];             // 会话ID
  string protocol = 2 [json_name = "protocol"];               // 协议类型（RTMP/FLV等）
  string baseType = 3 [json_name = "baseType"];               // 基础类型（PUB/SUB/PULL）
  string startTime = 4 [json_name = "startTime"];             // 会话开始时间（字符串）
  string remoteAddr = 5 [json_name = "remoteAddr"];           // 对端地址
  int64 readBytesSum = 6 [json_name = "readBytesSum"];        // 累计读取字节数
  int64 wroteBytesSum = 7 [json_name = "wroteBytesSum"];      // 累计写入字节数
  int32 bitrateKbits = 8 [json_name = "bitrateKbits"];        // 最近5秒码率（kbit/s）
  int32 readBitrateKbits = 9 [json_name = "readBitrateKbits"];// 最近5秒读取码率
  int32 writeBitrateKbits = 10 [json_name = "writeBitrateKbits"]; // 最近5秒写入码率
}

// 帧率数据结构
message FrameData {
  // Unix 时间戳（单位：秒），标记该帧统计的具体时间点
  int64 unixSec = 1 [json_name = "unixSec"];
  // 对应时间戳那一秒内的视频帧数（即该秒的 FPS 值）
  int32 v = 2 [json_name = "v"];
}

// 服务器信息数据结构
message LalServerData {
  string serverId = 1 [json_name = "serverId"];         // 服务器ID
  string binInfo = 2 [json_name = "binInfo"];           // 二进制版本信息
  string lalVersion = 3 [json_name = "lalVersion"];     // LAL服务版本
  string apiVersion = 4 [json_name = "apiVersion"];     // API接口版本
  string notifyVersion = 5 [json_name = "notifyVersion"]; // 通知接口版本
  string startTime = 6 [json_name = "startTime"];       // 服务启动时间（字符串格式）
}
