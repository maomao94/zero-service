// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.3
// source: zeroalarm.proto

package zeroalarm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ZeroalarmClient is the client API for Zeroalarm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZeroalarmClient interface {
	Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	Alarm(ctx context.Context, in *AlarmReq, opts ...grpc.CallOption) (*AlarmRes, error)
}

type zeroalarmClient struct {
	cc grpc.ClientConnInterface
}

func NewZeroalarmClient(cc grpc.ClientConnInterface) ZeroalarmClient {
	return &zeroalarmClient{cc}
}

func (c *zeroalarmClient) Ping(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/zeroalarm.Zeroalarm/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zeroalarmClient) Alarm(ctx context.Context, in *AlarmReq, opts ...grpc.CallOption) (*AlarmRes, error) {
	out := new(AlarmRes)
	err := c.cc.Invoke(ctx, "/zeroalarm.Zeroalarm/Alarm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZeroalarmServer is the server API for Zeroalarm service.
// All implementations must embed UnimplementedZeroalarmServer
// for forward compatibility
type ZeroalarmServer interface {
	Ping(context.Context, *Req) (*Res, error)
	Alarm(context.Context, *AlarmReq) (*AlarmRes, error)
	mustEmbedUnimplementedZeroalarmServer()
}

// UnimplementedZeroalarmServer must be embedded to have forward compatible implementations.
type UnimplementedZeroalarmServer struct {
}

func (UnimplementedZeroalarmServer) Ping(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedZeroalarmServer) Alarm(context.Context, *AlarmReq) (*AlarmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alarm not implemented")
}
func (UnimplementedZeroalarmServer) mustEmbedUnimplementedZeroalarmServer() {}

// UnsafeZeroalarmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZeroalarmServer will
// result in compilation errors.
type UnsafeZeroalarmServer interface {
	mustEmbedUnimplementedZeroalarmServer()
}

func RegisterZeroalarmServer(s grpc.ServiceRegistrar, srv ZeroalarmServer) {
	s.RegisterService(&Zeroalarm_ServiceDesc, srv)
}

func _Zeroalarm_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroalarmServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroalarm.Zeroalarm/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroalarmServer).Ping(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zeroalarm_Alarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZeroalarmServer).Alarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zeroalarm.Zeroalarm/Alarm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZeroalarmServer).Alarm(ctx, req.(*AlarmReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Zeroalarm_ServiceDesc is the grpc.ServiceDesc for Zeroalarm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zeroalarm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zeroalarm.Zeroalarm",
	HandlerType: (*ZeroalarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Zeroalarm_Ping_Handler,
		},
		{
			MethodName: "Alarm",
			Handler:    _Zeroalarm_Alarm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zeroalarm.proto",
}
